
LEDTileApplication.elf:     file format elf32-littlenios2
LEDTileApplication.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b8

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0001374c memsz 0x0001374c flags r-x
    LOAD off    0x0001476c vaddr 0x0201376c paddr 0x02014b90 align 2**12
         filesz 0x00001424 memsz 0x00001424 flags rw-
    LOAD off    0x00015fb4 vaddr 0x02015fb4 paddr 0x02015fb4 align 2**12
         filesz 0x00000000 memsz 0x000001c4 flags rw-
    LOAD off    0x00016000 vaddr 0x04009000 paddr 0x04009000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04009000  04009000  00016000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004450  020001b8  020001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000f164  02004608  02004608  00005608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001424  0201376c  02014b90  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001c4  02015fb4  02015fb4  00015fb4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00016020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000710  00000000  00000000  00016048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000b439  00000000  00000000  00016758  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000039b8  00000000  00000000  00021b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004044  00000000  00000000  00025549  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000de0  00000000  00000000  00029590  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000020c3  00000000  00000000  0002a370  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002829  00000000  00000000  0002c433  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0002ec5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002b8  00000000  00000000  0002ec70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000313c9  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000313cc  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000313cf  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000313d0  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000313d1  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000313d5  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000313d9  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000313dd  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000313e6  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000313ef  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  000313f8  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000022  00000000  00000000  000313fc  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0007215f  00000000  00000000  0003141e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04009000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b8 l    d  .text	00000000 .text
02004608 l    d  .rodata	00000000 .rodata
0201376c l    d  .rwdata	00000000 .rwdata
02015fb4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LEDTileApplication_bsp//obj/HAL/src/crt0.o
020001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
02000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
02015fd4 l     O .bss	00000018 alarm
02015fb4 l     O .bss	00000004 i.2375
00000000 l    df *ABS*	00000000 lib2-divmod.c
02000568 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
020137a0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_load.c
020011e8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
020014e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
02001628 l     F .text	00000038 alt_dev_reg
02013880 l     O .rwdata	000000c8 epcs_flash_controller
02013948 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
02001700 l     F .text	00000038 alt_flash_device_register
0200178c l     F .text	0000028c alt_epcs_flash_query
02001a18 l     F .text	000000e8 alt_epcs_flash_memcmp
02001dec l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
020022b4 l     F .text	00000204 altera_avalon_jtag_uart_irq
020024b8 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02002af0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
02002c48 l     F .text	00000038 epcs_test_wip
02002c80 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_close.c
02003210 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
02003348 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02003374 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
020038b8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02003a10 l     F .text	00000050 alt_get_errno
02003a60 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
02011708 g     O .rodata	00001000 Octoroc1
02001d60 g     F .text	0000008c alt_epcs_flash_get_info
020012d4 g     F .text	00000078 alt_main
02000340 g     F .text	0000006c my_alarm_callback
02000720 g     F .text	00000080 _puts_r
02015fec g     O .bss	00000100 alt_irq
02014b90 g       *ABS*	00000000 __flash_rwdata_start
0200a708 g     O .rodata	00001000 Coin
02000268 g     F .text	000000d8 blank
020006d4 g     F .text	0000004c printf
02008708 g     O .rodata	00001000 Bowser
0200f708 g     O .rodata	00001000 RedSlime
00000000  w      *UND*	00000000 __errno
02002cb8 g     F .text	000000f8 epcs_sector_erase
04009000 g     F .entry	0000000c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
02015fb8 g     O .bss	00000004 errno
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
02015fc0 g     O .bss	00000004 alt_argv
0201cb50 g       *ABS*	00000000 _gp
020149d0 g     O .rwdata	00000180 alt_fd_list
02002ef4 g     F .text	00000068 epcs_write_status_register
02003f50 g     F .text	00000090 alt_find_dev
02004244 g     F .text	00000028 memcpy
02004608 g     O .rodata	00000100 cie1931
02003998 g     F .text	00000078 alt_io_redirect
02004608 g       *ABS*	00000000 __DTOR_END__
020007a0 g     F .text	00000014 puts
02001ef4 g     F .text	00000104 alt_epcs_flash_write_block
020026b8 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02000698 g     F .text	0000003c _printf_r
02000688 g     F .text	00000008 __udivsi3
0200c708 g     O .rodata	00001000 Link
0200b708 g     O .rodata	00001000 MegaMan
02014b7c g     O .rwdata	00000004 alt_max_fd
02005708 g     O .rodata	00001000 Goomba
02014b50 g     O .rwdata	00000008 octorocPtrs
02001e80 g     F .text	00000074 alt_epcs_flash_erase_block
02014b5c g     O .rwdata	00000004 _global_impure_ptr
020031b8 g     F .text	00000058 epcs_exit_4_bytes_mode
02016178 g       *ABS*	00000000 __bss_end
020037c8 g     F .text	000000f0 alt_iic_isr_register
02010708 g     O .rodata	00001000 BlueGhost
020013e4 g     F .text	00000104 alt_tick
02014b58 g     O .rwdata	00000004 numBitmaps
0200377c g     F .text	0000004c alt_ic_irq_enabled
0200134c g     F .text	00000098 alt_alarm_stop
02015fd0 g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000cc alt_irq_handler
020149a8 g     O .rwdata	00000028 alt_dev_null
02012708 g     O .rodata	00001000 Octoroc2
0200332c g     F .text	0000001c alt_dcache_flush_all
02014b90 g       *ABS*	00000000 __ram_rwdata_end
02014b74 g     O .rwdata	00000008 alt_dev_list
02001538 g     F .text	000000f0 write
0201376c g       *ABS*	00000000 __ram_rodata_end
02000690 g     F .text	00000008 __umodsi3
02003078 g     F .text	00000068 epcs_read_electronic_signature
02006708 g     O .rodata	00001000 CheepCheep
02016178 g       *ABS*	00000000 end
020021f4 g     F .text	000000c0 altera_avalon_jtag_uart_init
0200d708 g     O .rodata	00001000 Kain
02004608 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02002b64 g     F .text	00000088 alt_avalon_timer_sc_init
020028d0 g     F .text	00000220 altera_avalon_jtag_uart_write
020007dc g     F .text	00000734 ___vfprintf_internal_r
020043f4 g     F .text	000001d8 __call_exitprocs
020001b8 g     F .text	0000003c _start
02015fc8 g     O .bss	00000004 _alt_tick_rate
02003d48 g     F .text	00000208 alt_avalon_spi_command
02015fcc g     O .bss	00000004 _alt_nticks
02001694 g     F .text	0000006c alt_sys_init
0200426c g     F .text	00000188 __register_exitproc
0200255c g     F .text	00000068 altera_avalon_jtag_uart_close
02001080 g     F .text	00000028 __mulsi3
0201376c g       *ABS*	00000000 __ram_rwdata_start
02004608 g       *ABS*	00000000 __ram_rodata_start
02002bec g     F .text	0000005c epcs_read_status_register
02002090 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
020040f4 g     F .text	000000d4 alt_get_fd
020030e0 g     F .text	00000080 epcs_read_device_id
020041fc g     F .text	00000048 memcmp
02002150 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02016178 g       *ABS*	00000000 __alt_stack_base
020021a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04009000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller
02003fe0 g     F .text	00000114 alt_find_file
020033c4 g     F .text	000000a0 alt_dev_llist_insert
020003ac g     F .text	0000013c displayBitmap
02014b84 g     O .rwdata	00000008 alt_flash_dev_list
02007708 g     O .rodata	00001000 KoopaTroopa
02000f34 g     F .text	000000e0 __sfvwrite_small_dev
0200e708 g     O .rodata	00001000 BlueVirus
02015fb4 g       *ABS*	00000000 __bss_start
020004e8 g     F .text	00000080 main
02015fc4 g     O .bss	00000004 alt_envp
02004708 g     O .rodata	00001000 Mushroom
020020f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
020160ec g     O .bss	0000008c _atexit0
02014b80 g     O .rwdata	00000004 alt_errno
020005dc g     F .text	00000050 __divsi3
02004608 g       *ABS*	00000000 __CTOR_END__
02001b00 g     F .text	00000260 alt_epcs_flash_write
02004608 g       *ABS*	00000000 __flash_rodata_start
02004608 g       *ABS*	00000000 __DTOR_LIST__
020001f4 g     F .text	00000038 delay
02001660 g     F .text	00000034 alt_irq_init
02003ca8 g     F .text	00000080 alt_release_fd
020041c8 g     F .text	00000014 atexit
02001014 g     F .text	0000006c _write_r
02014b60 g     O .rwdata	00000004 _impure_ptr
02015fbc g     O .bss	00000004 alt_argc
020034c0 g     F .text	0000005c _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
02014b6c g     O .rwdata	00000008 alt_fs_list
02009708 g     O .rodata	00001000 QuestionBlock
02000020 g       *ABS*	00000000 __ram_exceptions_start
02002db0 g     F .text	000000f4 epcs_read_buffer
04000000 g       *ABS*	00000000 __alt_mem_onchip_memory2
02001738 g     F .text	00000054 alt_epcs_flash_init
020035f0 g     F .text	00000050 alt_ic_isr_register
02014b90 g       *ABS*	00000000 _edata
02016178 g       *ABS*	00000000 _end
0200351c g     F .text	00000068 alt_flash_open_dev
020001b8 g       *ABS*	00000000 __ram_exceptions_end
020025c4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
020036dc g     F .text	000000a0 alt_ic_irq_disable
02003160 g     F .text	00000058 epcs_enter_4_bytes_mode
02003d28 g     F .text	00000020 altera_nios2_qsys_irq_init
020041dc g     F .text	00000020 exit
02003584 g     F .text	00000050 alt_flash_close_dev
0200062c g     F .text	0000005c __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
020045cc g     F .text	0000003c _exit
020010a8 g     F .text	00000140 alt_alarm_start
020007b4 g     F .text	00000028 strlen
02002ea4 g     F .text	00000050 epcs_write_enable
02003b50 g     F .text	00000158 open
0201376c g     O .rwdata	00000034 bitmapPtrs
020035d4 g     F .text	0000001c alt_icache_flush_all
02014b8c g     O .rwdata	00000004 alt_priority_mask
02003640 g     F .text	0000009c alt_ic_irq_enable
02000f10 g     F .text	00000024 __vfprintf_internal
02001ff8 g     F .text	00000098 alt_epcs_flash_read
02014b64 g     O .rwdata	00000008 alt_alarm_list
02003464 g     F .text	0000005c _do_ctors
02003260 g     F .text	000000cc close
0200022c g     F .text	0000003c longDelay
02001254 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
02002f5c g     F .text	0000011c epcs_write_buffer



Disassembly of section .entry:

04009000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4009000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 4009004:	08406e14 	ori	at,at,440
    jmp r1
 4009008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)

02000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 20000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000100:	0005313a 	rdctl	r2,ipending
 2000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000114:	00800044 	movi	r2,1
 2000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200011c:	e0fffb17 	ldw	r3,-20(fp)
 2000120:	e0bffc17 	ldw	r2,-16(fp)
 2000124:	1884703a 	and	r2,r3,r2
 2000128:	10001726 	beq	r2,zero,2000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	00c08074 	movhi	r3,513
 2000130:	18d7fb04 	addi	r3,r3,24556
 2000134:	e0bffd17 	ldw	r2,-12(fp)
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	1885883a 	add	r2,r3,r2
 2000140:	10c00017 	ldw	r3,0(r2)
 2000144:	01008074 	movhi	r4,513
 2000148:	2117fb04 	addi	r4,r4,24556
 200014c:	e0bffd17 	ldw	r2,-12(fp)
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	2085883a 	add	r2,r4,r2
 2000158:	10800104 	addi	r2,r2,4
 200015c:	10800017 	ldw	r2,0(r2)
 2000160:	1009883a 	mov	r4,r2
 2000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200016c:	0005313a 	rdctl	r2,ipending
 2000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 200017c:	e0bffb17 	ldw	r2,-20(fp)
 2000180:	103fe31e 	bne	r2,zero,2000110 <__reset+0xfdff7110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 2000184:	00000706 	br	20001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000188:	e0bffc17 	ldw	r2,-16(fp)
 200018c:	1085883a 	add	r2,r2,r2
 2000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000194:	e0bffd17 	ldw	r2,-12(fp)
 2000198:	10800044 	addi	r2,r2,1
 200019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a0:	003fde06 	br	200011c <__reset+0xfdff711c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a4:	e037883a 	mov	sp,fp
 20001a8:	dfc00117 	ldw	ra,4(sp)
 20001ac:	df000017 	ldw	fp,0(sp)
 20001b0:	dec00204 	addi	sp,sp,8
 20001b4:	f800283a 	ret

Disassembly of section .text:

020001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001b8:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 20001c0:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 20001c4:	d6b2d414 	ori	gp,gp,52048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001c8:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 20001cc:	1097ed14 	ori	r2,r2,24500

    movhi r3, %hi(__bss_end)
 20001d0:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 20001d4:	18d85e14 	ori	r3,r3,24952

    beq r2, r3, 1f
 20001d8:	10c00326 	beq	r2,r3,20001e8 <_start+0x30>

0:
    stw zero, (r2)
 20001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001e4:	10fffd36 	bltu	r2,r3,20001dc <__reset+0xfdff71dc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001e8:	20012540 	call	2001254 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001ec:	20012d40 	call	20012d4 <alt_main>

020001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001f0:	003fff06 	br	20001f0 <__reset+0xfdff71f0>

020001f4 <delay>:
};

const int numBitmaps = 13;

void delay()
{
 20001f4:	defffe04 	addi	sp,sp,-8
 20001f8:	df000115 	stw	fp,4(sp)
 20001fc:	df000104 	addi	fp,sp,4
	int delay=0;
 2000200:	e03fff15 	stw	zero,-4(fp)
	while(delay < 1)
 2000204:	00000306 	br	2000214 <delay+0x20>
	{
	delay++;
 2000208:	e0bfff17 	ldw	r2,-4(fp)
 200020c:	10800044 	addi	r2,r2,1
 2000210:	e0bfff15 	stw	r2,-4(fp)
const int numBitmaps = 13;

void delay()
{
	int delay=0;
	while(delay < 1)
 2000214:	e0bfff17 	ldw	r2,-4(fp)
 2000218:	00bffb0e 	bge	zero,r2,2000208 <__reset+0xfdff7208>
	{
	delay++;
	}

}
 200021c:	e037883a 	mov	sp,fp
 2000220:	df000017 	ldw	fp,0(sp)
 2000224:	dec00104 	addi	sp,sp,4
 2000228:	f800283a 	ret

0200022c <longDelay>:

void longDelay()
{
 200022c:	defffe04 	addi	sp,sp,-8
 2000230:	df000115 	stw	fp,4(sp)
 2000234:	df000104 	addi	fp,sp,4
	int delay=0;
 2000238:	e03fff15 	stw	zero,-4(fp)
	while(delay < 3000)
 200023c:	00000306 	br	200024c <longDelay+0x20>
	{
	delay++;
 2000240:	e0bfff17 	ldw	r2,-4(fp)
 2000244:	10800044 	addi	r2,r2,1
 2000248:	e0bfff15 	stw	r2,-4(fp)
}

void longDelay()
{
	int delay=0;
	while(delay < 3000)
 200024c:	e0bfff17 	ldw	r2,-4(fp)
 2000250:	1082ee10 	cmplti	r2,r2,3000
 2000254:	103ffa1e 	bne	r2,zero,2000240 <__reset+0xfdff7240>
	{
	delay++;
	}

}
 2000258:	e037883a 	mov	sp,fp
 200025c:	df000017 	ldw	fp,0(sp)
 2000260:	dec00104 	addi	sp,sp,4
 2000264:	f800283a 	ret

02000268 <blank>:

void blank()
{
 2000268:	defffb04 	addi	sp,sp,-20
 200026c:	dfc00415 	stw	ra,16(sp)
 2000270:	df000315 	stw	fp,12(sp)
 2000274:	df000304 	addi	fp,sp,12
	int row;
	int col;

	  for(  row =0; row < 32; row++)
 2000278:	e03ffd15 	stw	zero,-12(fp)
 200027c:	00002806 	br	2000320 <blank+0xb8>
	  {
		  for( col=0; col < 32; col++)
 2000280:	e03ffe15 	stw	zero,-8(fp)
 2000284:	00002006 	br	2000308 <blank+0xa0>
		  {
			  int addr = 1024;
 2000288:	00810004 	movi	r2,1024
 200028c:	e0bfff15 	stw	r2,-4(fp)
			  addr+= 32*row;
 2000290:	e0bffd17 	ldw	r2,-12(fp)
 2000294:	1004917a 	slli	r2,r2,5
 2000298:	e0ffff17 	ldw	r3,-4(fp)
 200029c:	1885883a 	add	r2,r3,r2
 20002a0:	e0bfff15 	stw	r2,-4(fp)
			  addr+=col;
 20002a4:	e0ffff17 	ldw	r3,-4(fp)
 20002a8:	e0bffe17 	ldw	r2,-8(fp)
 20002ac:	1885883a 	add	r2,r3,r2
 20002b0:	e0bfff15 	stw	r2,-4(fp)


			  IOWR_ALTERA_AVALON_PIO_DATA(DISPLAY_BUFFER_ADDR_BASE, addr);
 20002b4:	00810074 	movhi	r2,1025
 20002b8:	10a81004 	addi	r2,r2,-24512
 20002bc:	e0ffff17 	ldw	r3,-4(fp)
 20002c0:	10c00035 	stwio	r3,0(r2)
			  IOWR_ALTERA_AVALON_PIO_DATA(DISPLAY_BUFFER_DATA_BASE, 0x00);
 20002c4:	0007883a 	mov	r3,zero
 20002c8:	00810074 	movhi	r2,1025
 20002cc:	10a80c04 	addi	r2,r2,-24528
 20002d0:	10c00035 	stwio	r3,0(r2)

			  delay();
 20002d4:	20001f40 	call	20001f4 <delay>
			  IOWR_ALTERA_AVALON_PIO_DATA(DISPLAY_BUFFER_CTRL_BASE, 0x01);
 20002d8:	00c00044 	movi	r3,1
 20002dc:	00810074 	movhi	r2,1025
 20002e0:	10a80804 	addi	r2,r2,-24544
 20002e4:	10c00035 	stwio	r3,0(r2)
			  delay();
 20002e8:	20001f40 	call	20001f4 <delay>
			  IOWR_ALTERA_AVALON_PIO_DATA(DISPLAY_BUFFER_CTRL_BASE, 0x00);
 20002ec:	0007883a 	mov	r3,zero
 20002f0:	00810074 	movhi	r2,1025
 20002f4:	10a80804 	addi	r2,r2,-24544
 20002f8:	10c00035 	stwio	r3,0(r2)
	int row;
	int col;

	  for(  row =0; row < 32; row++)
	  {
		  for( col=0; col < 32; col++)
 20002fc:	e0bffe17 	ldw	r2,-8(fp)
 2000300:	10800044 	addi	r2,r2,1
 2000304:	e0bffe15 	stw	r2,-8(fp)
 2000308:	e0bffe17 	ldw	r2,-8(fp)
 200030c:	10800810 	cmplti	r2,r2,32
 2000310:	103fdd1e 	bne	r2,zero,2000288 <__reset+0xfdff7288>
void blank()
{
	int row;
	int col;

	  for(  row =0; row < 32; row++)
 2000314:	e0bffd17 	ldw	r2,-12(fp)
 2000318:	10800044 	addi	r2,r2,1
 200031c:	e0bffd15 	stw	r2,-12(fp)
 2000320:	e0bffd17 	ldw	r2,-12(fp)
 2000324:	10800810 	cmplti	r2,r2,32
 2000328:	103fd51e 	bne	r2,zero,2000280 <__reset+0xfdff7280>
			  delay();
			  IOWR_ALTERA_AVALON_PIO_DATA(DISPLAY_BUFFER_CTRL_BASE, 0x00);
		  }
	  }

}
 200032c:	e037883a 	mov	sp,fp
 2000330:	dfc00117 	ldw	ra,4(sp)
 2000334:	df000017 	ldw	fp,0(sp)
 2000338:	dec00204 	addi	sp,sp,8
 200033c:	f800283a 	ret

02000340 <my_alarm_callback>:


int my_alarm_callback (const void* context)
{
 2000340:	defffd04 	addi	sp,sp,-12
 2000344:	dfc00215 	stw	ra,8(sp)
 2000348:	df000115 	stw	fp,4(sp)
 200034c:	df000104 	addi	fp,sp,4
 2000350:	e13fff15 	stw	r4,-4(fp)
/* This function is called once per second */
	static int i = 0;

	displayBitmap(bitmapPtrs[i]);
 2000354:	d0a51917 	ldw	r2,-27548(gp)
 2000358:	00c08074 	movhi	r3,513
 200035c:	18cddb04 	addi	r3,r3,14188
 2000360:	1085883a 	add	r2,r2,r2
 2000364:	1085883a 	add	r2,r2,r2
 2000368:	1885883a 	add	r2,r3,r2
 200036c:	10800017 	ldw	r2,0(r2)
 2000370:	1009883a 	mov	r4,r2
 2000374:	20003ac0 	call	20003ac <displayBitmap>


	i = (i + 1) % numBitmaps;
 2000378:	d0a51917 	ldw	r2,-27548(gp)
 200037c:	10c00044 	addi	r3,r2,1
 2000380:	d0a00217 	ldw	r2,-32760(gp)
 2000384:	1809883a 	mov	r4,r3
 2000388:	100b883a 	mov	r5,r2
 200038c:	200062c0 	call	200062c <__modsi3>
 2000390:	d0a51915 	stw	r2,-27548(gp)

	return 1000;
 2000394:	0080fa04 	movi	r2,1000

}
 2000398:	e037883a 	mov	sp,fp
 200039c:	dfc00117 	ldw	ra,4(sp)
 20003a0:	df000017 	ldw	fp,0(sp)
 20003a4:	dec00204 	addi	sp,sp,8
 20003a8:	f800283a 	ret

020003ac <displayBitmap>:

void displayBitmap(unsigned int* bitmap)
{
 20003ac:	defff804 	addi	sp,sp,-32
 20003b0:	dfc00715 	stw	ra,28(sp)
 20003b4:	df000615 	stw	fp,24(sp)
 20003b8:	df000604 	addi	fp,sp,24
 20003bc:	e13fff15 	stw	r4,-4(fp)
	int i;

	  for(  i =0; i < 1024; i++)
 20003c0:	e03ffa15 	stw	zero,-24(fp)
 20003c4:	00004006 	br	20004c8 <displayBitmap+0x11c>
	  {
			  int addr = 1024 + i;
 20003c8:	e0bffa17 	ldw	r2,-24(fp)
 20003cc:	10810004 	addi	r2,r2,1024
 20003d0:	e0bffb15 	stw	r2,-20(fp)

			  unsigned int pixel = bitmap[i] ;
 20003d4:	e0bffa17 	ldw	r2,-24(fp)
 20003d8:	1085883a 	add	r2,r2,r2
 20003dc:	1085883a 	add	r2,r2,r2
 20003e0:	e0ffff17 	ldw	r3,-4(fp)
 20003e4:	1885883a 	add	r2,r3,r2
 20003e8:	10800017 	ldw	r2,0(r2)
 20003ec:	e0bffc15 	stw	r2,-16(fp)

			  unsigned char b8 = cie1931[(pixel >> 16) & 0xFF];
 20003f0:	e0bffc17 	ldw	r2,-16(fp)
 20003f4:	1004d43a 	srli	r2,r2,16
 20003f8:	10803fcc 	andi	r2,r2,255
 20003fc:	00c08034 	movhi	r3,512
 2000400:	18d18204 	addi	r3,r3,17928
 2000404:	1885883a 	add	r2,r3,r2
 2000408:	10800003 	ldbu	r2,0(r2)
 200040c:	e0bffd05 	stb	r2,-12(fp)
			  unsigned char g8 = cie1931[(pixel >> 8) & 0xFF];
 2000410:	e0bffc17 	ldw	r2,-16(fp)
 2000414:	1004d23a 	srli	r2,r2,8
 2000418:	10803fcc 	andi	r2,r2,255
 200041c:	00c08034 	movhi	r3,512
 2000420:	18d18204 	addi	r3,r3,17928
 2000424:	1885883a 	add	r2,r3,r2
 2000428:	10800003 	ldbu	r2,0(r2)
 200042c:	e0bffd45 	stb	r2,-11(fp)
			  unsigned char r8 = cie1931[(pixel) & 0xFF];
 2000430:	e0bffc17 	ldw	r2,-16(fp)
 2000434:	10803fcc 	andi	r2,r2,255
 2000438:	00c08034 	movhi	r3,512
 200043c:	18d18204 	addi	r3,r3,17928
 2000440:	1885883a 	add	r2,r3,r2
 2000444:	10800003 	ldbu	r2,0(r2)
 2000448:	e0bffd85 	stb	r2,-10(fp)




//			  unsigned short rgb = ((r << 8) & 0x0F00) | ((g << 4) & 0x00F0) | (b & 0x000F);
			  unsigned int rgb = ((r8 << 16) & 0xFF0000) | ((g8 << 8) & 0x00FF00) | (b8 & 0x0000FF);
 200044c:	e0bffd83 	ldbu	r2,-10(fp)
 2000450:	1004943a 	slli	r2,r2,16
 2000454:	10c03fec 	andhi	r3,r2,255
 2000458:	e0bffd43 	ldbu	r2,-11(fp)
 200045c:	1004923a 	slli	r2,r2,8
 2000460:	10bfffcc 	andi	r2,r2,65535
 2000464:	1886b03a 	or	r3,r3,r2
 2000468:	e0bffd03 	ldbu	r2,-12(fp)
 200046c:	1884b03a 	or	r2,r3,r2
 2000470:	e0bffe15 	stw	r2,-8(fp)

			  IOWR_ALTERA_AVALON_PIO_DATA(DISPLAY_BUFFER_ADDR_BASE, addr);
 2000474:	00810074 	movhi	r2,1025
 2000478:	10a81004 	addi	r2,r2,-24512
 200047c:	e0fffb17 	ldw	r3,-20(fp)
 2000480:	10c00035 	stwio	r3,0(r2)

			  IOWR_ALTERA_AVALON_PIO_DATA(DISPLAY_BUFFER_DATA_BASE, rgb);
 2000484:	e0fffe17 	ldw	r3,-8(fp)
 2000488:	00810074 	movhi	r2,1025
 200048c:	10a80c04 	addi	r2,r2,-24528
 2000490:	10c00035 	stwio	r3,0(r2)

			  delay();
 2000494:	20001f40 	call	20001f4 <delay>
			  IOWR_ALTERA_AVALON_PIO_DATA(DISPLAY_BUFFER_CTRL_BASE, 0x01);
 2000498:	00c00044 	movi	r3,1
 200049c:	00810074 	movhi	r2,1025
 20004a0:	10a80804 	addi	r2,r2,-24544
 20004a4:	10c00035 	stwio	r3,0(r2)
			  delay();
 20004a8:	20001f40 	call	20001f4 <delay>
			  IOWR_ALTERA_AVALON_PIO_DATA(DISPLAY_BUFFER_CTRL_BASE, 0x00);
 20004ac:	0007883a 	mov	r3,zero
 20004b0:	00810074 	movhi	r2,1025
 20004b4:	10a80804 	addi	r2,r2,-24544
 20004b8:	10c00035 	stwio	r3,0(r2)

void displayBitmap(unsigned int* bitmap)
{
	int i;

	  for(  i =0; i < 1024; i++)
 20004bc:	e0bffa17 	ldw	r2,-24(fp)
 20004c0:	10800044 	addi	r2,r2,1
 20004c4:	e0bffa15 	stw	r2,-24(fp)
 20004c8:	e0bffa17 	ldw	r2,-24(fp)
 20004cc:	10810010 	cmplti	r2,r2,1024
 20004d0:	103fbd1e 	bne	r2,zero,20003c8 <__reset+0xfdff73c8>
			  IOWR_ALTERA_AVALON_PIO_DATA(DISPLAY_BUFFER_CTRL_BASE, 0x01);
			  delay();
			  IOWR_ALTERA_AVALON_PIO_DATA(DISPLAY_BUFFER_CTRL_BASE, 0x00);

	  }
}
 20004d4:	e037883a 	mov	sp,fp
 20004d8:	dfc00117 	ldw	ra,4(sp)
 20004dc:	df000017 	ldw	fp,0(sp)
 20004e0:	dec00204 	addi	sp,sp,8
 20004e4:	f800283a 	ret

020004e8 <main>:

int main()
{
 20004e8:	defffe04 	addi	sp,sp,-8
 20004ec:	dfc00115 	stw	ra,4(sp)
 20004f0:	df000015 	stw	fp,0(sp)
 20004f4:	d839883a 	mov	fp,sp

  printf("Hello from Nios II!\n");
 20004f8:	01008074 	movhi	r4,513
 20004fc:	210dc204 	addi	r4,r4,14088
 2000500:	20007a00 	call	20007a0 <puts>
  longDelay();
 2000504:	200022c0 	call	200022c <longDelay>

  IOWR_ALTERA_AVALON_PIO_DATA(DISPLAY_BUFFER_CTRL_BASE, 0x00);
 2000508:	0007883a 	mov	r3,zero
 200050c:	00810074 	movhi	r2,1025
 2000510:	10a80804 	addi	r2,r2,-24544
 2000514:	10c00035 	stwio	r3,0(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2000518:	00808074 	movhi	r2,513
 200051c:	1097f204 	addi	r2,r2,24520
 2000520:	10800017 	ldw	r2,0(r2)

  printf("%d", alt_ticks_per_second());
 2000524:	01008074 	movhi	r4,513
 2000528:	210dc704 	addi	r4,r4,14108
 200052c:	100b883a 	mov	r5,r2
 2000530:	20006d40 	call	20006d4 <printf>

  alt_alarm_start (&alarm,
 2000534:	01008074 	movhi	r4,513
 2000538:	2117f504 	addi	r4,r4,24532
 200053c:	0140fa04 	movi	r5,1000
 2000540:	01808034 	movhi	r6,512
 2000544:	3180d004 	addi	r6,r6,832
 2000548:	000f883a 	mov	r7,zero
 200054c:	20010a80 	call	20010a8 <alt_alarm_start>
		  1000,
		  my_alarm_callback,
		  NULL);


  return 0;
 2000550:	0005883a 	mov	r2,zero
}
 2000554:	e037883a 	mov	sp,fp
 2000558:	dfc00117 	ldw	ra,4(sp)
 200055c:	df000017 	ldw	fp,0(sp)
 2000560:	dec00204 	addi	sp,sp,8
 2000564:	f800283a 	ret

02000568 <udivmodsi4>:
 2000568:	2005883a 	mov	r2,r4
 200056c:	2900182e 	bgeu	r5,r4,20005d0 <udivmodsi4+0x68>
 2000570:	28001716 	blt	r5,zero,20005d0 <udivmodsi4+0x68>
 2000574:	01000804 	movi	r4,32
 2000578:	00c00044 	movi	r3,1
 200057c:	00000206 	br	2000588 <udivmodsi4+0x20>
 2000580:	20001126 	beq	r4,zero,20005c8 <udivmodsi4+0x60>
 2000584:	28000516 	blt	r5,zero,200059c <udivmodsi4+0x34>
 2000588:	294b883a 	add	r5,r5,r5
 200058c:	213fffc4 	addi	r4,r4,-1
 2000590:	18c7883a 	add	r3,r3,r3
 2000594:	28bffa36 	bltu	r5,r2,2000580 <__reset+0xfdff7580>
 2000598:	18000b26 	beq	r3,zero,20005c8 <udivmodsi4+0x60>
 200059c:	0009883a 	mov	r4,zero
 20005a0:	11400236 	bltu	r2,r5,20005ac <udivmodsi4+0x44>
 20005a4:	1145c83a 	sub	r2,r2,r5
 20005a8:	20c8b03a 	or	r4,r4,r3
 20005ac:	1806d07a 	srli	r3,r3,1
 20005b0:	280ad07a 	srli	r5,r5,1
 20005b4:	183ffa1e 	bne	r3,zero,20005a0 <__reset+0xfdff75a0>
 20005b8:	3000021e 	bne	r6,zero,20005c4 <udivmodsi4+0x5c>
 20005bc:	2005883a 	mov	r2,r4
 20005c0:	f800283a 	ret
 20005c4:	f800283a 	ret
 20005c8:	0009883a 	mov	r4,zero
 20005cc:	003ffa06 	br	20005b8 <__reset+0xfdff75b8>
 20005d0:	00c00044 	movi	r3,1
 20005d4:	0009883a 	mov	r4,zero
 20005d8:	003ff106 	br	20005a0 <__reset+0xfdff75a0>

020005dc <__divsi3>:
 20005dc:	defffe04 	addi	sp,sp,-8
 20005e0:	dfc00115 	stw	ra,4(sp)
 20005e4:	dc000015 	stw	r16,0(sp)
 20005e8:	20000a16 	blt	r4,zero,2000614 <__divsi3+0x38>
 20005ec:	0021883a 	mov	r16,zero
 20005f0:	28000b16 	blt	r5,zero,2000620 <__divsi3+0x44>
 20005f4:	000d883a 	mov	r6,zero
 20005f8:	20005680 	call	2000568 <udivmodsi4>
 20005fc:	80000126 	beq	r16,zero,2000604 <__divsi3+0x28>
 2000600:	0085c83a 	sub	r2,zero,r2
 2000604:	dfc00117 	ldw	ra,4(sp)
 2000608:	dc000017 	ldw	r16,0(sp)
 200060c:	dec00204 	addi	sp,sp,8
 2000610:	f800283a 	ret
 2000614:	0109c83a 	sub	r4,zero,r4
 2000618:	04000044 	movi	r16,1
 200061c:	283ff50e 	bge	r5,zero,20005f4 <__reset+0xfdff75f4>
 2000620:	014bc83a 	sub	r5,zero,r5
 2000624:	8400005c 	xori	r16,r16,1
 2000628:	003ff206 	br	20005f4 <__reset+0xfdff75f4>

0200062c <__modsi3>:
 200062c:	deffff04 	addi	sp,sp,-4
 2000630:	dfc00015 	stw	ra,0(sp)
 2000634:	20000516 	blt	r4,zero,200064c <__modsi3+0x20>
 2000638:	28000c16 	blt	r5,zero,200066c <__modsi3+0x40>
 200063c:	01800044 	movi	r6,1
 2000640:	dfc00017 	ldw	ra,0(sp)
 2000644:	dec00104 	addi	sp,sp,4
 2000648:	20005681 	jmpi	2000568 <udivmodsi4>
 200064c:	0109c83a 	sub	r4,zero,r4
 2000650:	28000b16 	blt	r5,zero,2000680 <__modsi3+0x54>
 2000654:	01800044 	movi	r6,1
 2000658:	20005680 	call	2000568 <udivmodsi4>
 200065c:	0085c83a 	sub	r2,zero,r2
 2000660:	dfc00017 	ldw	ra,0(sp)
 2000664:	dec00104 	addi	sp,sp,4
 2000668:	f800283a 	ret
 200066c:	014bc83a 	sub	r5,zero,r5
 2000670:	01800044 	movi	r6,1
 2000674:	dfc00017 	ldw	ra,0(sp)
 2000678:	dec00104 	addi	sp,sp,4
 200067c:	20005681 	jmpi	2000568 <udivmodsi4>
 2000680:	014bc83a 	sub	r5,zero,r5
 2000684:	003ff306 	br	2000654 <__reset+0xfdff7654>

02000688 <__udivsi3>:
 2000688:	000d883a 	mov	r6,zero
 200068c:	20005681 	jmpi	2000568 <udivmodsi4>

02000690 <__umodsi3>:
 2000690:	01800044 	movi	r6,1
 2000694:	20005681 	jmpi	2000568 <udivmodsi4>

02000698 <_printf_r>:
 2000698:	defffd04 	addi	sp,sp,-12
 200069c:	dfc00015 	stw	ra,0(sp)
 20006a0:	d9800115 	stw	r6,4(sp)
 20006a4:	d9c00215 	stw	r7,8(sp)
 20006a8:	20800217 	ldw	r2,8(r4)
 20006ac:	00c08034 	movhi	r3,512
 20006b0:	18c3cd04 	addi	r3,r3,3892
 20006b4:	280d883a 	mov	r6,r5
 20006b8:	10c00115 	stw	r3,4(r2)
 20006bc:	100b883a 	mov	r5,r2
 20006c0:	d9c00104 	addi	r7,sp,4
 20006c4:	20007dc0 	call	20007dc <___vfprintf_internal_r>
 20006c8:	dfc00017 	ldw	ra,0(sp)
 20006cc:	dec00304 	addi	sp,sp,12
 20006d0:	f800283a 	ret

020006d4 <printf>:
 20006d4:	defffc04 	addi	sp,sp,-16
 20006d8:	dfc00015 	stw	ra,0(sp)
 20006dc:	d9400115 	stw	r5,4(sp)
 20006e0:	d9800215 	stw	r6,8(sp)
 20006e4:	d9c00315 	stw	r7,12(sp)
 20006e8:	00808074 	movhi	r2,513
 20006ec:	1092d804 	addi	r2,r2,19296
 20006f0:	10800017 	ldw	r2,0(r2)
 20006f4:	00c08034 	movhi	r3,512
 20006f8:	18c3cd04 	addi	r3,r3,3892
 20006fc:	200b883a 	mov	r5,r4
 2000700:	10800217 	ldw	r2,8(r2)
 2000704:	d9800104 	addi	r6,sp,4
 2000708:	10c00115 	stw	r3,4(r2)
 200070c:	1009883a 	mov	r4,r2
 2000710:	2000f100 	call	2000f10 <__vfprintf_internal>
 2000714:	dfc00017 	ldw	ra,0(sp)
 2000718:	dec00404 	addi	sp,sp,16
 200071c:	f800283a 	ret

02000720 <_puts_r>:
 2000720:	defffd04 	addi	sp,sp,-12
 2000724:	dc000015 	stw	r16,0(sp)
 2000728:	2021883a 	mov	r16,r4
 200072c:	2809883a 	mov	r4,r5
 2000730:	dfc00215 	stw	ra,8(sp)
 2000734:	dc400115 	stw	r17,4(sp)
 2000738:	2823883a 	mov	r17,r5
 200073c:	20007b40 	call	20007b4 <strlen>
 2000740:	81400217 	ldw	r5,8(r16)
 2000744:	00c08034 	movhi	r3,512
 2000748:	18c3cd04 	addi	r3,r3,3892
 200074c:	880d883a 	mov	r6,r17
 2000750:	8009883a 	mov	r4,r16
 2000754:	28c00115 	stw	r3,4(r5)
 2000758:	100f883a 	mov	r7,r2
 200075c:	183ee83a 	callr	r3
 2000760:	047fffc4 	movi	r17,-1
 2000764:	14400926 	beq	r2,r17,200078c <_puts_r+0x6c>
 2000768:	81400217 	ldw	r5,8(r16)
 200076c:	8009883a 	mov	r4,r16
 2000770:	01808074 	movhi	r6,513
 2000774:	318dc804 	addi	r6,r6,14112
 2000778:	28800117 	ldw	r2,4(r5)
 200077c:	01c00044 	movi	r7,1
 2000780:	103ee83a 	callr	r2
 2000784:	14400126 	beq	r2,r17,200078c <_puts_r+0x6c>
 2000788:	0005883a 	mov	r2,zero
 200078c:	dfc00217 	ldw	ra,8(sp)
 2000790:	dc400117 	ldw	r17,4(sp)
 2000794:	dc000017 	ldw	r16,0(sp)
 2000798:	dec00304 	addi	sp,sp,12
 200079c:	f800283a 	ret

020007a0 <puts>:
 20007a0:	00808074 	movhi	r2,513
 20007a4:	1092d804 	addi	r2,r2,19296
 20007a8:	200b883a 	mov	r5,r4
 20007ac:	11000017 	ldw	r4,0(r2)
 20007b0:	20007201 	jmpi	2000720 <_puts_r>

020007b4 <strlen>:
 20007b4:	20800007 	ldb	r2,0(r4)
 20007b8:	10000626 	beq	r2,zero,20007d4 <strlen+0x20>
 20007bc:	2005883a 	mov	r2,r4
 20007c0:	10800044 	addi	r2,r2,1
 20007c4:	10c00007 	ldb	r3,0(r2)
 20007c8:	183ffd1e 	bne	r3,zero,20007c0 <__reset+0xfdff77c0>
 20007cc:	1105c83a 	sub	r2,r2,r4
 20007d0:	f800283a 	ret
 20007d4:	0005883a 	mov	r2,zero
 20007d8:	f800283a 	ret

020007dc <___vfprintf_internal_r>:
 20007dc:	deffe004 	addi	sp,sp,-128
 20007e0:	d8c00804 	addi	r3,sp,32
 20007e4:	ddc01d15 	stw	r23,116(sp)
 20007e8:	dd401b15 	stw	r21,108(sp)
 20007ec:	dd001a15 	stw	r20,104(sp)
 20007f0:	dcc01915 	stw	r19,100(sp)
 20007f4:	dc801815 	stw	r18,96(sp)
 20007f8:	dc001615 	stw	r16,88(sp)
 20007fc:	dfc01f15 	stw	ra,124(sp)
 2000800:	df001e15 	stw	fp,120(sp)
 2000804:	dd801c15 	stw	r22,112(sp)
 2000808:	dc401715 	stw	r17,92(sp)
 200080c:	d9000f15 	stw	r4,60(sp)
 2000810:	d9c00e15 	stw	r7,56(sp)
 2000814:	3021883a 	mov	r16,r6
 2000818:	0025883a 	mov	r18,zero
 200081c:	d8001415 	stw	zero,80(sp)
 2000820:	d8000d15 	stw	zero,52(sp)
 2000824:	0029883a 	mov	r20,zero
 2000828:	d8000b15 	stw	zero,44(sp)
 200082c:	d8000c15 	stw	zero,48(sp)
 2000830:	d8001315 	stw	zero,76(sp)
 2000834:	d8001015 	stw	zero,64(sp)
 2000838:	002b883a 	mov	r21,zero
 200083c:	04c00044 	movi	r19,1
 2000840:	d8c00a15 	stw	r3,40(sp)
 2000844:	282f883a 	mov	r23,r5
 2000848:	80c00003 	ldbu	r3,0(r16)
 200084c:	84000044 	addi	r16,r16,1
 2000850:	18803fcc 	andi	r2,r3,255
 2000854:	1080201c 	xori	r2,r2,128
 2000858:	10bfe004 	addi	r2,r2,-128
 200085c:	10001426 	beq	r2,zero,20008b0 <___vfprintf_internal_r+0xd4>
 2000860:	acc03026 	beq	r21,r19,2000924 <___vfprintf_internal_r+0x148>
 2000864:	9d401f16 	blt	r19,r21,20008e4 <___vfprintf_internal_r+0x108>
 2000868:	a83ff71e 	bne	r21,zero,2000848 <__reset+0xfdff7848>
 200086c:	01000944 	movi	r4,37
 2000870:	1100d926 	beq	r2,r4,2000bd8 <___vfprintf_internal_r+0x3fc>
 2000874:	b8800117 	ldw	r2,4(r23)
 2000878:	d9000f17 	ldw	r4,60(sp)
 200087c:	d8c00905 	stb	r3,36(sp)
 2000880:	b80b883a 	mov	r5,r23
 2000884:	d9800904 	addi	r6,sp,36
 2000888:	01c00044 	movi	r7,1
 200088c:	103ee83a 	callr	r2
 2000890:	1000a31e 	bne	r2,zero,2000b20 <___vfprintf_internal_r+0x344>
 2000894:	80c00003 	ldbu	r3,0(r16)
 2000898:	94800044 	addi	r18,r18,1
 200089c:	84000044 	addi	r16,r16,1
 20008a0:	18803fcc 	andi	r2,r3,255
 20008a4:	1080201c 	xori	r2,r2,128
 20008a8:	10bfe004 	addi	r2,r2,-128
 20008ac:	103fec1e 	bne	r2,zero,2000860 <__reset+0xfdff7860>
 20008b0:	9005883a 	mov	r2,r18
 20008b4:	dfc01f17 	ldw	ra,124(sp)
 20008b8:	df001e17 	ldw	fp,120(sp)
 20008bc:	ddc01d17 	ldw	r23,116(sp)
 20008c0:	dd801c17 	ldw	r22,112(sp)
 20008c4:	dd401b17 	ldw	r21,108(sp)
 20008c8:	dd001a17 	ldw	r20,104(sp)
 20008cc:	dcc01917 	ldw	r19,100(sp)
 20008d0:	dc801817 	ldw	r18,96(sp)
 20008d4:	dc401717 	ldw	r17,92(sp)
 20008d8:	dc001617 	ldw	r16,88(sp)
 20008dc:	dec02004 	addi	sp,sp,128
 20008e0:	f800283a 	ret
 20008e4:	01000084 	movi	r4,2
 20008e8:	a9001226 	beq	r21,r4,2000934 <___vfprintf_internal_r+0x158>
 20008ec:	010000c4 	movi	r4,3
 20008f0:	a93fd51e 	bne	r21,r4,2000848 <__reset+0xfdff7848>
 20008f4:	1c7ff404 	addi	r17,r3,-48
 20008f8:	8c403fcc 	andi	r17,r17,255
 20008fc:	01000244 	movi	r4,9
 2000900:	24401b36 	bltu	r4,r17,2000970 <___vfprintf_internal_r+0x194>
 2000904:	d9000b17 	ldw	r4,44(sp)
 2000908:	00bfffc4 	movi	r2,-1
 200090c:	2080ea26 	beq	r4,r2,2000cb8 <___vfprintf_internal_r+0x4dc>
 2000910:	01400284 	movi	r5,10
 2000914:	20010800 	call	2001080 <__mulsi3>
 2000918:	88a3883a 	add	r17,r17,r2
 200091c:	dc400b15 	stw	r17,44(sp)
 2000920:	003fc906 	br	2000848 <__reset+0xfdff7848>
 2000924:	01000c04 	movi	r4,48
 2000928:	1100de26 	beq	r2,r4,2000ca4 <___vfprintf_internal_r+0x4c8>
 200092c:	01000944 	movi	r4,37
 2000930:	1100fd26 	beq	r2,r4,2000d28 <___vfprintf_internal_r+0x54c>
 2000934:	1c7ff404 	addi	r17,r3,-48
 2000938:	8c403fcc 	andi	r17,r17,255
 200093c:	01000244 	movi	r4,9
 2000940:	24400936 	bltu	r4,r17,2000968 <___vfprintf_internal_r+0x18c>
 2000944:	d9000c17 	ldw	r4,48(sp)
 2000948:	00bfffc4 	movi	r2,-1
 200094c:	2080d826 	beq	r4,r2,2000cb0 <___vfprintf_internal_r+0x4d4>
 2000950:	01400284 	movi	r5,10
 2000954:	20010800 	call	2001080 <__mulsi3>
 2000958:	88a3883a 	add	r17,r17,r2
 200095c:	dc400c15 	stw	r17,48(sp)
 2000960:	05400084 	movi	r21,2
 2000964:	003fb806 	br	2000848 <__reset+0xfdff7848>
 2000968:	01000b84 	movi	r4,46
 200096c:	1100a726 	beq	r2,r4,2000c0c <___vfprintf_internal_r+0x430>
 2000970:	01401b04 	movi	r5,108
 2000974:	1140a326 	beq	r2,r5,2000c04 <___vfprintf_internal_r+0x428>
 2000978:	d9000b17 	ldw	r4,44(sp)
 200097c:	00bfffc4 	movi	r2,-1
 2000980:	2080e626 	beq	r4,r2,2000d1c <___vfprintf_internal_r+0x540>
 2000984:	d8001015 	stw	zero,64(sp)
 2000988:	18ffea04 	addi	r3,r3,-88
 200098c:	18c03fcc 	andi	r3,r3,255
 2000990:	00800804 	movi	r2,32
 2000994:	10c0022e 	bgeu	r2,r3,20009a0 <___vfprintf_internal_r+0x1c4>
 2000998:	002b883a 	mov	r21,zero
 200099c:	003faa06 	br	2000848 <__reset+0xfdff7848>
 20009a0:	18c7883a 	add	r3,r3,r3
 20009a4:	18c7883a 	add	r3,r3,r3
 20009a8:	01408034 	movhi	r5,512
 20009ac:	29426f04 	addi	r5,r5,2492
 20009b0:	1947883a 	add	r3,r3,r5
 20009b4:	18800017 	ldw	r2,0(r3)
 20009b8:	1000683a 	jmp	r2
 20009bc:	02000d54 	movui	r8,53
 20009c0:	02000998 	cmpnei	r8,zero,38
 20009c4:	02000998 	cmpnei	r8,zero,38
 20009c8:	02000998 	cmpnei	r8,zero,38
 20009cc:	02000998 	cmpnei	r8,zero,38
 20009d0:	02000998 	cmpnei	r8,zero,38
 20009d4:	02000998 	cmpnei	r8,zero,38
 20009d8:	02000998 	cmpnei	r8,zero,38
 20009dc:	02000998 	cmpnei	r8,zero,38
 20009e0:	02000998 	cmpnei	r8,zero,38
 20009e4:	02000998 	cmpnei	r8,zero,38
 20009e8:	02000d64 	muli	r8,zero,53
 20009ec:	02000a40 	call	2000a4 <__alt_mem_sdram_controller-0x1dfff5c>
 20009f0:	02000998 	cmpnei	r8,zero,38
 20009f4:	02000998 	cmpnei	r8,zero,38
 20009f8:	02000998 	cmpnei	r8,zero,38
 20009fc:	02000998 	cmpnei	r8,zero,38
 2000a00:	02000a40 	call	2000a4 <__alt_mem_sdram_controller-0x1dfff5c>
 2000a04:	02000998 	cmpnei	r8,zero,38
 2000a08:	02000998 	cmpnei	r8,zero,38
 2000a0c:	02000998 	cmpnei	r8,zero,38
 2000a10:	02000998 	cmpnei	r8,zero,38
 2000a14:	02000998 	cmpnei	r8,zero,38
 2000a18:	02000b28 	cmpgeui	r8,zero,44
 2000a1c:	02000998 	cmpnei	r8,zero,38
 2000a20:	02000998 	cmpnei	r8,zero,38
 2000a24:	02000998 	cmpnei	r8,zero,38
 2000a28:	02000db0 	cmpltui	r8,zero,54
 2000a2c:	02000998 	cmpnei	r8,zero,38
 2000a30:	02000b2c 	andhi	r8,zero,44
 2000a34:	02000998 	cmpnei	r8,zero,38
 2000a38:	02000998 	cmpnei	r8,zero,38
 2000a3c:	02000d5c 	xori	r8,zero,53
 2000a40:	d8c00d17 	ldw	r3,52(sp)
 2000a44:	18003926 	beq	r3,zero,2000b2c <___vfprintf_internal_r+0x350>
 2000a48:	d9000e17 	ldw	r4,56(sp)
 2000a4c:	00c00044 	movi	r3,1
 2000a50:	25400017 	ldw	r21,0(r4)
 2000a54:	21000104 	addi	r4,r4,4
 2000a58:	d9000e15 	stw	r4,56(sp)
 2000a5c:	d8c00d15 	stw	r3,52(sp)
 2000a60:	a8012116 	blt	r21,zero,2000ee8 <___vfprintf_internal_r+0x70c>
 2000a64:	d8001215 	stw	zero,72(sp)
 2000a68:	d823883a 	mov	r17,sp
 2000a6c:	a800371e 	bne	r21,zero,2000b4c <___vfprintf_internal_r+0x370>
 2000a70:	d9400b17 	ldw	r5,44(sp)
 2000a74:	d809883a 	mov	r4,sp
 2000a78:	01400b0e 	bge	zero,r5,2000aa8 <___vfprintf_internal_r+0x2cc>
 2000a7c:	d8800b17 	ldw	r2,44(sp)
 2000a80:	d823883a 	mov	r17,sp
 2000a84:	00c00c04 	movi	r3,48
 2000a88:	00000206 	br	2000a94 <___vfprintf_internal_r+0x2b8>
 2000a8c:	d9400a17 	ldw	r5,40(sp)
 2000a90:	89400426 	beq	r17,r5,2000aa4 <___vfprintf_internal_r+0x2c8>
 2000a94:	88c00005 	stb	r3,0(r17)
 2000a98:	10bfffc4 	addi	r2,r2,-1
 2000a9c:	8c400044 	addi	r17,r17,1
 2000aa0:	103ffa1e 	bne	r2,zero,2000a8c <__reset+0xfdff7a8c>
 2000aa4:	892bc83a 	sub	r21,r17,r4
 2000aa8:	d8c01217 	ldw	r3,72(sp)
 2000aac:	d9000c17 	ldw	r4,48(sp)
 2000ab0:	a8c5883a 	add	r2,r21,r3
 2000ab4:	d8c01017 	ldw	r3,64(sp)
 2000ab8:	2085c83a 	sub	r2,r4,r2
 2000abc:	d8801115 	stw	r2,68(sp)
 2000ac0:	18007f26 	beq	r3,zero,2000cc0 <___vfprintf_internal_r+0x4e4>
 2000ac4:	d8c01217 	ldw	r3,72(sp)
 2000ac8:	1800fa1e 	bne	r3,zero,2000eb4 <___vfprintf_internal_r+0x6d8>
 2000acc:	d8c01117 	ldw	r3,68(sp)
 2000ad0:	00c0620e 	bge	zero,r3,2000c5c <___vfprintf_internal_r+0x480>
 2000ad4:	00800c04 	movi	r2,48
 2000ad8:	d88008c5 	stb	r2,35(sp)
 2000adc:	b805883a 	mov	r2,r23
 2000ae0:	dc001215 	stw	r16,72(sp)
 2000ae4:	882f883a 	mov	r23,r17
 2000ae8:	1f3fffc4 	addi	fp,r3,-1
 2000aec:	05bfffc4 	movi	r22,-1
 2000af0:	dc000f17 	ldw	r16,60(sp)
 2000af4:	1023883a 	mov	r17,r2
 2000af8:	00000206 	br	2000b04 <___vfprintf_internal_r+0x328>
 2000afc:	e73fffc4 	addi	fp,fp,-1
 2000b00:	e580fc26 	beq	fp,r22,2000ef4 <___vfprintf_internal_r+0x718>
 2000b04:	88800117 	ldw	r2,4(r17)
 2000b08:	8009883a 	mov	r4,r16
 2000b0c:	880b883a 	mov	r5,r17
 2000b10:	d98008c4 	addi	r6,sp,35
 2000b14:	01c00044 	movi	r7,1
 2000b18:	103ee83a 	callr	r2
 2000b1c:	103ff726 	beq	r2,zero,2000afc <__reset+0xfdff7afc>
 2000b20:	04bfffc4 	movi	r18,-1
 2000b24:	003f6206 	br	20008b0 <__reset+0xfdff78b0>
 2000b28:	05000204 	movi	r20,8
 2000b2c:	d9400e17 	ldw	r5,56(sp)
 2000b30:	2d400017 	ldw	r21,0(r5)
 2000b34:	29400104 	addi	r5,r5,4
 2000b38:	d9400e15 	stw	r5,56(sp)
 2000b3c:	d8000d15 	stw	zero,52(sp)
 2000b40:	d8001215 	stw	zero,72(sp)
 2000b44:	d823883a 	mov	r17,sp
 2000b48:	a83fc926 	beq	r21,zero,2000a70 <__reset+0xfdff7a70>
 2000b4c:	05800244 	movi	r22,9
 2000b50:	dc001115 	stw	r16,68(sp)
 2000b54:	df001417 	ldw	fp,80(sp)
 2000b58:	00000506 	br	2000b70 <___vfprintf_internal_r+0x394>
 2000b5c:	15400c04 	addi	r21,r2,48
 2000b60:	8d400005 	stb	r21,0(r17)
 2000b64:	802b883a 	mov	r21,r16
 2000b68:	8c400044 	addi	r17,r17,1
 2000b6c:	80000f26 	beq	r16,zero,2000bac <___vfprintf_internal_r+0x3d0>
 2000b70:	a809883a 	mov	r4,r21
 2000b74:	a00b883a 	mov	r5,r20
 2000b78:	20006880 	call	2000688 <__udivsi3>
 2000b7c:	a009883a 	mov	r4,r20
 2000b80:	100b883a 	mov	r5,r2
 2000b84:	1021883a 	mov	r16,r2
 2000b88:	20010800 	call	2001080 <__mulsi3>
 2000b8c:	a885c83a 	sub	r2,r21,r2
 2000b90:	b0bff20e 	bge	r22,r2,2000b5c <__reset+0xfdff7b5c>
 2000b94:	e0000e26 	beq	fp,zero,2000bd0 <___vfprintf_internal_r+0x3f4>
 2000b98:	15400dc4 	addi	r21,r2,55
 2000b9c:	8d400005 	stb	r21,0(r17)
 2000ba0:	802b883a 	mov	r21,r16
 2000ba4:	8c400044 	addi	r17,r17,1
 2000ba8:	803ff11e 	bne	r16,zero,2000b70 <__reset+0xfdff7b70>
 2000bac:	d9000b17 	ldw	r4,44(sp)
 2000bb0:	8eebc83a 	sub	r21,r17,sp
 2000bb4:	dc001117 	ldw	r16,68(sp)
 2000bb8:	2545c83a 	sub	r2,r4,r21
 2000bbc:	d809883a 	mov	r4,sp
 2000bc0:	00bfb90e 	bge	zero,r2,2000aa8 <__reset+0xfdff7aa8>
 2000bc4:	d8c00a17 	ldw	r3,40(sp)
 2000bc8:	88ffae36 	bltu	r17,r3,2000a84 <__reset+0xfdff7a84>
 2000bcc:	003fb606 	br	2000aa8 <__reset+0xfdff7aa8>
 2000bd0:	154015c4 	addi	r21,r2,87
 2000bd4:	003fe206 	br	2000b60 <__reset+0xfdff7b60>
 2000bd8:	00c00044 	movi	r3,1
 2000bdc:	013fffc4 	movi	r4,-1
 2000be0:	d8c00d15 	stw	r3,52(sp)
 2000be4:	d9000b15 	stw	r4,44(sp)
 2000be8:	d8001415 	stw	zero,80(sp)
 2000bec:	05000284 	movi	r20,10
 2000bf0:	d9000c15 	stw	r4,48(sp)
 2000bf4:	d8001315 	stw	zero,76(sp)
 2000bf8:	d8001015 	stw	zero,64(sp)
 2000bfc:	182b883a 	mov	r21,r3
 2000c00:	003f1106 	br	2000848 <__reset+0xfdff7848>
 2000c04:	00c00044 	movi	r3,1
 2000c08:	d8c01315 	stw	r3,76(sp)
 2000c0c:	054000c4 	movi	r21,3
 2000c10:	003f0d06 	br	2000848 <__reset+0xfdff7848>
 2000c14:	d8c01117 	ldw	r3,68(sp)
 2000c18:	dc001517 	ldw	r16,84(sp)
 2000c1c:	8805883a 	mov	r2,r17
 2000c20:	90e5883a 	add	r18,r18,r3
 2000c24:	b823883a 	mov	r17,r23
 2000c28:	102f883a 	mov	r23,r2
 2000c2c:	d8c01217 	ldw	r3,72(sp)
 2000c30:	18000a26 	beq	r3,zero,2000c5c <___vfprintf_internal_r+0x480>
 2000c34:	b8800117 	ldw	r2,4(r23)
 2000c38:	d9000f17 	ldw	r4,60(sp)
 2000c3c:	00c00b44 	movi	r3,45
 2000c40:	d8c00905 	stb	r3,36(sp)
 2000c44:	b80b883a 	mov	r5,r23
 2000c48:	d9800904 	addi	r6,sp,36
 2000c4c:	01c00044 	movi	r7,1
 2000c50:	103ee83a 	callr	r2
 2000c54:	103fb21e 	bne	r2,zero,2000b20 <__reset+0xfdff7b20>
 2000c58:	94800044 	addi	r18,r18,1
 2000c5c:	8d6dc83a 	sub	r22,r17,r21
 2000c60:	057f4d0e 	bge	zero,r21,2000998 <__reset+0xfdff7998>
 2000c64:	dd400f17 	ldw	r21,60(sp)
 2000c68:	00000206 	br	2000c74 <___vfprintf_internal_r+0x498>
 2000c6c:	94800044 	addi	r18,r18,1
 2000c70:	8dbf4926 	beq	r17,r22,2000998 <__reset+0xfdff7998>
 2000c74:	8c7fffc4 	addi	r17,r17,-1
 2000c78:	88c00003 	ldbu	r3,0(r17)
 2000c7c:	b8800117 	ldw	r2,4(r23)
 2000c80:	a809883a 	mov	r4,r21
 2000c84:	d8c00905 	stb	r3,36(sp)
 2000c88:	b80b883a 	mov	r5,r23
 2000c8c:	d9800904 	addi	r6,sp,36
 2000c90:	01c00044 	movi	r7,1
 2000c94:	103ee83a 	callr	r2
 2000c98:	103ff426 	beq	r2,zero,2000c6c <__reset+0xfdff7c6c>
 2000c9c:	04bfffc4 	movi	r18,-1
 2000ca0:	003f0306 	br	20008b0 <__reset+0xfdff78b0>
 2000ca4:	dd401015 	stw	r21,64(sp)
 2000ca8:	05400084 	movi	r21,2
 2000cac:	003ee606 	br	2000848 <__reset+0xfdff7848>
 2000cb0:	0005883a 	mov	r2,zero
 2000cb4:	003f2806 	br	2000958 <__reset+0xfdff7958>
 2000cb8:	0005883a 	mov	r2,zero
 2000cbc:	003f1606 	br	2000918 <__reset+0xfdff7918>
 2000cc0:	d8c01117 	ldw	r3,68(sp)
 2000cc4:	00ffd90e 	bge	zero,r3,2000c2c <__reset+0xfdff7c2c>
 2000cc8:	00800804 	movi	r2,32
 2000ccc:	d8800885 	stb	r2,34(sp)
 2000cd0:	b805883a 	mov	r2,r23
 2000cd4:	dc001515 	stw	r16,84(sp)
 2000cd8:	882f883a 	mov	r23,r17
 2000cdc:	1f3fffc4 	addi	fp,r3,-1
 2000ce0:	05bfffc4 	movi	r22,-1
 2000ce4:	dc000f17 	ldw	r16,60(sp)
 2000ce8:	1023883a 	mov	r17,r2
 2000cec:	00000206 	br	2000cf8 <___vfprintf_internal_r+0x51c>
 2000cf0:	e73fffc4 	addi	fp,fp,-1
 2000cf4:	e5bfc726 	beq	fp,r22,2000c14 <__reset+0xfdff7c14>
 2000cf8:	88800117 	ldw	r2,4(r17)
 2000cfc:	8009883a 	mov	r4,r16
 2000d00:	880b883a 	mov	r5,r17
 2000d04:	d9800884 	addi	r6,sp,34
 2000d08:	01c00044 	movi	r7,1
 2000d0c:	103ee83a 	callr	r2
 2000d10:	103ff726 	beq	r2,zero,2000cf0 <__reset+0xfdff7cf0>
 2000d14:	04bfffc4 	movi	r18,-1
 2000d18:	003ee506 	br	20008b0 <__reset+0xfdff78b0>
 2000d1c:	01000044 	movi	r4,1
 2000d20:	d9000b15 	stw	r4,44(sp)
 2000d24:	003f1806 	br	2000988 <__reset+0xfdff7988>
 2000d28:	b8c00117 	ldw	r3,4(r23)
 2000d2c:	d9000f17 	ldw	r4,60(sp)
 2000d30:	d8800905 	stb	r2,36(sp)
 2000d34:	b80b883a 	mov	r5,r23
 2000d38:	d9800904 	addi	r6,sp,36
 2000d3c:	a80f883a 	mov	r7,r21
 2000d40:	183ee83a 	callr	r3
 2000d44:	103f761e 	bne	r2,zero,2000b20 <__reset+0xfdff7b20>
 2000d48:	94800044 	addi	r18,r18,1
 2000d4c:	002b883a 	mov	r21,zero
 2000d50:	003ebd06 	br	2000848 <__reset+0xfdff7848>
 2000d54:	00c00044 	movi	r3,1
 2000d58:	d8c01415 	stw	r3,80(sp)
 2000d5c:	05000404 	movi	r20,16
 2000d60:	003f7206 	br	2000b2c <__reset+0xfdff7b2c>
 2000d64:	d9000c17 	ldw	r4,48(sp)
 2000d68:	9900420e 	bge	r19,r4,2000e74 <___vfprintf_internal_r+0x698>
 2000d6c:	df000f17 	ldw	fp,60(sp)
 2000d70:	25bfffc4 	addi	r22,r4,-1
 2000d74:	00800804 	movi	r2,32
 2000d78:	d8800845 	stb	r2,33(sp)
 2000d7c:	b023883a 	mov	r17,r22
 2000d80:	057fffc4 	movi	r21,-1
 2000d84:	8c7fffc4 	addi	r17,r17,-1
 2000d88:	8d403926 	beq	r17,r21,2000e70 <___vfprintf_internal_r+0x694>
 2000d8c:	b8800117 	ldw	r2,4(r23)
 2000d90:	e009883a 	mov	r4,fp
 2000d94:	b80b883a 	mov	r5,r23
 2000d98:	d9800844 	addi	r6,sp,33
 2000d9c:	01c00044 	movi	r7,1
 2000da0:	103ee83a 	callr	r2
 2000da4:	103ff726 	beq	r2,zero,2000d84 <__reset+0xfdff7d84>
 2000da8:	04bfffc4 	movi	r18,-1
 2000dac:	003ec006 	br	20008b0 <__reset+0xfdff78b0>
 2000db0:	d9000e17 	ldw	r4,56(sp)
 2000db4:	d8c00e17 	ldw	r3,56(sp)
 2000db8:	21000017 	ldw	r4,0(r4)
 2000dbc:	18c00104 	addi	r3,r3,4
 2000dc0:	d8c00e15 	stw	r3,56(sp)
 2000dc4:	d9001215 	stw	r4,72(sp)
 2000dc8:	20007b40 	call	20007b4 <strlen>
 2000dcc:	d9000c17 	ldw	r4,48(sp)
 2000dd0:	102d883a 	mov	r22,r2
 2000dd4:	20b9c83a 	sub	fp,r4,r2
 2000dd8:	07001b0e 	bge	zero,fp,2000e48 <___vfprintf_internal_r+0x66c>
 2000ddc:	00800804 	movi	r2,32
 2000de0:	d8800805 	stb	r2,32(sp)
 2000de4:	b805883a 	mov	r2,r23
 2000de8:	dc001115 	stw	r16,68(sp)
 2000dec:	b02f883a 	mov	r23,r22
 2000df0:	e47fffc4 	addi	r17,fp,-1
 2000df4:	902d883a 	mov	r22,r18
 2000df8:	057fffc4 	movi	r21,-1
 2000dfc:	dc000f17 	ldw	r16,60(sp)
 2000e00:	1025883a 	mov	r18,r2
 2000e04:	00000206 	br	2000e10 <___vfprintf_internal_r+0x634>
 2000e08:	8c7fffc4 	addi	r17,r17,-1
 2000e0c:	8d400826 	beq	r17,r21,2000e30 <___vfprintf_internal_r+0x654>
 2000e10:	90800117 	ldw	r2,4(r18)
 2000e14:	8009883a 	mov	r4,r16
 2000e18:	900b883a 	mov	r5,r18
 2000e1c:	d9800804 	addi	r6,sp,32
 2000e20:	01c00044 	movi	r7,1
 2000e24:	103ee83a 	callr	r2
 2000e28:	103ff726 	beq	r2,zero,2000e08 <__reset+0xfdff7e08>
 2000e2c:	003f3c06 	br	2000b20 <__reset+0xfdff7b20>
 2000e30:	dc001117 	ldw	r16,68(sp)
 2000e34:	9005883a 	mov	r2,r18
 2000e38:	b025883a 	mov	r18,r22
 2000e3c:	9725883a 	add	r18,r18,fp
 2000e40:	b82d883a 	mov	r22,r23
 2000e44:	102f883a 	mov	r23,r2
 2000e48:	b8800117 	ldw	r2,4(r23)
 2000e4c:	d9000f17 	ldw	r4,60(sp)
 2000e50:	d9801217 	ldw	r6,72(sp)
 2000e54:	b80b883a 	mov	r5,r23
 2000e58:	b00f883a 	mov	r7,r22
 2000e5c:	103ee83a 	callr	r2
 2000e60:	103f2f1e 	bne	r2,zero,2000b20 <__reset+0xfdff7b20>
 2000e64:	95a5883a 	add	r18,r18,r22
 2000e68:	002b883a 	mov	r21,zero
 2000e6c:	003e7606 	br	2000848 <__reset+0xfdff7848>
 2000e70:	95a5883a 	add	r18,r18,r22
 2000e74:	d9400e17 	ldw	r5,56(sp)
 2000e78:	b8800117 	ldw	r2,4(r23)
 2000e7c:	d9000f17 	ldw	r4,60(sp)
 2000e80:	28c00017 	ldw	r3,0(r5)
 2000e84:	d9800904 	addi	r6,sp,36
 2000e88:	b80b883a 	mov	r5,r23
 2000e8c:	d8c00905 	stb	r3,36(sp)
 2000e90:	d8c00e17 	ldw	r3,56(sp)
 2000e94:	01c00044 	movi	r7,1
 2000e98:	1c400104 	addi	r17,r3,4
 2000e9c:	103ee83a 	callr	r2
 2000ea0:	103f1f1e 	bne	r2,zero,2000b20 <__reset+0xfdff7b20>
 2000ea4:	94800044 	addi	r18,r18,1
 2000ea8:	dc400e15 	stw	r17,56(sp)
 2000eac:	002b883a 	mov	r21,zero
 2000eb0:	003e6506 	br	2000848 <__reset+0xfdff7848>
 2000eb4:	b8800117 	ldw	r2,4(r23)
 2000eb8:	d9000f17 	ldw	r4,60(sp)
 2000ebc:	00c00b44 	movi	r3,45
 2000ec0:	d8c00905 	stb	r3,36(sp)
 2000ec4:	b80b883a 	mov	r5,r23
 2000ec8:	d9800904 	addi	r6,sp,36
 2000ecc:	01c00044 	movi	r7,1
 2000ed0:	103ee83a 	callr	r2
 2000ed4:	103f121e 	bne	r2,zero,2000b20 <__reset+0xfdff7b20>
 2000ed8:	d8c01117 	ldw	r3,68(sp)
 2000edc:	94800044 	addi	r18,r18,1
 2000ee0:	00fefc16 	blt	zero,r3,2000ad4 <__reset+0xfdff7ad4>
 2000ee4:	003f5d06 	br	2000c5c <__reset+0xfdff7c5c>
 2000ee8:	056bc83a 	sub	r21,zero,r21
 2000eec:	d8c01215 	stw	r3,72(sp)
 2000ef0:	003f1406 	br	2000b44 <__reset+0xfdff7b44>
 2000ef4:	d8c01117 	ldw	r3,68(sp)
 2000ef8:	8805883a 	mov	r2,r17
 2000efc:	dc001217 	ldw	r16,72(sp)
 2000f00:	b823883a 	mov	r17,r23
 2000f04:	90e5883a 	add	r18,r18,r3
 2000f08:	102f883a 	mov	r23,r2
 2000f0c:	003f5306 	br	2000c5c <__reset+0xfdff7c5c>

02000f10 <__vfprintf_internal>:
 2000f10:	00808074 	movhi	r2,513
 2000f14:	1092d804 	addi	r2,r2,19296
 2000f18:	2007883a 	mov	r3,r4
 2000f1c:	11000017 	ldw	r4,0(r2)
 2000f20:	2805883a 	mov	r2,r5
 2000f24:	300f883a 	mov	r7,r6
 2000f28:	180b883a 	mov	r5,r3
 2000f2c:	100d883a 	mov	r6,r2
 2000f30:	20007dc1 	jmpi	20007dc <___vfprintf_internal_r>

02000f34 <__sfvwrite_small_dev>:
 2000f34:	2880000b 	ldhu	r2,0(r5)
 2000f38:	defffa04 	addi	sp,sp,-24
 2000f3c:	dcc00315 	stw	r19,12(sp)
 2000f40:	10c0020c 	andi	r3,r2,8
 2000f44:	18ffffcc 	andi	r3,r3,65535
 2000f48:	18e0001c 	xori	r3,r3,32768
 2000f4c:	dc800215 	stw	r18,8(sp)
 2000f50:	dc400115 	stw	r17,4(sp)
 2000f54:	dfc00515 	stw	ra,20(sp)
 2000f58:	dd000415 	stw	r20,16(sp)
 2000f5c:	dc000015 	stw	r16,0(sp)
 2000f60:	18e00004 	addi	r3,r3,-32768
 2000f64:	2825883a 	mov	r18,r5
 2000f68:	2027883a 	mov	r19,r4
 2000f6c:	3023883a 	mov	r17,r6
 2000f70:	18002626 	beq	r3,zero,200100c <__sfvwrite_small_dev+0xd8>
 2000f74:	2940008f 	ldh	r5,2(r5)
 2000f78:	28001016 	blt	r5,zero,2000fbc <__sfvwrite_small_dev+0x88>
 2000f7c:	01c01a0e 	bge	zero,r7,2000fe8 <__sfvwrite_small_dev+0xb4>
 2000f80:	3821883a 	mov	r16,r7
 2000f84:	05010004 	movi	r20,1024
 2000f88:	00000306 	br	2000f98 <__sfvwrite_small_dev+0x64>
 2000f8c:	88a3883a 	add	r17,r17,r2
 2000f90:	0400150e 	bge	zero,r16,2000fe8 <__sfvwrite_small_dev+0xb4>
 2000f94:	9140008f 	ldh	r5,2(r18)
 2000f98:	880d883a 	mov	r6,r17
 2000f9c:	9809883a 	mov	r4,r19
 2000fa0:	800f883a 	mov	r7,r16
 2000fa4:	a400010e 	bge	r20,r16,2000fac <__sfvwrite_small_dev+0x78>
 2000fa8:	01c10004 	movi	r7,1024
 2000fac:	20010140 	call	2001014 <_write_r>
 2000fb0:	80a1c83a 	sub	r16,r16,r2
 2000fb4:	00bff516 	blt	zero,r2,2000f8c <__reset+0xfdff7f8c>
 2000fb8:	9080000b 	ldhu	r2,0(r18)
 2000fbc:	10801014 	ori	r2,r2,64
 2000fc0:	9080000d 	sth	r2,0(r18)
 2000fc4:	00bfffc4 	movi	r2,-1
 2000fc8:	dfc00517 	ldw	ra,20(sp)
 2000fcc:	dd000417 	ldw	r20,16(sp)
 2000fd0:	dcc00317 	ldw	r19,12(sp)
 2000fd4:	dc800217 	ldw	r18,8(sp)
 2000fd8:	dc400117 	ldw	r17,4(sp)
 2000fdc:	dc000017 	ldw	r16,0(sp)
 2000fe0:	dec00604 	addi	sp,sp,24
 2000fe4:	f800283a 	ret
 2000fe8:	0005883a 	mov	r2,zero
 2000fec:	dfc00517 	ldw	ra,20(sp)
 2000ff0:	dd000417 	ldw	r20,16(sp)
 2000ff4:	dcc00317 	ldw	r19,12(sp)
 2000ff8:	dc800217 	ldw	r18,8(sp)
 2000ffc:	dc400117 	ldw	r17,4(sp)
 2001000:	dc000017 	ldw	r16,0(sp)
 2001004:	dec00604 	addi	sp,sp,24
 2001008:	f800283a 	ret
 200100c:	00bfffc4 	movi	r2,-1
 2001010:	003fed06 	br	2000fc8 <__reset+0xfdff7fc8>

02001014 <_write_r>:
 2001014:	defffd04 	addi	sp,sp,-12
 2001018:	dc400115 	stw	r17,4(sp)
 200101c:	dc000015 	stw	r16,0(sp)
 2001020:	2023883a 	mov	r17,r4
 2001024:	04008074 	movhi	r16,513
 2001028:	8417ee04 	addi	r16,r16,24504
 200102c:	2809883a 	mov	r4,r5
 2001030:	300b883a 	mov	r5,r6
 2001034:	380d883a 	mov	r6,r7
 2001038:	dfc00215 	stw	ra,8(sp)
 200103c:	80000015 	stw	zero,0(r16)
 2001040:	20015380 	call	2001538 <write>
 2001044:	00ffffc4 	movi	r3,-1
 2001048:	10c00526 	beq	r2,r3,2001060 <_write_r+0x4c>
 200104c:	dfc00217 	ldw	ra,8(sp)
 2001050:	dc400117 	ldw	r17,4(sp)
 2001054:	dc000017 	ldw	r16,0(sp)
 2001058:	dec00304 	addi	sp,sp,12
 200105c:	f800283a 	ret
 2001060:	80c00017 	ldw	r3,0(r16)
 2001064:	183ff926 	beq	r3,zero,200104c <__reset+0xfdff804c>
 2001068:	88c00015 	stw	r3,0(r17)
 200106c:	dfc00217 	ldw	ra,8(sp)
 2001070:	dc400117 	ldw	r17,4(sp)
 2001074:	dc000017 	ldw	r16,0(sp)
 2001078:	dec00304 	addi	sp,sp,12
 200107c:	f800283a 	ret

02001080 <__mulsi3>:
 2001080:	0005883a 	mov	r2,zero
 2001084:	20000726 	beq	r4,zero,20010a4 <__mulsi3+0x24>
 2001088:	20c0004c 	andi	r3,r4,1
 200108c:	2008d07a 	srli	r4,r4,1
 2001090:	18000126 	beq	r3,zero,2001098 <__mulsi3+0x18>
 2001094:	1145883a 	add	r2,r2,r5
 2001098:	294b883a 	add	r5,r5,r5
 200109c:	203ffa1e 	bne	r4,zero,2001088 <__reset+0xfdff8088>
 20010a0:	f800283a 	ret
 20010a4:	f800283a 	ret

020010a8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 20010a8:	defff504 	addi	sp,sp,-44
 20010ac:	df000a15 	stw	fp,40(sp)
 20010b0:	df000a04 	addi	fp,sp,40
 20010b4:	e13ffc15 	stw	r4,-16(fp)
 20010b8:	e17ffd15 	stw	r5,-12(fp)
 20010bc:	e1bffe15 	stw	r6,-8(fp)
 20010c0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 20010c4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20010c8:	00808074 	movhi	r2,513
 20010cc:	1097f204 	addi	r2,r2,24520
 20010d0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 20010d4:	10003f26 	beq	r2,zero,20011d4 <alt_alarm_start+0x12c>
  {
    if (alarm)
 20010d8:	e0bffc17 	ldw	r2,-16(fp)
 20010dc:	10003b26 	beq	r2,zero,20011cc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 20010e0:	e0bffc17 	ldw	r2,-16(fp)
 20010e4:	e0fffe17 	ldw	r3,-8(fp)
 20010e8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 20010ec:	e0bffc17 	ldw	r2,-16(fp)
 20010f0:	e0ffff17 	ldw	r3,-4(fp)
 20010f4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20010f8:	0005303a 	rdctl	r2,status
 20010fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2001100:	e0fff817 	ldw	r3,-32(fp)
 2001104:	00bfff84 	movi	r2,-2
 2001108:	1884703a 	and	r2,r3,r2
 200110c:	1001703a 	wrctl	status,r2
  
  return context;
 2001110:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2001114:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2001118:	00808074 	movhi	r2,513
 200111c:	1097f304 	addi	r2,r2,24524
 2001120:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2001124:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2001128:	e0fffd17 	ldw	r3,-12(fp)
 200112c:	e0bff617 	ldw	r2,-40(fp)
 2001130:	1885883a 	add	r2,r3,r2
 2001134:	10c00044 	addi	r3,r2,1
 2001138:	e0bffc17 	ldw	r2,-16(fp)
 200113c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2001140:	e0bffc17 	ldw	r2,-16(fp)
 2001144:	10c00217 	ldw	r3,8(r2)
 2001148:	e0bff617 	ldw	r2,-40(fp)
 200114c:	1880042e 	bgeu	r3,r2,2001160 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 2001150:	e0bffc17 	ldw	r2,-16(fp)
 2001154:	00c00044 	movi	r3,1
 2001158:	10c00405 	stb	r3,16(r2)
 200115c:	00000206 	br	2001168 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 2001160:	e0bffc17 	ldw	r2,-16(fp)
 2001164:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2001168:	e0bffc17 	ldw	r2,-16(fp)
 200116c:	00c08074 	movhi	r3,513
 2001170:	18d2d904 	addi	r3,r3,19300
 2001174:	e0fff915 	stw	r3,-28(fp)
 2001178:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200117c:	e0bffa17 	ldw	r2,-24(fp)
 2001180:	e0fff917 	ldw	r3,-28(fp)
 2001184:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2001188:	e0bff917 	ldw	r2,-28(fp)
 200118c:	10c00017 	ldw	r3,0(r2)
 2001190:	e0bffa17 	ldw	r2,-24(fp)
 2001194:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2001198:	e0bff917 	ldw	r2,-28(fp)
 200119c:	10800017 	ldw	r2,0(r2)
 20011a0:	e0fffa17 	ldw	r3,-24(fp)
 20011a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20011a8:	e0bff917 	ldw	r2,-28(fp)
 20011ac:	e0fffa17 	ldw	r3,-24(fp)
 20011b0:	10c00015 	stw	r3,0(r2)
 20011b4:	e0bff717 	ldw	r2,-36(fp)
 20011b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20011bc:	e0bffb17 	ldw	r2,-20(fp)
 20011c0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 20011c4:	0005883a 	mov	r2,zero
 20011c8:	00000306 	br	20011d8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 20011cc:	00bffa84 	movi	r2,-22
 20011d0:	00000106 	br	20011d8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 20011d4:	00bfde84 	movi	r2,-134
  }
}
 20011d8:	e037883a 	mov	sp,fp
 20011dc:	df000017 	ldw	fp,0(sp)
 20011e0:	dec00104 	addi	sp,sp,4
 20011e4:	f800283a 	ret

020011e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 20011e8:	defffc04 	addi	sp,sp,-16
 20011ec:	df000315 	stw	fp,12(sp)
 20011f0:	df000304 	addi	fp,sp,12
 20011f4:	e13ffd15 	stw	r4,-12(fp)
 20011f8:	e17ffe15 	stw	r5,-8(fp)
 20011fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2001200:	e0fffe17 	ldw	r3,-8(fp)
 2001204:	e0bffd17 	ldw	r2,-12(fp)
 2001208:	18800e26 	beq	r3,r2,2001244 <alt_load_section+0x5c>
  {
    while( to != end )
 200120c:	00000a06 	br	2001238 <alt_load_section+0x50>
    {
      *to++ = *from++;
 2001210:	e0bffd17 	ldw	r2,-12(fp)
 2001214:	10c00017 	ldw	r3,0(r2)
 2001218:	e0bffe17 	ldw	r2,-8(fp)
 200121c:	10c00015 	stw	r3,0(r2)
 2001220:	e0bffe17 	ldw	r2,-8(fp)
 2001224:	10800104 	addi	r2,r2,4
 2001228:	e0bffe15 	stw	r2,-8(fp)
 200122c:	e0bffd17 	ldw	r2,-12(fp)
 2001230:	10800104 	addi	r2,r2,4
 2001234:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2001238:	e0fffe17 	ldw	r3,-8(fp)
 200123c:	e0bfff17 	ldw	r2,-4(fp)
 2001240:	18bff31e 	bne	r3,r2,2001210 <__reset+0xfdff8210>
    {
      *to++ = *from++;
    }
  }
}
 2001244:	e037883a 	mov	sp,fp
 2001248:	df000017 	ldw	fp,0(sp)
 200124c:	dec00104 	addi	sp,sp,4
 2001250:	f800283a 	ret

02001254 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2001254:	defffe04 	addi	sp,sp,-8
 2001258:	dfc00115 	stw	ra,4(sp)
 200125c:	df000015 	stw	fp,0(sp)
 2001260:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2001264:	01008074 	movhi	r4,513
 2001268:	2112e404 	addi	r4,r4,19344
 200126c:	01408074 	movhi	r5,513
 2001270:	294ddb04 	addi	r5,r5,14188
 2001274:	01808074 	movhi	r6,513
 2001278:	3192e404 	addi	r6,r6,19344
 200127c:	20011e80 	call	20011e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2001280:	01008034 	movhi	r4,512
 2001284:	21000804 	addi	r4,r4,32
 2001288:	01408034 	movhi	r5,512
 200128c:	29400804 	addi	r5,r5,32
 2001290:	01808034 	movhi	r6,512
 2001294:	31806e04 	addi	r6,r6,440
 2001298:	20011e80 	call	20011e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 200129c:	01008034 	movhi	r4,512
 20012a0:	21118204 	addi	r4,r4,17928
 20012a4:	01408034 	movhi	r5,512
 20012a8:	29518204 	addi	r5,r5,17928
 20012ac:	01808074 	movhi	r6,513
 20012b0:	318ddb04 	addi	r6,r6,14188
 20012b4:	20011e80 	call	20011e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20012b8:	200332c0 	call	200332c <alt_dcache_flush_all>
  alt_icache_flush_all();
 20012bc:	20035d40 	call	20035d4 <alt_icache_flush_all>
}
 20012c0:	e037883a 	mov	sp,fp
 20012c4:	dfc00117 	ldw	ra,4(sp)
 20012c8:	df000017 	ldw	fp,0(sp)
 20012cc:	dec00204 	addi	sp,sp,8
 20012d0:	f800283a 	ret

020012d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20012d4:	defffd04 	addi	sp,sp,-12
 20012d8:	dfc00215 	stw	ra,8(sp)
 20012dc:	df000115 	stw	fp,4(sp)
 20012e0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20012e4:	0009883a 	mov	r4,zero
 20012e8:	20016600 	call	2001660 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 20012ec:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20012f0:	20016940 	call	2001694 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 20012f4:	01008074 	movhi	r4,513
 20012f8:	210dc904 	addi	r4,r4,14116
 20012fc:	01408074 	movhi	r5,513
 2001300:	294dc904 	addi	r5,r5,14116
 2001304:	01808074 	movhi	r6,513
 2001308:	318dc904 	addi	r6,r6,14116
 200130c:	20039980 	call	2003998 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2001310:	20034640 	call	2003464 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2001314:	01008034 	movhi	r4,512
 2001318:	210d3004 	addi	r4,r4,13504
 200131c:	20041c80 	call	20041c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2001320:	d1251b17 	ldw	r4,-27540(gp)
 2001324:	d0e51c17 	ldw	r3,-27536(gp)
 2001328:	d0a51d17 	ldw	r2,-27532(gp)
 200132c:	180b883a 	mov	r5,r3
 2001330:	100d883a 	mov	r6,r2
 2001334:	20004e80 	call	20004e8 <main>
 2001338:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200133c:	01000044 	movi	r4,1
 2001340:	20032600 	call	2003260 <close>
  exit (result);
 2001344:	e13fff17 	ldw	r4,-4(fp)
 2001348:	20041dc0 	call	20041dc <exit>

0200134c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 200134c:	defffa04 	addi	sp,sp,-24
 2001350:	df000515 	stw	fp,20(sp)
 2001354:	df000504 	addi	fp,sp,20
 2001358:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200135c:	0005303a 	rdctl	r2,status
 2001360:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2001364:	e0fffc17 	ldw	r3,-16(fp)
 2001368:	00bfff84 	movi	r2,-2
 200136c:	1884703a 	and	r2,r3,r2
 2001370:	1001703a 	wrctl	status,r2
  
  return context;
 2001374:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2001378:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 200137c:	e0bfff17 	ldw	r2,-4(fp)
 2001380:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2001384:	e0bffd17 	ldw	r2,-12(fp)
 2001388:	10800017 	ldw	r2,0(r2)
 200138c:	e0fffd17 	ldw	r3,-12(fp)
 2001390:	18c00117 	ldw	r3,4(r3)
 2001394:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2001398:	e0bffd17 	ldw	r2,-12(fp)
 200139c:	10800117 	ldw	r2,4(r2)
 20013a0:	e0fffd17 	ldw	r3,-12(fp)
 20013a4:	18c00017 	ldw	r3,0(r3)
 20013a8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 20013ac:	e0bffd17 	ldw	r2,-12(fp)
 20013b0:	e0fffd17 	ldw	r3,-12(fp)
 20013b4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 20013b8:	e0bffd17 	ldw	r2,-12(fp)
 20013bc:	e0fffd17 	ldw	r3,-12(fp)
 20013c0:	10c00015 	stw	r3,0(r2)
 20013c4:	e0bffb17 	ldw	r2,-20(fp)
 20013c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20013cc:	e0bffe17 	ldw	r2,-8(fp)
 20013d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 20013d4:	e037883a 	mov	sp,fp
 20013d8:	df000017 	ldw	fp,0(sp)
 20013dc:	dec00104 	addi	sp,sp,4
 20013e0:	f800283a 	ret

020013e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 20013e4:	defffb04 	addi	sp,sp,-20
 20013e8:	dfc00415 	stw	ra,16(sp)
 20013ec:	df000315 	stw	fp,12(sp)
 20013f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 20013f4:	d0a00517 	ldw	r2,-32748(gp)
 20013f8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 20013fc:	d0a51f17 	ldw	r2,-27524(gp)
 2001400:	10800044 	addi	r2,r2,1
 2001404:	d0a51f15 	stw	r2,-27524(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2001408:	00002e06 	br	20014c4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 200140c:	e0bffd17 	ldw	r2,-12(fp)
 2001410:	10800017 	ldw	r2,0(r2)
 2001414:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2001418:	e0bffd17 	ldw	r2,-12(fp)
 200141c:	10800403 	ldbu	r2,16(r2)
 2001420:	10803fcc 	andi	r2,r2,255
 2001424:	10000426 	beq	r2,zero,2001438 <alt_tick+0x54>
 2001428:	d0a51f17 	ldw	r2,-27524(gp)
 200142c:	1000021e 	bne	r2,zero,2001438 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2001430:	e0bffd17 	ldw	r2,-12(fp)
 2001434:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2001438:	e0bffd17 	ldw	r2,-12(fp)
 200143c:	10800217 	ldw	r2,8(r2)
 2001440:	d0e51f17 	ldw	r3,-27524(gp)
 2001444:	18801d36 	bltu	r3,r2,20014bc <alt_tick+0xd8>
 2001448:	e0bffd17 	ldw	r2,-12(fp)
 200144c:	10800403 	ldbu	r2,16(r2)
 2001450:	10803fcc 	andi	r2,r2,255
 2001454:	1000191e 	bne	r2,zero,20014bc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2001458:	e0bffd17 	ldw	r2,-12(fp)
 200145c:	10c00317 	ldw	r3,12(r2)
 2001460:	e0bffd17 	ldw	r2,-12(fp)
 2001464:	10800517 	ldw	r2,20(r2)
 2001468:	1009883a 	mov	r4,r2
 200146c:	183ee83a 	callr	r3
 2001470:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2001474:	e0bfff17 	ldw	r2,-4(fp)
 2001478:	1000031e 	bne	r2,zero,2001488 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 200147c:	e13ffd17 	ldw	r4,-12(fp)
 2001480:	200134c0 	call	200134c <alt_alarm_stop>
 2001484:	00000d06 	br	20014bc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2001488:	e0bffd17 	ldw	r2,-12(fp)
 200148c:	10c00217 	ldw	r3,8(r2)
 2001490:	e0bfff17 	ldw	r2,-4(fp)
 2001494:	1887883a 	add	r3,r3,r2
 2001498:	e0bffd17 	ldw	r2,-12(fp)
 200149c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 20014a0:	e0bffd17 	ldw	r2,-12(fp)
 20014a4:	10c00217 	ldw	r3,8(r2)
 20014a8:	d0a51f17 	ldw	r2,-27524(gp)
 20014ac:	1880032e 	bgeu	r3,r2,20014bc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 20014b0:	e0bffd17 	ldw	r2,-12(fp)
 20014b4:	00c00044 	movi	r3,1
 20014b8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 20014bc:	e0bffe17 	ldw	r2,-8(fp)
 20014c0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20014c4:	e0fffd17 	ldw	r3,-12(fp)
 20014c8:	d0a00504 	addi	r2,gp,-32748
 20014cc:	18bfcf1e 	bne	r3,r2,200140c <__reset+0xfdff840c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 20014d0:	0001883a 	nop
}
 20014d4:	e037883a 	mov	sp,fp
 20014d8:	dfc00117 	ldw	ra,4(sp)
 20014dc:	df000017 	ldw	fp,0(sp)
 20014e0:	dec00204 	addi	sp,sp,8
 20014e4:	f800283a 	ret

020014e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20014e8:	defffe04 	addi	sp,sp,-8
 20014ec:	dfc00115 	stw	ra,4(sp)
 20014f0:	df000015 	stw	fp,0(sp)
 20014f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20014f8:	00808074 	movhi	r2,513
 20014fc:	1092e004 	addi	r2,r2,19328
 2001500:	10800017 	ldw	r2,0(r2)
 2001504:	10000526 	beq	r2,zero,200151c <alt_get_errno+0x34>
 2001508:	00808074 	movhi	r2,513
 200150c:	1092e004 	addi	r2,r2,19328
 2001510:	10800017 	ldw	r2,0(r2)
 2001514:	103ee83a 	callr	r2
 2001518:	00000206 	br	2001524 <alt_get_errno+0x3c>
 200151c:	00808074 	movhi	r2,513
 2001520:	1097ee04 	addi	r2,r2,24504
}
 2001524:	e037883a 	mov	sp,fp
 2001528:	dfc00117 	ldw	ra,4(sp)
 200152c:	df000017 	ldw	fp,0(sp)
 2001530:	dec00204 	addi	sp,sp,8
 2001534:	f800283a 	ret

02001538 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2001538:	defff904 	addi	sp,sp,-28
 200153c:	dfc00615 	stw	ra,24(sp)
 2001540:	df000515 	stw	fp,20(sp)
 2001544:	df000504 	addi	fp,sp,20
 2001548:	e13ffd15 	stw	r4,-12(fp)
 200154c:	e17ffe15 	stw	r5,-8(fp)
 2001550:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2001554:	e0bffd17 	ldw	r2,-12(fp)
 2001558:	10000716 	blt	r2,zero,2001578 <write+0x40>
 200155c:	e13ffd17 	ldw	r4,-12(fp)
 2001560:	01400304 	movi	r5,12
 2001564:	20010800 	call	2001080 <__mulsi3>
 2001568:	00c08074 	movhi	r3,513
 200156c:	18d27404 	addi	r3,r3,18896
 2001570:	10c5883a 	add	r2,r2,r3
 2001574:	00000106 	br	200157c <write+0x44>
 2001578:	0005883a 	mov	r2,zero
 200157c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2001580:	e0bffb17 	ldw	r2,-20(fp)
 2001584:	10001f26 	beq	r2,zero,2001604 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2001588:	e0bffb17 	ldw	r2,-20(fp)
 200158c:	10800217 	ldw	r2,8(r2)
 2001590:	108000cc 	andi	r2,r2,3
 2001594:	10001726 	beq	r2,zero,20015f4 <write+0xbc>
 2001598:	e0bffb17 	ldw	r2,-20(fp)
 200159c:	10800017 	ldw	r2,0(r2)
 20015a0:	10800617 	ldw	r2,24(r2)
 20015a4:	10001326 	beq	r2,zero,20015f4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 20015a8:	e0bffb17 	ldw	r2,-20(fp)
 20015ac:	10800017 	ldw	r2,0(r2)
 20015b0:	10c00617 	ldw	r3,24(r2)
 20015b4:	e0bfff17 	ldw	r2,-4(fp)
 20015b8:	e13ffb17 	ldw	r4,-20(fp)
 20015bc:	e17ffe17 	ldw	r5,-8(fp)
 20015c0:	100d883a 	mov	r6,r2
 20015c4:	183ee83a 	callr	r3
 20015c8:	e0bffc15 	stw	r2,-16(fp)
 20015cc:	e0bffc17 	ldw	r2,-16(fp)
 20015d0:	1000060e 	bge	r2,zero,20015ec <write+0xb4>
      {
        ALT_ERRNO = -rval;
 20015d4:	20014e80 	call	20014e8 <alt_get_errno>
 20015d8:	e0fffc17 	ldw	r3,-16(fp)
 20015dc:	00c7c83a 	sub	r3,zero,r3
 20015e0:	10c00015 	stw	r3,0(r2)
        return -1;
 20015e4:	00bfffc4 	movi	r2,-1
 20015e8:	00000a06 	br	2001614 <write+0xdc>
      }
      return rval;
 20015ec:	e0bffc17 	ldw	r2,-16(fp)
 20015f0:	00000806 	br	2001614 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 20015f4:	20014e80 	call	20014e8 <alt_get_errno>
 20015f8:	00c00344 	movi	r3,13
 20015fc:	10c00015 	stw	r3,0(r2)
 2001600:	00000306 	br	2001610 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2001604:	20014e80 	call	20014e8 <alt_get_errno>
 2001608:	00c01444 	movi	r3,81
 200160c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 2001610:	00bfffc4 	movi	r2,-1
}
 2001614:	e037883a 	mov	sp,fp
 2001618:	dfc00117 	ldw	ra,4(sp)
 200161c:	df000017 	ldw	fp,0(sp)
 2001620:	dec00204 	addi	sp,sp,8
 2001624:	f800283a 	ret

02001628 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2001628:	defffd04 	addi	sp,sp,-12
 200162c:	dfc00215 	stw	ra,8(sp)
 2001630:	df000115 	stw	fp,4(sp)
 2001634:	df000104 	addi	fp,sp,4
 2001638:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 200163c:	e13fff17 	ldw	r4,-4(fp)
 2001640:	01408074 	movhi	r5,513
 2001644:	2952dd04 	addi	r5,r5,19316
 2001648:	20033c40 	call	20033c4 <alt_dev_llist_insert>
}
 200164c:	e037883a 	mov	sp,fp
 2001650:	dfc00117 	ldw	ra,4(sp)
 2001654:	df000017 	ldw	fp,0(sp)
 2001658:	dec00204 	addi	sp,sp,8
 200165c:	f800283a 	ret

02001660 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2001660:	defffd04 	addi	sp,sp,-12
 2001664:	dfc00215 	stw	ra,8(sp)
 2001668:	df000115 	stw	fp,4(sp)
 200166c:	df000104 	addi	fp,sp,4
 2001670:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 2001674:	2003d280 	call	2003d28 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2001678:	00800044 	movi	r2,1
 200167c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2001680:	e037883a 	mov	sp,fp
 2001684:	dfc00117 	ldw	ra,4(sp)
 2001688:	df000017 	ldw	fp,0(sp)
 200168c:	dec00204 	addi	sp,sp,8
 2001690:	f800283a 	ret

02001694 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2001694:	defffe04 	addi	sp,sp,-8
 2001698:	dfc00115 	stw	ra,4(sp)
 200169c:	df000015 	stw	fp,0(sp)
 20016a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 20016a4:	01010074 	movhi	r4,1025
 20016a8:	21280004 	addi	r4,r4,-24576
 20016ac:	000b883a 	mov	r5,zero
 20016b0:	000d883a 	mov	r6,zero
 20016b4:	01c0fa04 	movi	r7,1000
 20016b8:	2002b640 	call	2002b64 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER, epcs_flash_controller);
 20016bc:	01008074 	movhi	r4,513
 20016c0:	210e2004 	addi	r4,r4,14464
 20016c4:	20017380 	call	2001738 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 20016c8:	01008074 	movhi	r4,513
 20016cc:	210e5c04 	addi	r4,r4,14704
 20016d0:	000b883a 	mov	r5,zero
 20016d4:	01800084 	movi	r6,2
 20016d8:	20021f40 	call	20021f4 <altera_avalon_jtag_uart_init>
 20016dc:	01008074 	movhi	r4,513
 20016e0:	210e5204 	addi	r4,r4,14664
 20016e4:	20016280 	call	2001628 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 20016e8:	0001883a 	nop
}
 20016ec:	e037883a 	mov	sp,fp
 20016f0:	dfc00117 	ldw	ra,4(sp)
 20016f4:	df000017 	ldw	fp,0(sp)
 20016f8:	dec00204 	addi	sp,sp,8
 20016fc:	f800283a 	ret

02001700 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 2001700:	defffd04 	addi	sp,sp,-12
 2001704:	dfc00215 	stw	ra,8(sp)
 2001708:	df000115 	stw	fp,4(sp)
 200170c:	df000104 	addi	fp,sp,4
 2001710:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 2001714:	e13fff17 	ldw	r4,-4(fp)
 2001718:	01408074 	movhi	r5,513
 200171c:	2952e104 	addi	r5,r5,19332
 2001720:	20033c40 	call	20033c4 <alt_dev_llist_insert>
}
 2001724:	e037883a 	mov	sp,fp
 2001728:	dfc00117 	ldw	ra,4(sp)
 200172c:	df000017 	ldw	fp,0(sp)
 2001730:	dec00204 	addi	sp,sp,8
 2001734:	f800283a 	ret

02001738 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 2001738:	defffc04 	addi	sp,sp,-16
 200173c:	dfc00315 	stw	ra,12(sp)
 2001740:	df000215 	stw	fp,8(sp)
 2001744:	df000204 	addi	fp,sp,8
 2001748:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 200174c:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 2001750:	e13fff17 	ldw	r4,-4(fp)
 2001754:	200178c0 	call	200178c <alt_epcs_flash_query>
 2001758:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 200175c:	e0bffe17 	ldw	r2,-8(fp)
 2001760:	1000041e 	bne	r2,zero,2001774 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 2001764:	e0bfff17 	ldw	r2,-4(fp)
 2001768:	1009883a 	mov	r4,r2
 200176c:	20017000 	call	2001700 <alt_flash_device_register>
 2001770:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 2001774:	e0bffe17 	ldw	r2,-8(fp)
}
 2001778:	e037883a 	mov	sp,fp
 200177c:	dfc00117 	ldw	ra,4(sp)
 2001780:	df000017 	ldw	fp,0(sp)
 2001784:	dec00204 	addi	sp,sp,8
 2001788:	f800283a 	ret

0200178c <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 200178c:	defffc04 	addi	sp,sp,-16
 2001790:	dfc00315 	stw	ra,12(sp)
 2001794:	df000215 	stw	fp,8(sp)
 2001798:	df000204 	addi	fp,sp,8
 200179c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 20017a0:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 20017a4:	e0bfff17 	ldw	r2,-4(fp)
 20017a8:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 20017ac:	e0bfff17 	ldw	r2,-4(fp)
 20017b0:	10802d17 	ldw	r2,180(r2)
 20017b4:	1009883a 	mov	r4,r2
 20017b8:	20030780 	call	2003078 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 20017bc:	10c03fcc 	andi	r3,r2,255
 20017c0:	e0bfff17 	ldw	r2,-4(fp)
 20017c4:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 20017c8:	e0bfff17 	ldw	r2,-4(fp)
 20017cc:	10802f17 	ldw	r2,188(r2)
 20017d0:	10800598 	cmpnei	r2,r2,22
 20017d4:	10000a1e 	bne	r2,zero,2001800 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 20017d8:	e0bfff17 	ldw	r2,-4(fp)
 20017dc:	00c02034 	movhi	r3,128
 20017e0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 20017e4:	e0bfff17 	ldw	r2,-4(fp)
 20017e8:	00c02004 	movi	r3,128
 20017ec:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20017f0:	e0bfff17 	ldw	r2,-4(fp)
 20017f4:	00c00074 	movhi	r3,1
 20017f8:	10c01015 	stw	r3,64(r2)
 20017fc:	00007306 	br	20019cc <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 2001800:	e0bfff17 	ldw	r2,-4(fp)
 2001804:	10802f17 	ldw	r2,188(r2)
 2001808:	10800518 	cmpnei	r2,r2,20
 200180c:	10000a1e 	bne	r2,zero,2001838 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2001810:	e0bfff17 	ldw	r2,-4(fp)
 2001814:	00c00834 	movhi	r3,32
 2001818:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 200181c:	e0bfff17 	ldw	r2,-4(fp)
 2001820:	00c00804 	movi	r3,32
 2001824:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2001828:	e0bfff17 	ldw	r2,-4(fp)
 200182c:	00c00074 	movhi	r3,1
 2001830:	10c01015 	stw	r3,64(r2)
 2001834:	00006506 	br	20019cc <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 2001838:	e0bfff17 	ldw	r2,-4(fp)
 200183c:	10802f17 	ldw	r2,188(r2)
 2001840:	108004d8 	cmpnei	r2,r2,19
 2001844:	10000a1e 	bne	r2,zero,2001870 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 2001848:	e0bfff17 	ldw	r2,-4(fp)
 200184c:	00c00434 	movhi	r3,16
 2001850:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 2001854:	e0bfff17 	ldw	r2,-4(fp)
 2001858:	00c00404 	movi	r3,16
 200185c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2001860:	e0bfff17 	ldw	r2,-4(fp)
 2001864:	00c00074 	movhi	r3,1
 2001868:	10c01015 	stw	r3,64(r2)
 200186c:	00005706 	br	20019cc <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 2001870:	e0bfff17 	ldw	r2,-4(fp)
 2001874:	10802f17 	ldw	r2,188(r2)
 2001878:	10800498 	cmpnei	r2,r2,18
 200187c:	10000a1e 	bne	r2,zero,20018a8 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 2001880:	e0bfff17 	ldw	r2,-4(fp)
 2001884:	00c00234 	movhi	r3,8
 2001888:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 200188c:	e0bfff17 	ldw	r2,-4(fp)
 2001890:	00c00204 	movi	r3,8
 2001894:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2001898:	e0bfff17 	ldw	r2,-4(fp)
 200189c:	00c00074 	movhi	r3,1
 20018a0:	10c01015 	stw	r3,64(r2)
 20018a4:	00004906 	br	20019cc <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 20018a8:	e0bfff17 	ldw	r2,-4(fp)
 20018ac:	10802f17 	ldw	r2,188(r2)
 20018b0:	10800418 	cmpnei	r2,r2,16
 20018b4:	10000a1e 	bne	r2,zero,20018e0 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 20018b8:	e0bfff17 	ldw	r2,-4(fp)
 20018bc:	00c000b4 	movhi	r3,2
 20018c0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 20018c4:	e0bfff17 	ldw	r2,-4(fp)
 20018c8:	00c00104 	movi	r3,4
 20018cc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 20018d0:	e0bfff17 	ldw	r2,-4(fp)
 20018d4:	00e00014 	movui	r3,32768
 20018d8:	10c01015 	stw	r3,64(r2)
 20018dc:	00003b06 	br	20019cc <alt_epcs_flash_query+0x240>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 20018e0:	e0bfff17 	ldw	r2,-4(fp)
 20018e4:	10802d17 	ldw	r2,180(r2)
 20018e8:	1009883a 	mov	r4,r2
 20018ec:	20030e00 	call	20030e0 <epcs_read_device_id>
 20018f0:	e0ffff17 	ldw	r3,-4(fp)
 20018f4:	18802f15 	stw	r2,188(r3)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 20018f8:	e0bfff17 	ldw	r2,-4(fp)
 20018fc:	10c02f17 	ldw	r3,188(r2)
 2001900:	00804034 	movhi	r2,256
 2001904:	10bfffc4 	addi	r2,r2,-1
 2001908:	1886703a 	and	r3,r3,r2
 200190c:	00800874 	movhi	r2,33
 2001910:	10ae8604 	addi	r2,r2,-17896
 2001914:	18800a1e 	bne	r3,r2,2001940 <alt_epcs_flash_query+0x1b4>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2001918:	e0bfff17 	ldw	r2,-4(fp)
 200191c:	00c04034 	movhi	r3,256
 2001920:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 2001924:	e0bfff17 	ldw	r2,-4(fp)
 2001928:	00c04004 	movi	r3,256
 200192c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2001930:	e0bfff17 	ldw	r2,-4(fp)
 2001934:	00c00074 	movhi	r3,1
 2001938:	10c01015 	stw	r3,64(r2)
 200193c:	00002306 	br	20019cc <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 2001940:	e0bfff17 	ldw	r2,-4(fp)
 2001944:	10802f17 	ldw	r2,188(r2)
 2001948:	10803fcc 	andi	r2,r2,255
 200194c:	10800618 	cmpnei	r2,r2,24
 2001950:	10000a1e 	bne	r2,zero,200197c <alt_epcs_flash_query+0x1f0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2001954:	e0bfff17 	ldw	r2,-4(fp)
 2001958:	00c04034 	movhi	r3,256
 200195c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 2001960:	e0bfff17 	ldw	r2,-4(fp)
 2001964:	00c01004 	movi	r3,64
 2001968:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 200196c:	e0bfff17 	ldw	r2,-4(fp)
 2001970:	00c00134 	movhi	r3,4
 2001974:	10c01015 	stw	r3,64(r2)
 2001978:	00001406 	br	20019cc <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 200197c:	e0bfff17 	ldw	r2,-4(fp)
 2001980:	10802f17 	ldw	r2,188(r2)
 2001984:	10803fcc 	andi	r2,r2,255
 2001988:	10800658 	cmpnei	r2,r2,25
 200198c:	10000d1e 	bne	r2,zero,20019c4 <alt_epcs_flash_query+0x238>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 2001990:	e0bfff17 	ldw	r2,-4(fp)
 2001994:	00c08034 	movhi	r3,512
 2001998:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 200199c:	e0bfff17 	ldw	r2,-4(fp)
 20019a0:	00c08004 	movi	r3,512
 20019a4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 20019a8:	e0bfff17 	ldw	r2,-4(fp)
 20019ac:	00c00074 	movhi	r3,1
 20019b0:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 20019b4:	e0bfff17 	ldw	r2,-4(fp)
 20019b8:	00c00044 	movi	r3,1
 20019bc:	10c03115 	stw	r3,196(r2)
 20019c0:	00000206 	br	20019cc <alt_epcs_flash_query+0x240>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 20019c4:	00bffb44 	movi	r2,-19
 20019c8:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 20019cc:	e0bfff17 	ldw	r2,-4(fp)
 20019d0:	10800e17 	ldw	r2,56(r2)
 20019d4:	1007883a 	mov	r3,r2
 20019d8:	e0bfff17 	ldw	r2,-4(fp)
 20019dc:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 20019e0:	e0bfff17 	ldw	r2,-4(fp)
 20019e4:	00c00044 	movi	r3,1
 20019e8:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 20019ec:	e0bfff17 	ldw	r2,-4(fp)
 20019f0:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 20019f4:	e0bfff17 	ldw	r2,-4(fp)
 20019f8:	00c04004 	movi	r3,256
 20019fc:	10c03015 	stw	r3,192(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 2001a00:	e0bffe17 	ldw	r2,-8(fp)
}
 2001a04:	e037883a 	mov	sp,fp
 2001a08:	dfc00117 	ldw	ra,4(sp)
 2001a0c:	df000017 	ldw	fp,0(sp)
 2001a10:	dec00204 	addi	sp,sp,8
 2001a14:	f800283a 	ret

02001a18 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 2001a18:	deffee04 	addi	sp,sp,-72
 2001a1c:	dfc01115 	stw	ra,68(sp)
 2001a20:	df001015 	stw	fp,64(sp)
 2001a24:	df001004 	addi	fp,sp,64
 2001a28:	e13ffc15 	stw	r4,-16(fp)
 2001a2c:	e17ffd15 	stw	r5,-12(fp)
 2001a30:	e1bffe15 	stw	r6,-8(fp)
 2001a34:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2001a38:	00800804 	movi	r2,32
 2001a3c:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 2001a40:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 2001a44:	00002606 	br	2001ae0 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 2001a48:	e0bff117 	ldw	r2,-60(fp)
 2001a4c:	e0ffff17 	ldw	r3,-4(fp)
 2001a50:	1880012e 	bgeu	r3,r2,2001a58 <alt_epcs_flash_memcmp+0x40>
 2001a54:	1805883a 	mov	r2,r3
 2001a58:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2001a5c:	e0fffe17 	ldw	r3,-8(fp)
 2001a60:	e0bff017 	ldw	r2,-64(fp)
 2001a64:	1887883a 	add	r3,r3,r2
 2001a68:	e0bff404 	addi	r2,fp,-48
 2001a6c:	e13ffc17 	ldw	r4,-16(fp)
 2001a70:	180b883a 	mov	r5,r3
 2001a74:	100d883a 	mov	r6,r2
 2001a78:	e1fff217 	ldw	r7,-56(fp)
 2001a7c:	2001ff80 	call	2001ff8 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2001a80:	1000020e 	bge	r2,zero,2001a8c <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 2001a84:	00bfffc4 	movi	r2,-1
 2001a88:	00001806 	br	2001aec <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2001a8c:	e0bff017 	ldw	r2,-64(fp)
 2001a90:	e0fffd17 	ldw	r3,-12(fp)
 2001a94:	1889883a 	add	r4,r3,r2
 2001a98:	e0bff217 	ldw	r2,-56(fp)
 2001a9c:	e0fff404 	addi	r3,fp,-48
 2001aa0:	180b883a 	mov	r5,r3
 2001aa4:	100d883a 	mov	r6,r2
 2001aa8:	20041fc0 	call	20041fc <memcmp>
 2001aac:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 2001ab0:	e0bff317 	ldw	r2,-52(fp)
 2001ab4:	10000226 	beq	r2,zero,2001ac0 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
 2001ab8:	e0bff317 	ldw	r2,-52(fp)
 2001abc:	00000b06 	br	2001aec <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
 2001ac0:	e0bff217 	ldw	r2,-56(fp)
 2001ac4:	e0ffff17 	ldw	r3,-4(fp)
 2001ac8:	1885c83a 	sub	r2,r3,r2
 2001acc:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 2001ad0:	e0fff017 	ldw	r3,-64(fp)
 2001ad4:	e0bff217 	ldw	r2,-56(fp)
 2001ad8:	1885883a 	add	r2,r3,r2
 2001adc:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 2001ae0:	e0bfff17 	ldw	r2,-4(fp)
 2001ae4:	103fd81e 	bne	r2,zero,2001a48 <__reset+0xfdff8a48>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 2001ae8:	0005883a 	mov	r2,zero
}
 2001aec:	e037883a 	mov	sp,fp
 2001af0:	dfc00117 	ldw	ra,4(sp)
 2001af4:	df000017 	ldw	fp,0(sp)
 2001af8:	dec00204 	addi	sp,sp,8
 2001afc:	f800283a 	ret

02001b00 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2001b00:	defff404 	addi	sp,sp,-48
 2001b04:	dfc00b15 	stw	ra,44(sp)
 2001b08:	df000a15 	stw	fp,40(sp)
 2001b0c:	df000a04 	addi	fp,sp,40
 2001b10:	e13ffc15 	stw	r4,-16(fp)
 2001b14:	e17ffd15 	stw	r5,-12(fp)
 2001b18:	e1bffe15 	stw	r6,-8(fp)
 2001b1c:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 2001b20:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2001b24:	e03ff815 	stw	zero,-32(fp)
 2001b28:	00008306 	br	2001d38 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2001b2c:	e0fffc17 	ldw	r3,-16(fp)
 2001b30:	e0bff817 	ldw	r2,-32(fp)
 2001b34:	1004913a 	slli	r2,r2,4
 2001b38:	1885883a 	add	r2,r3,r2
 2001b3c:	10800d04 	addi	r2,r2,52
 2001b40:	10800017 	ldw	r2,0(r2)
 2001b44:	e0fffd17 	ldw	r3,-12(fp)
 2001b48:	18807816 	blt	r3,r2,2001d2c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 2001b4c:	e0fffc17 	ldw	r3,-16(fp)
 2001b50:	e0bff817 	ldw	r2,-32(fp)
 2001b54:	1004913a 	slli	r2,r2,4
 2001b58:	1885883a 	add	r2,r3,r2
 2001b5c:	10800d04 	addi	r2,r2,52
 2001b60:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 2001b64:	e13ffc17 	ldw	r4,-16(fp)
 2001b68:	e0bff817 	ldw	r2,-32(fp)
 2001b6c:	1004913a 	slli	r2,r2,4
 2001b70:	2085883a 	add	r2,r4,r2
 2001b74:	10800e04 	addi	r2,r2,56
 2001b78:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 2001b7c:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2001b80:	e0fffd17 	ldw	r3,-12(fp)
 2001b84:	1880690e 	bge	r3,r2,2001d2c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 2001b88:	e0fffc17 	ldw	r3,-16(fp)
 2001b8c:	e0bff817 	ldw	r2,-32(fp)
 2001b90:	1004913a 	slli	r2,r2,4
 2001b94:	1885883a 	add	r2,r3,r2
 2001b98:	10800d04 	addi	r2,r2,52
 2001b9c:	10800017 	ldw	r2,0(r2)
 2001ba0:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2001ba4:	e03ff915 	stw	zero,-28(fp)
 2001ba8:	00005806 	br	2001d0c <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 2001bac:	e0fffd17 	ldw	r3,-12(fp)
 2001bb0:	e0bffa17 	ldw	r2,-24(fp)
 2001bb4:	18804916 	blt	r3,r2,2001cdc <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 2001bb8:	e0fffc17 	ldw	r3,-16(fp)
 2001bbc:	e0bff817 	ldw	r2,-32(fp)
 2001bc0:	10800104 	addi	r2,r2,4
 2001bc4:	1004913a 	slli	r2,r2,4
 2001bc8:	1885883a 	add	r2,r3,r2
 2001bcc:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 2001bd0:	e0bffa17 	ldw	r2,-24(fp)
 2001bd4:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 2001bd8:	e0fffd17 	ldw	r3,-12(fp)
 2001bdc:	18803f0e 	bge	r3,r2,2001cdc <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 2001be0:	e0fffc17 	ldw	r3,-16(fp)
 2001be4:	e0bff817 	ldw	r2,-32(fp)
 2001be8:	10800104 	addi	r2,r2,4
 2001bec:	1004913a 	slli	r2,r2,4
 2001bf0:	1885883a 	add	r2,r3,r2
 2001bf4:	10c00017 	ldw	r3,0(r2)
 2001bf8:	e0bffa17 	ldw	r2,-24(fp)
 2001bfc:	1887883a 	add	r3,r3,r2
 2001c00:	e0bffd17 	ldw	r2,-12(fp)
 2001c04:	1885c83a 	sub	r2,r3,r2
 2001c08:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2001c0c:	e0fffb17 	ldw	r3,-20(fp)
 2001c10:	e0bfff17 	ldw	r2,-4(fp)
 2001c14:	1880010e 	bge	r3,r2,2001c1c <alt_epcs_flash_write+0x11c>
 2001c18:	1805883a 	mov	r2,r3
 2001c1c:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2001c20:	e0bffb17 	ldw	r2,-20(fp)
 2001c24:	e13ffc17 	ldw	r4,-16(fp)
 2001c28:	e17ffe17 	ldw	r5,-8(fp)
 2001c2c:	e1bffd17 	ldw	r6,-12(fp)
 2001c30:	100f883a 	mov	r7,r2
 2001c34:	2001a180 	call	2001a18 <alt_epcs_flash_memcmp>
 2001c38:	10001226 	beq	r2,zero,2001c84 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2001c3c:	e0bffc17 	ldw	r2,-16(fp)
 2001c40:	10800817 	ldw	r2,32(r2)
 2001c44:	e13ffc17 	ldw	r4,-16(fp)
 2001c48:	e17ffa17 	ldw	r5,-24(fp)
 2001c4c:	103ee83a 	callr	r2
 2001c50:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 2001c54:	e0bff717 	ldw	r2,-36(fp)
 2001c58:	10000a1e 	bne	r2,zero,2001c84 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 2001c5c:	e0bffc17 	ldw	r2,-16(fp)
 2001c60:	10800917 	ldw	r2,36(r2)
 2001c64:	e0fffb17 	ldw	r3,-20(fp)
 2001c68:	d8c00015 	stw	r3,0(sp)
 2001c6c:	e13ffc17 	ldw	r4,-16(fp)
 2001c70:	e17ffa17 	ldw	r5,-24(fp)
 2001c74:	e1bffd17 	ldw	r6,-12(fp)
 2001c78:	e1fffe17 	ldw	r7,-8(fp)
 2001c7c:	103ee83a 	callr	r2
 2001c80:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 2001c84:	e0ffff17 	ldw	r3,-4(fp)
 2001c88:	e0bffb17 	ldw	r2,-20(fp)
 2001c8c:	18802e26 	beq	r3,r2,2001d48 <alt_epcs_flash_write+0x248>
 2001c90:	e0bff717 	ldw	r2,-36(fp)
 2001c94:	10002c1e 	bne	r2,zero,2001d48 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 2001c98:	e0ffff17 	ldw	r3,-4(fp)
 2001c9c:	e0bffb17 	ldw	r2,-20(fp)
 2001ca0:	1885c83a 	sub	r2,r3,r2
 2001ca4:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2001ca8:	e0fffc17 	ldw	r3,-16(fp)
 2001cac:	e0bff817 	ldw	r2,-32(fp)
 2001cb0:	10800104 	addi	r2,r2,4
 2001cb4:	1004913a 	slli	r2,r2,4
 2001cb8:	1885883a 	add	r2,r3,r2
 2001cbc:	10c00017 	ldw	r3,0(r2)
 2001cc0:	e0bffa17 	ldw	r2,-24(fp)
 2001cc4:	1885883a 	add	r2,r3,r2
 2001cc8:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2001ccc:	e0bffb17 	ldw	r2,-20(fp)
 2001cd0:	e0fffe17 	ldw	r3,-8(fp)
 2001cd4:	1885883a 	add	r2,r3,r2
 2001cd8:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2001cdc:	e0fffc17 	ldw	r3,-16(fp)
 2001ce0:	e0bff817 	ldw	r2,-32(fp)
 2001ce4:	10800104 	addi	r2,r2,4
 2001ce8:	1004913a 	slli	r2,r2,4
 2001cec:	1885883a 	add	r2,r3,r2
 2001cf0:	10800017 	ldw	r2,0(r2)
 2001cf4:	e0fffa17 	ldw	r3,-24(fp)
 2001cf8:	1885883a 	add	r2,r3,r2
 2001cfc:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2001d00:	e0bff917 	ldw	r2,-28(fp)
 2001d04:	10800044 	addi	r2,r2,1
 2001d08:	e0bff915 	stw	r2,-28(fp)
 2001d0c:	e0fffc17 	ldw	r3,-16(fp)
 2001d10:	e0bff817 	ldw	r2,-32(fp)
 2001d14:	1004913a 	slli	r2,r2,4
 2001d18:	1885883a 	add	r2,r3,r2
 2001d1c:	10800f04 	addi	r2,r2,60
 2001d20:	10800017 	ldw	r2,0(r2)
 2001d24:	e0fff917 	ldw	r3,-28(fp)
 2001d28:	18bfa016 	blt	r3,r2,2001bac <__reset+0xfdff8bac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2001d2c:	e0bff817 	ldw	r2,-32(fp)
 2001d30:	10800044 	addi	r2,r2,1
 2001d34:	e0bff815 	stw	r2,-32(fp)
 2001d38:	e0bffc17 	ldw	r2,-16(fp)
 2001d3c:	10800c17 	ldw	r2,48(r2)
 2001d40:	e0fff817 	ldw	r3,-32(fp)
 2001d44:	18bf7916 	blt	r3,r2,2001b2c <__reset+0xfdff8b2c>
      }
    }
  }

finished:
  return ret_code;
 2001d48:	e0bff717 	ldw	r2,-36(fp)
}
 2001d4c:	e037883a 	mov	sp,fp
 2001d50:	dfc00117 	ldw	ra,4(sp)
 2001d54:	df000017 	ldw	fp,0(sp)
 2001d58:	dec00204 	addi	sp,sp,8
 2001d5c:	f800283a 	ret

02001d60 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2001d60:	defffa04 	addi	sp,sp,-24
 2001d64:	df000515 	stw	fp,20(sp)
 2001d68:	df000504 	addi	fp,sp,20
 2001d6c:	e13ffd15 	stw	r4,-12(fp)
 2001d70:	e17ffe15 	stw	r5,-8(fp)
 2001d74:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 2001d78:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2001d7c:	e0bffd17 	ldw	r2,-12(fp)
 2001d80:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 2001d84:	e0bffc17 	ldw	r2,-16(fp)
 2001d88:	10c00c17 	ldw	r3,48(r2)
 2001d8c:	e0bfff17 	ldw	r2,-4(fp)
 2001d90:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 2001d94:	e0bffc17 	ldw	r2,-16(fp)
 2001d98:	10800c17 	ldw	r2,48(r2)
 2001d9c:	1000031e 	bne	r2,zero,2001dac <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 2001da0:	00bffec4 	movi	r2,-5
 2001da4:	e0bffb15 	stw	r2,-20(fp)
 2001da8:	00000b06 	br	2001dd8 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 2001dac:	e0bffc17 	ldw	r2,-16(fp)
 2001db0:	10800c17 	ldw	r2,48(r2)
 2001db4:	10800250 	cmplti	r2,r2,9
 2001db8:	1000031e 	bne	r2,zero,2001dc8 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 2001dbc:	00bffd04 	movi	r2,-12
 2001dc0:	e0bffb15 	stw	r2,-20(fp)
 2001dc4:	00000406 	br	2001dd8 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 2001dc8:	e0bffc17 	ldw	r2,-16(fp)
 2001dcc:	10c00d04 	addi	r3,r2,52
 2001dd0:	e0bffe17 	ldw	r2,-8(fp)
 2001dd4:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2001dd8:	e0bffb17 	ldw	r2,-20(fp)
}
 2001ddc:	e037883a 	mov	sp,fp
 2001de0:	df000017 	ldw	fp,0(sp)
 2001de4:	dec00104 	addi	sp,sp,4
 2001de8:	f800283a 	ret

02001dec <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 2001dec:	defff904 	addi	sp,sp,-28
 2001df0:	df000615 	stw	fp,24(sp)
 2001df4:	df000604 	addi	fp,sp,24
 2001df8:	e13ffe15 	stw	r4,-8(fp)
 2001dfc:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2001e00:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2001e04:	e0bffe17 	ldw	r2,-8(fp)
 2001e08:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 2001e0c:	e0bffb17 	ldw	r2,-20(fp)
 2001e10:	10800c17 	ldw	r2,48(r2)
 2001e14:	10bfffc4 	addi	r2,r2,-1
 2001e18:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2001e1c:	e0fffb17 	ldw	r3,-20(fp)
 2001e20:	e0bffc17 	ldw	r2,-16(fp)
 2001e24:	1004913a 	slli	r2,r2,4
 2001e28:	1885883a 	add	r2,r3,r2
 2001e2c:	10800d04 	addi	r2,r2,52
 2001e30:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 2001e34:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 2001e38:	e13ffb17 	ldw	r4,-20(fp)
 2001e3c:	e0bffc17 	ldw	r2,-16(fp)
 2001e40:	1004913a 	slli	r2,r2,4
 2001e44:	2085883a 	add	r2,r4,r2
 2001e48:	10800e04 	addi	r2,r2,56
 2001e4c:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2001e50:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 2001e54:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 2001e58:	e0bfff17 	ldw	r2,-4(fp)
 2001e5c:	e0fffd17 	ldw	r3,-12(fp)
 2001e60:	1880022e 	bgeu	r3,r2,2001e6c <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 2001e64:	00bffec4 	movi	r2,-5
 2001e68:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 2001e6c:	e0bffa17 	ldw	r2,-24(fp)
}
 2001e70:	e037883a 	mov	sp,fp
 2001e74:	df000017 	ldw	fp,0(sp)
 2001e78:	dec00104 	addi	sp,sp,4
 2001e7c:	f800283a 	ret

02001e80 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 2001e80:	defffa04 	addi	sp,sp,-24
 2001e84:	dfc00515 	stw	ra,20(sp)
 2001e88:	df000415 	stw	fp,16(sp)
 2001e8c:	df000404 	addi	fp,sp,16
 2001e90:	e13ffe15 	stw	r4,-8(fp)
 2001e94:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2001e98:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2001e9c:	e0bffe17 	ldw	r2,-8(fp)
 2001ea0:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 2001ea4:	e13ffe17 	ldw	r4,-8(fp)
 2001ea8:	e17fff17 	ldw	r5,-4(fp)
 2001eac:	2001dec0 	call	2001dec <alt_epcs_test_address>
 2001eb0:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 2001eb4:	e0bffc17 	ldw	r2,-16(fp)
 2001eb8:	10000816 	blt	r2,zero,2001edc <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 2001ebc:	e0bffd17 	ldw	r2,-12(fp)
 2001ec0:	11002d17 	ldw	r4,180(r2)
 2001ec4:	e0ffff17 	ldw	r3,-4(fp)
 2001ec8:	e0bffd17 	ldw	r2,-12(fp)
 2001ecc:	10803117 	ldw	r2,196(r2)
 2001ed0:	180b883a 	mov	r5,r3
 2001ed4:	100d883a 	mov	r6,r2
 2001ed8:	2002cb80 	call	2002cb8 <epcs_sector_erase>
  }
  return ret_code;
 2001edc:	e0bffc17 	ldw	r2,-16(fp)
}
 2001ee0:	e037883a 	mov	sp,fp
 2001ee4:	dfc00117 	ldw	ra,4(sp)
 2001ee8:	df000017 	ldw	fp,0(sp)
 2001eec:	dec00204 	addi	sp,sp,8
 2001ef0:	f800283a 	ret

02001ef4 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 2001ef4:	defff404 	addi	sp,sp,-48
 2001ef8:	dfc00b15 	stw	ra,44(sp)
 2001efc:	df000a15 	stw	fp,40(sp)
 2001f00:	df000a04 	addi	fp,sp,40
 2001f04:	e13ffc15 	stw	r4,-16(fp)
 2001f08:	e17ffd15 	stw	r5,-12(fp)
 2001f0c:	e1bffe15 	stw	r6,-8(fp)
 2001f10:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2001f14:	e0bffc17 	ldw	r2,-16(fp)
 2001f18:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 2001f1c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 2001f20:	e13ffc17 	ldw	r4,-16(fp)
 2001f24:	e17ffe17 	ldw	r5,-8(fp)
 2001f28:	2001dec0 	call	2001dec <alt_epcs_test_address>
 2001f2c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 2001f30:	e0bff917 	ldw	r2,-28(fp)
 2001f34:	10002a16 	blt	r2,zero,2001fe0 <alt_epcs_flash_write_block+0xec>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2001f38:	00002706 	br	2001fd8 <alt_epcs_flash_write_block+0xe4>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2001f3c:	e0bff817 	ldw	r2,-32(fp)
 2001f40:	10c03017 	ldw	r3,192(r2)
 2001f44:	e0bffe17 	ldw	r2,-8(fp)
 2001f48:	1887883a 	add	r3,r3,r2
 2001f4c:	e0bff817 	ldw	r2,-32(fp)
 2001f50:	10803017 	ldw	r2,192(r2)
 2001f54:	0085c83a 	sub	r2,zero,r2
 2001f58:	1884703a 	and	r2,r3,r2
 2001f5c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 2001f60:	e0fffa17 	ldw	r3,-24(fp)
 2001f64:	e0bffe17 	ldw	r2,-8(fp)
 2001f68:	1885c83a 	sub	r2,r3,r2
 2001f6c:	e0c00217 	ldw	r3,8(fp)
 2001f70:	1880010e 	bge	r3,r2,2001f78 <alt_epcs_flash_write_block+0x84>
 2001f74:	1805883a 	mov	r2,r3
 2001f78:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 2001f7c:	e0bff817 	ldw	r2,-32(fp)
 2001f80:	10c02d17 	ldw	r3,180(r2)
 2001f84:	e0bff717 	ldw	r2,-36(fp)
 2001f88:	e13fff17 	ldw	r4,-4(fp)
 2001f8c:	2085883a 	add	r2,r4,r2
          f->four_bytes_mode);
 2001f90:	e13ff817 	ldw	r4,-32(fp)
    while (length)
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
      length_of_current_write = MIN(length, next_page_start - data_offset);

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 2001f94:	21003117 	ldw	r4,196(r4)
 2001f98:	d9000015 	stw	r4,0(sp)
 2001f9c:	1809883a 	mov	r4,r3
 2001fa0:	e17ffe17 	ldw	r5,-8(fp)
 2001fa4:	100d883a 	mov	r6,r2
 2001fa8:	e1fffb17 	ldw	r7,-20(fp)
 2001fac:	2002f5c0 	call	2002f5c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 2001fb0:	e0c00217 	ldw	r3,8(fp)
 2001fb4:	e0bffb17 	ldw	r2,-20(fp)
 2001fb8:	1885c83a 	sub	r2,r3,r2
 2001fbc:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 2001fc0:	e0fff717 	ldw	r3,-36(fp)
 2001fc4:	e0bffb17 	ldw	r2,-20(fp)
 2001fc8:	1885883a 	add	r2,r3,r2
 2001fcc:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2001fd0:	e0bffa17 	ldw	r2,-24(fp)
 2001fd4:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2001fd8:	e0800217 	ldw	r2,8(fp)
 2001fdc:	103fd71e 	bne	r2,zero,2001f3c <__reset+0xfdff8f3c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 2001fe0:	e0bff917 	ldw	r2,-28(fp)
}
 2001fe4:	e037883a 	mov	sp,fp
 2001fe8:	dfc00117 	ldw	ra,4(sp)
 2001fec:	df000017 	ldw	fp,0(sp)
 2001ff0:	dec00204 	addi	sp,sp,8
 2001ff4:	f800283a 	ret

02001ff8 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 2001ff8:	defff704 	addi	sp,sp,-36
 2001ffc:	dfc00815 	stw	ra,32(sp)
 2002000:	df000715 	stw	fp,28(sp)
 2002004:	df000704 	addi	fp,sp,28
 2002008:	e13ffc15 	stw	r4,-16(fp)
 200200c:	e17ffd15 	stw	r5,-12(fp)
 2002010:	e1bffe15 	stw	r6,-8(fp)
 2002014:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 2002018:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200201c:	e0bffc17 	ldw	r2,-16(fp)
 2002020:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 2002024:	e13ffc17 	ldw	r4,-16(fp)
 2002028:	e17ffd17 	ldw	r5,-12(fp)
 200202c:	2001dec0 	call	2001dec <alt_epcs_test_address>
 2002030:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 2002034:	e0bffa17 	ldw	r2,-24(fp)
 2002038:	10000f16 	blt	r2,zero,2002078 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 200203c:	e0bffb17 	ldw	r2,-20(fp)
 2002040:	10802d17 	ldw	r2,180(r2)
                                f->four_bytes_mode);
 2002044:	e0fffb17 	ldw	r3,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);

  if (ret_code >= 0)
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 2002048:	18c03117 	ldw	r3,196(r3)
 200204c:	d8c00015 	stw	r3,0(sp)
 2002050:	1009883a 	mov	r4,r2
 2002054:	e17ffd17 	ldw	r5,-12(fp)
 2002058:	e1bffe17 	ldw	r6,-8(fp)
 200205c:	e1ffff17 	ldw	r7,-4(fp)
 2002060:	2002db00 	call	2002db0 <epcs_read_buffer>
 2002064:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 2002068:	e0fffa17 	ldw	r3,-24(fp)
 200206c:	e0bfff17 	ldw	r2,-4(fp)
 2002070:	1880011e 	bne	r3,r2,2002078 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 2002074:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 2002078:	e0bffa17 	ldw	r2,-24(fp)
}
 200207c:	e037883a 	mov	sp,fp
 2002080:	dfc00117 	ldw	ra,4(sp)
 2002084:	df000017 	ldw	fp,0(sp)
 2002088:	dec00204 	addi	sp,sp,8
 200208c:	f800283a 	ret

02002090 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2002090:	defffa04 	addi	sp,sp,-24
 2002094:	dfc00515 	stw	ra,20(sp)
 2002098:	df000415 	stw	fp,16(sp)
 200209c:	df000404 	addi	fp,sp,16
 20020a0:	e13ffd15 	stw	r4,-12(fp)
 20020a4:	e17ffe15 	stw	r5,-8(fp)
 20020a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20020ac:	e0bffd17 	ldw	r2,-12(fp)
 20020b0:	10800017 	ldw	r2,0(r2)
 20020b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 20020b8:	e0bffc17 	ldw	r2,-16(fp)
 20020bc:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 20020c0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 20020c4:	10800217 	ldw	r2,8(r2)
 20020c8:	1809883a 	mov	r4,r3
 20020cc:	e17ffe17 	ldw	r5,-8(fp)
 20020d0:	e1bfff17 	ldw	r6,-4(fp)
 20020d4:	100f883a 	mov	r7,r2
 20020d8:	20026b80 	call	20026b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 20020dc:	e037883a 	mov	sp,fp
 20020e0:	dfc00117 	ldw	ra,4(sp)
 20020e4:	df000017 	ldw	fp,0(sp)
 20020e8:	dec00204 	addi	sp,sp,8
 20020ec:	f800283a 	ret

020020f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20020f0:	defffa04 	addi	sp,sp,-24
 20020f4:	dfc00515 	stw	ra,20(sp)
 20020f8:	df000415 	stw	fp,16(sp)
 20020fc:	df000404 	addi	fp,sp,16
 2002100:	e13ffd15 	stw	r4,-12(fp)
 2002104:	e17ffe15 	stw	r5,-8(fp)
 2002108:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200210c:	e0bffd17 	ldw	r2,-12(fp)
 2002110:	10800017 	ldw	r2,0(r2)
 2002114:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2002118:	e0bffc17 	ldw	r2,-16(fp)
 200211c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 2002120:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2002124:	10800217 	ldw	r2,8(r2)
 2002128:	1809883a 	mov	r4,r3
 200212c:	e17ffe17 	ldw	r5,-8(fp)
 2002130:	e1bfff17 	ldw	r6,-4(fp)
 2002134:	100f883a 	mov	r7,r2
 2002138:	20028d00 	call	20028d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200213c:	e037883a 	mov	sp,fp
 2002140:	dfc00117 	ldw	ra,4(sp)
 2002144:	df000017 	ldw	fp,0(sp)
 2002148:	dec00204 	addi	sp,sp,8
 200214c:	f800283a 	ret

02002150 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2002150:	defffc04 	addi	sp,sp,-16
 2002154:	dfc00315 	stw	ra,12(sp)
 2002158:	df000215 	stw	fp,8(sp)
 200215c:	df000204 	addi	fp,sp,8
 2002160:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2002164:	e0bfff17 	ldw	r2,-4(fp)
 2002168:	10800017 	ldw	r2,0(r2)
 200216c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2002170:	e0bffe17 	ldw	r2,-8(fp)
 2002174:	10c00a04 	addi	r3,r2,40
 2002178:	e0bfff17 	ldw	r2,-4(fp)
 200217c:	10800217 	ldw	r2,8(r2)
 2002180:	1809883a 	mov	r4,r3
 2002184:	100b883a 	mov	r5,r2
 2002188:	200255c0 	call	200255c <altera_avalon_jtag_uart_close>
}
 200218c:	e037883a 	mov	sp,fp
 2002190:	dfc00117 	ldw	ra,4(sp)
 2002194:	df000017 	ldw	fp,0(sp)
 2002198:	dec00204 	addi	sp,sp,8
 200219c:	f800283a 	ret

020021a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 20021a0:	defffa04 	addi	sp,sp,-24
 20021a4:	dfc00515 	stw	ra,20(sp)
 20021a8:	df000415 	stw	fp,16(sp)
 20021ac:	df000404 	addi	fp,sp,16
 20021b0:	e13ffd15 	stw	r4,-12(fp)
 20021b4:	e17ffe15 	stw	r5,-8(fp)
 20021b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 20021bc:	e0bffd17 	ldw	r2,-12(fp)
 20021c0:	10800017 	ldw	r2,0(r2)
 20021c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 20021c8:	e0bffc17 	ldw	r2,-16(fp)
 20021cc:	10800a04 	addi	r2,r2,40
 20021d0:	1009883a 	mov	r4,r2
 20021d4:	e17ffe17 	ldw	r5,-8(fp)
 20021d8:	e1bfff17 	ldw	r6,-4(fp)
 20021dc:	20025c40 	call	20025c4 <altera_avalon_jtag_uart_ioctl>
}
 20021e0:	e037883a 	mov	sp,fp
 20021e4:	dfc00117 	ldw	ra,4(sp)
 20021e8:	df000017 	ldw	fp,0(sp)
 20021ec:	dec00204 	addi	sp,sp,8
 20021f0:	f800283a 	ret

020021f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 20021f4:	defffa04 	addi	sp,sp,-24
 20021f8:	dfc00515 	stw	ra,20(sp)
 20021fc:	df000415 	stw	fp,16(sp)
 2002200:	df000404 	addi	fp,sp,16
 2002204:	e13ffd15 	stw	r4,-12(fp)
 2002208:	e17ffe15 	stw	r5,-8(fp)
 200220c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2002210:	e0bffd17 	ldw	r2,-12(fp)
 2002214:	00c00044 	movi	r3,1
 2002218:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 200221c:	e0bffd17 	ldw	r2,-12(fp)
 2002220:	10800017 	ldw	r2,0(r2)
 2002224:	10800104 	addi	r2,r2,4
 2002228:	e0fffd17 	ldw	r3,-12(fp)
 200222c:	18c00817 	ldw	r3,32(r3)
 2002230:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2002234:	e0fffe17 	ldw	r3,-8(fp)
 2002238:	e0bfff17 	ldw	r2,-4(fp)
 200223c:	d8000015 	stw	zero,0(sp)
 2002240:	1809883a 	mov	r4,r3
 2002244:	100b883a 	mov	r5,r2
 2002248:	01808034 	movhi	r6,512
 200224c:	3188ad04 	addi	r6,r6,8884
 2002250:	e1fffd17 	ldw	r7,-12(fp)
 2002254:	20035f00 	call	20035f0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2002258:	e0bffd17 	ldw	r2,-12(fp)
 200225c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2002260:	e0bffd17 	ldw	r2,-12(fp)
 2002264:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2002268:	00808074 	movhi	r2,513
 200226c:	1097f204 	addi	r2,r2,24520
 2002270:	10800017 	ldw	r2,0(r2)
 2002274:	1809883a 	mov	r4,r3
 2002278:	100b883a 	mov	r5,r2
 200227c:	01808034 	movhi	r6,512
 2002280:	31892e04 	addi	r6,r6,9400
 2002284:	e1fffd17 	ldw	r7,-12(fp)
 2002288:	20010a80 	call	20010a8 <alt_alarm_start>
 200228c:	1000040e 	bge	r2,zero,20022a0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2002290:	e0bffd17 	ldw	r2,-12(fp)
 2002294:	00e00034 	movhi	r3,32768
 2002298:	18ffffc4 	addi	r3,r3,-1
 200229c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 20022a0:	e037883a 	mov	sp,fp
 20022a4:	dfc00117 	ldw	ra,4(sp)
 20022a8:	df000017 	ldw	fp,0(sp)
 20022ac:	dec00204 	addi	sp,sp,8
 20022b0:	f800283a 	ret

020022b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 20022b4:	defff804 	addi	sp,sp,-32
 20022b8:	df000715 	stw	fp,28(sp)
 20022bc:	df000704 	addi	fp,sp,28
 20022c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 20022c4:	e0bfff17 	ldw	r2,-4(fp)
 20022c8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 20022cc:	e0bffb17 	ldw	r2,-20(fp)
 20022d0:	10800017 	ldw	r2,0(r2)
 20022d4:	e0bffc15 	stw	r2,-16(fp)
 20022d8:	00000106 	br	20022e0 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 20022dc:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20022e0:	e0bffc17 	ldw	r2,-16(fp)
 20022e4:	10800104 	addi	r2,r2,4
 20022e8:	10800037 	ldwio	r2,0(r2)
 20022ec:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 20022f0:	e0bffd17 	ldw	r2,-12(fp)
 20022f4:	1080c00c 	andi	r2,r2,768
 20022f8:	10006a26 	beq	r2,zero,20024a4 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 20022fc:	e0bffd17 	ldw	r2,-12(fp)
 2002300:	1080400c 	andi	r2,r2,256
 2002304:	10003326 	beq	r2,zero,20023d4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2002308:	00800074 	movhi	r2,1
 200230c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2002310:	e0bffb17 	ldw	r2,-20(fp)
 2002314:	10800a17 	ldw	r2,40(r2)
 2002318:	10800044 	addi	r2,r2,1
 200231c:	1081ffcc 	andi	r2,r2,2047
 2002320:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 2002324:	e0bffb17 	ldw	r2,-20(fp)
 2002328:	10c00b17 	ldw	r3,44(r2)
 200232c:	e0bffe17 	ldw	r2,-8(fp)
 2002330:	18801426 	beq	r3,r2,2002384 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2002334:	e0bffc17 	ldw	r2,-16(fp)
 2002338:	10800037 	ldwio	r2,0(r2)
 200233c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2002340:	e0bff917 	ldw	r2,-28(fp)
 2002344:	10a0000c 	andi	r2,r2,32768
 2002348:	10001026 	beq	r2,zero,200238c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200234c:	e0bffb17 	ldw	r2,-20(fp)
 2002350:	10800a17 	ldw	r2,40(r2)
 2002354:	e0fff917 	ldw	r3,-28(fp)
 2002358:	e13ffb17 	ldw	r4,-20(fp)
 200235c:	2085883a 	add	r2,r4,r2
 2002360:	10800e04 	addi	r2,r2,56
 2002364:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2002368:	e0bffb17 	ldw	r2,-20(fp)
 200236c:	10800a17 	ldw	r2,40(r2)
 2002370:	10800044 	addi	r2,r2,1
 2002374:	10c1ffcc 	andi	r3,r2,2047
 2002378:	e0bffb17 	ldw	r2,-20(fp)
 200237c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2002380:	003fe306 	br	2002310 <__reset+0xfdff9310>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 2002384:	0001883a 	nop
 2002388:	00000106 	br	2002390 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 200238c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2002390:	e0bff917 	ldw	r2,-28(fp)
 2002394:	10bfffec 	andhi	r2,r2,65535
 2002398:	10000e26 	beq	r2,zero,20023d4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200239c:	e0bffb17 	ldw	r2,-20(fp)
 20023a0:	10c00817 	ldw	r3,32(r2)
 20023a4:	00bfff84 	movi	r2,-2
 20023a8:	1886703a 	and	r3,r3,r2
 20023ac:	e0bffb17 	ldw	r2,-20(fp)
 20023b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 20023b4:	e0bffc17 	ldw	r2,-16(fp)
 20023b8:	10800104 	addi	r2,r2,4
 20023bc:	e0fffb17 	ldw	r3,-20(fp)
 20023c0:	18c00817 	ldw	r3,32(r3)
 20023c4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20023c8:	e0bffc17 	ldw	r2,-16(fp)
 20023cc:	10800104 	addi	r2,r2,4
 20023d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 20023d4:	e0bffd17 	ldw	r2,-12(fp)
 20023d8:	1080800c 	andi	r2,r2,512
 20023dc:	103fbf26 	beq	r2,zero,20022dc <__reset+0xfdff92dc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 20023e0:	e0bffd17 	ldw	r2,-12(fp)
 20023e4:	1004d43a 	srli	r2,r2,16
 20023e8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 20023ec:	00001406 	br	2002440 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 20023f0:	e0bffc17 	ldw	r2,-16(fp)
 20023f4:	e0fffb17 	ldw	r3,-20(fp)
 20023f8:	18c00d17 	ldw	r3,52(r3)
 20023fc:	e13ffb17 	ldw	r4,-20(fp)
 2002400:	20c7883a 	add	r3,r4,r3
 2002404:	18c20e04 	addi	r3,r3,2104
 2002408:	18c00003 	ldbu	r3,0(r3)
 200240c:	18c03fcc 	andi	r3,r3,255
 2002410:	18c0201c 	xori	r3,r3,128
 2002414:	18ffe004 	addi	r3,r3,-128
 2002418:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200241c:	e0bffb17 	ldw	r2,-20(fp)
 2002420:	10800d17 	ldw	r2,52(r2)
 2002424:	10800044 	addi	r2,r2,1
 2002428:	10c1ffcc 	andi	r3,r2,2047
 200242c:	e0bffb17 	ldw	r2,-20(fp)
 2002430:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2002434:	e0bffa17 	ldw	r2,-24(fp)
 2002438:	10bfffc4 	addi	r2,r2,-1
 200243c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2002440:	e0bffa17 	ldw	r2,-24(fp)
 2002444:	10000526 	beq	r2,zero,200245c <altera_avalon_jtag_uart_irq+0x1a8>
 2002448:	e0bffb17 	ldw	r2,-20(fp)
 200244c:	10c00d17 	ldw	r3,52(r2)
 2002450:	e0bffb17 	ldw	r2,-20(fp)
 2002454:	10800c17 	ldw	r2,48(r2)
 2002458:	18bfe51e 	bne	r3,r2,20023f0 <__reset+0xfdff93f0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200245c:	e0bffa17 	ldw	r2,-24(fp)
 2002460:	103f9e26 	beq	r2,zero,20022dc <__reset+0xfdff92dc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2002464:	e0bffb17 	ldw	r2,-20(fp)
 2002468:	10c00817 	ldw	r3,32(r2)
 200246c:	00bfff44 	movi	r2,-3
 2002470:	1886703a 	and	r3,r3,r2
 2002474:	e0bffb17 	ldw	r2,-20(fp)
 2002478:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200247c:	e0bffb17 	ldw	r2,-20(fp)
 2002480:	10800017 	ldw	r2,0(r2)
 2002484:	10800104 	addi	r2,r2,4
 2002488:	e0fffb17 	ldw	r3,-20(fp)
 200248c:	18c00817 	ldw	r3,32(r3)
 2002490:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2002494:	e0bffc17 	ldw	r2,-16(fp)
 2002498:	10800104 	addi	r2,r2,4
 200249c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 20024a0:	003f8e06 	br	20022dc <__reset+0xfdff92dc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 20024a4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 20024a8:	e037883a 	mov	sp,fp
 20024ac:	df000017 	ldw	fp,0(sp)
 20024b0:	dec00104 	addi	sp,sp,4
 20024b4:	f800283a 	ret

020024b8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 20024b8:	defffc04 	addi	sp,sp,-16
 20024bc:	df000315 	stw	fp,12(sp)
 20024c0:	df000304 	addi	fp,sp,12
 20024c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 20024c8:	e0bfff17 	ldw	r2,-4(fp)
 20024cc:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 20024d0:	e0bffd17 	ldw	r2,-12(fp)
 20024d4:	10800017 	ldw	r2,0(r2)
 20024d8:	10800104 	addi	r2,r2,4
 20024dc:	10800037 	ldwio	r2,0(r2)
 20024e0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 20024e4:	e0bffe17 	ldw	r2,-8(fp)
 20024e8:	1081000c 	andi	r2,r2,1024
 20024ec:	10000a26 	beq	r2,zero,2002518 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 20024f0:	e0bffd17 	ldw	r2,-12(fp)
 20024f4:	10800017 	ldw	r2,0(r2)
 20024f8:	10800104 	addi	r2,r2,4
 20024fc:	e0fffd17 	ldw	r3,-12(fp)
 2002500:	18c00817 	ldw	r3,32(r3)
 2002504:	18c10014 	ori	r3,r3,1024
 2002508:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 200250c:	e0bffd17 	ldw	r2,-12(fp)
 2002510:	10000915 	stw	zero,36(r2)
 2002514:	00000a06 	br	2002540 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2002518:	e0bffd17 	ldw	r2,-12(fp)
 200251c:	10800917 	ldw	r2,36(r2)
 2002520:	00e00034 	movhi	r3,32768
 2002524:	18ffff04 	addi	r3,r3,-4
 2002528:	18800536 	bltu	r3,r2,2002540 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 200252c:	e0bffd17 	ldw	r2,-12(fp)
 2002530:	10800917 	ldw	r2,36(r2)
 2002534:	10c00044 	addi	r3,r2,1
 2002538:	e0bffd17 	ldw	r2,-12(fp)
 200253c:	10c00915 	stw	r3,36(r2)
 2002540:	00808074 	movhi	r2,513
 2002544:	1097f204 	addi	r2,r2,24520
 2002548:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 200254c:	e037883a 	mov	sp,fp
 2002550:	df000017 	ldw	fp,0(sp)
 2002554:	dec00104 	addi	sp,sp,4
 2002558:	f800283a 	ret

0200255c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 200255c:	defffd04 	addi	sp,sp,-12
 2002560:	df000215 	stw	fp,8(sp)
 2002564:	df000204 	addi	fp,sp,8
 2002568:	e13ffe15 	stw	r4,-8(fp)
 200256c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2002570:	00000506 	br	2002588 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2002574:	e0bfff17 	ldw	r2,-4(fp)
 2002578:	1090000c 	andi	r2,r2,16384
 200257c:	10000226 	beq	r2,zero,2002588 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2002580:	00bffd44 	movi	r2,-11
 2002584:	00000b06 	br	20025b4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2002588:	e0bffe17 	ldw	r2,-8(fp)
 200258c:	10c00d17 	ldw	r3,52(r2)
 2002590:	e0bffe17 	ldw	r2,-8(fp)
 2002594:	10800c17 	ldw	r2,48(r2)
 2002598:	18800526 	beq	r3,r2,20025b0 <altera_avalon_jtag_uart_close+0x54>
 200259c:	e0bffe17 	ldw	r2,-8(fp)
 20025a0:	10c00917 	ldw	r3,36(r2)
 20025a4:	e0bffe17 	ldw	r2,-8(fp)
 20025a8:	10800117 	ldw	r2,4(r2)
 20025ac:	18bff136 	bltu	r3,r2,2002574 <__reset+0xfdff9574>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 20025b0:	0005883a 	mov	r2,zero
}
 20025b4:	e037883a 	mov	sp,fp
 20025b8:	df000017 	ldw	fp,0(sp)
 20025bc:	dec00104 	addi	sp,sp,4
 20025c0:	f800283a 	ret

020025c4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 20025c4:	defffa04 	addi	sp,sp,-24
 20025c8:	df000515 	stw	fp,20(sp)
 20025cc:	df000504 	addi	fp,sp,20
 20025d0:	e13ffd15 	stw	r4,-12(fp)
 20025d4:	e17ffe15 	stw	r5,-8(fp)
 20025d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 20025dc:	00bff9c4 	movi	r2,-25
 20025e0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 20025e4:	e0bffe17 	ldw	r2,-8(fp)
 20025e8:	10da8060 	cmpeqi	r3,r2,27137
 20025ec:	1800031e 	bne	r3,zero,20025fc <altera_avalon_jtag_uart_ioctl+0x38>
 20025f0:	109a80a0 	cmpeqi	r2,r2,27138
 20025f4:	1000181e 	bne	r2,zero,2002658 <altera_avalon_jtag_uart_ioctl+0x94>
 20025f8:	00002606 	br	2002694 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 20025fc:	e0bffd17 	ldw	r2,-12(fp)
 2002600:	10c00117 	ldw	r3,4(r2)
 2002604:	00a00034 	movhi	r2,32768
 2002608:	10bfffc4 	addi	r2,r2,-1
 200260c:	18802226 	beq	r3,r2,2002698 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 2002610:	e0bfff17 	ldw	r2,-4(fp)
 2002614:	10800017 	ldw	r2,0(r2)
 2002618:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 200261c:	e0bffc17 	ldw	r2,-16(fp)
 2002620:	10800090 	cmplti	r2,r2,2
 2002624:	1000061e 	bne	r2,zero,2002640 <altera_avalon_jtag_uart_ioctl+0x7c>
 2002628:	e0fffc17 	ldw	r3,-16(fp)
 200262c:	00a00034 	movhi	r2,32768
 2002630:	10bfffc4 	addi	r2,r2,-1
 2002634:	18800226 	beq	r3,r2,2002640 <altera_avalon_jtag_uart_ioctl+0x7c>
 2002638:	e0bffc17 	ldw	r2,-16(fp)
 200263c:	00000206 	br	2002648 <altera_avalon_jtag_uart_ioctl+0x84>
 2002640:	00a00034 	movhi	r2,32768
 2002644:	10bfff84 	addi	r2,r2,-2
 2002648:	e0fffd17 	ldw	r3,-12(fp)
 200264c:	18800115 	stw	r2,4(r3)
      rc = 0;
 2002650:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2002654:	00001006 	br	2002698 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2002658:	e0bffd17 	ldw	r2,-12(fp)
 200265c:	10c00117 	ldw	r3,4(r2)
 2002660:	00a00034 	movhi	r2,32768
 2002664:	10bfffc4 	addi	r2,r2,-1
 2002668:	18800d26 	beq	r3,r2,20026a0 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200266c:	e0bffd17 	ldw	r2,-12(fp)
 2002670:	10c00917 	ldw	r3,36(r2)
 2002674:	e0bffd17 	ldw	r2,-12(fp)
 2002678:	10800117 	ldw	r2,4(r2)
 200267c:	1885803a 	cmpltu	r2,r3,r2
 2002680:	10c03fcc 	andi	r3,r2,255
 2002684:	e0bfff17 	ldw	r2,-4(fp)
 2002688:	10c00015 	stw	r3,0(r2)
      rc = 0;
 200268c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2002690:	00000306 	br	20026a0 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 2002694:	00000306 	br	20026a4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 2002698:	0001883a 	nop
 200269c:	00000106 	br	20026a4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 20026a0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 20026a4:	e0bffb17 	ldw	r2,-20(fp)
}
 20026a8:	e037883a 	mov	sp,fp
 20026ac:	df000017 	ldw	fp,0(sp)
 20026b0:	dec00104 	addi	sp,sp,4
 20026b4:	f800283a 	ret

020026b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 20026b8:	defff304 	addi	sp,sp,-52
 20026bc:	dfc00c15 	stw	ra,48(sp)
 20026c0:	df000b15 	stw	fp,44(sp)
 20026c4:	df000b04 	addi	fp,sp,44
 20026c8:	e13ffc15 	stw	r4,-16(fp)
 20026cc:	e17ffd15 	stw	r5,-12(fp)
 20026d0:	e1bffe15 	stw	r6,-8(fp)
 20026d4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 20026d8:	e0bffd17 	ldw	r2,-12(fp)
 20026dc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20026e0:	00004706 	br	2002800 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 20026e4:	e0bffc17 	ldw	r2,-16(fp)
 20026e8:	10800a17 	ldw	r2,40(r2)
 20026ec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 20026f0:	e0bffc17 	ldw	r2,-16(fp)
 20026f4:	10800b17 	ldw	r2,44(r2)
 20026f8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 20026fc:	e0fff717 	ldw	r3,-36(fp)
 2002700:	e0bff817 	ldw	r2,-32(fp)
 2002704:	18800536 	bltu	r3,r2,200271c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2002708:	e0fff717 	ldw	r3,-36(fp)
 200270c:	e0bff817 	ldw	r2,-32(fp)
 2002710:	1885c83a 	sub	r2,r3,r2
 2002714:	e0bff615 	stw	r2,-40(fp)
 2002718:	00000406 	br	200272c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 200271c:	00c20004 	movi	r3,2048
 2002720:	e0bff817 	ldw	r2,-32(fp)
 2002724:	1885c83a 	sub	r2,r3,r2
 2002728:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200272c:	e0bff617 	ldw	r2,-40(fp)
 2002730:	10001e26 	beq	r2,zero,20027ac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 2002734:	e0fffe17 	ldw	r3,-8(fp)
 2002738:	e0bff617 	ldw	r2,-40(fp)
 200273c:	1880022e 	bgeu	r3,r2,2002748 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 2002740:	e0bffe17 	ldw	r2,-8(fp)
 2002744:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2002748:	e0bff817 	ldw	r2,-32(fp)
 200274c:	10800e04 	addi	r2,r2,56
 2002750:	e0fffc17 	ldw	r3,-16(fp)
 2002754:	1885883a 	add	r2,r3,r2
 2002758:	e13ff517 	ldw	r4,-44(fp)
 200275c:	100b883a 	mov	r5,r2
 2002760:	e1bff617 	ldw	r6,-40(fp)
 2002764:	20042440 	call	2004244 <memcpy>
      ptr   += n;
 2002768:	e0fff517 	ldw	r3,-44(fp)
 200276c:	e0bff617 	ldw	r2,-40(fp)
 2002770:	1885883a 	add	r2,r3,r2
 2002774:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2002778:	e0fffe17 	ldw	r3,-8(fp)
 200277c:	e0bff617 	ldw	r2,-40(fp)
 2002780:	1885c83a 	sub	r2,r3,r2
 2002784:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2002788:	e0fff817 	ldw	r3,-32(fp)
 200278c:	e0bff617 	ldw	r2,-40(fp)
 2002790:	1885883a 	add	r2,r3,r2
 2002794:	10c1ffcc 	andi	r3,r2,2047
 2002798:	e0bffc17 	ldw	r2,-16(fp)
 200279c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 20027a0:	e0bffe17 	ldw	r2,-8(fp)
 20027a4:	00bfcf16 	blt	zero,r2,20026e4 <__reset+0xfdff96e4>
 20027a8:	00000106 	br	20027b0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 20027ac:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 20027b0:	e0fff517 	ldw	r3,-44(fp)
 20027b4:	e0bffd17 	ldw	r2,-12(fp)
 20027b8:	1880141e 	bne	r3,r2,200280c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 20027bc:	e0bfff17 	ldw	r2,-4(fp)
 20027c0:	1090000c 	andi	r2,r2,16384
 20027c4:	1000131e 	bne	r2,zero,2002814 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 20027c8:	0001883a 	nop
 20027cc:	e0bffc17 	ldw	r2,-16(fp)
 20027d0:	10c00a17 	ldw	r3,40(r2)
 20027d4:	e0bff717 	ldw	r2,-36(fp)
 20027d8:	1880051e 	bne	r3,r2,20027f0 <altera_avalon_jtag_uart_read+0x138>
 20027dc:	e0bffc17 	ldw	r2,-16(fp)
 20027e0:	10c00917 	ldw	r3,36(r2)
 20027e4:	e0bffc17 	ldw	r2,-16(fp)
 20027e8:	10800117 	ldw	r2,4(r2)
 20027ec:	18bff736 	bltu	r3,r2,20027cc <__reset+0xfdff97cc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 20027f0:	e0bffc17 	ldw	r2,-16(fp)
 20027f4:	10c00a17 	ldw	r3,40(r2)
 20027f8:	e0bff717 	ldw	r2,-36(fp)
 20027fc:	18800726 	beq	r3,r2,200281c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2002800:	e0bffe17 	ldw	r2,-8(fp)
 2002804:	00bfb716 	blt	zero,r2,20026e4 <__reset+0xfdff96e4>
 2002808:	00000506 	br	2002820 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 200280c:	0001883a 	nop
 2002810:	00000306 	br	2002820 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2002814:	0001883a 	nop
 2002818:	00000106 	br	2002820 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 200281c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2002820:	e0fff517 	ldw	r3,-44(fp)
 2002824:	e0bffd17 	ldw	r2,-12(fp)
 2002828:	18801726 	beq	r3,r2,2002888 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200282c:	0005303a 	rdctl	r2,status
 2002830:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002834:	e0fffa17 	ldw	r3,-24(fp)
 2002838:	00bfff84 	movi	r2,-2
 200283c:	1884703a 	and	r2,r3,r2
 2002840:	1001703a 	wrctl	status,r2
  
  return context;
 2002844:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2002848:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200284c:	e0bffc17 	ldw	r2,-16(fp)
 2002850:	10800817 	ldw	r2,32(r2)
 2002854:	10c00054 	ori	r3,r2,1
 2002858:	e0bffc17 	ldw	r2,-16(fp)
 200285c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2002860:	e0bffc17 	ldw	r2,-16(fp)
 2002864:	10800017 	ldw	r2,0(r2)
 2002868:	10800104 	addi	r2,r2,4
 200286c:	e0fffc17 	ldw	r3,-16(fp)
 2002870:	18c00817 	ldw	r3,32(r3)
 2002874:	10c00035 	stwio	r3,0(r2)
 2002878:	e0bff917 	ldw	r2,-28(fp)
 200287c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2002880:	e0bffb17 	ldw	r2,-20(fp)
 2002884:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2002888:	e0fff517 	ldw	r3,-44(fp)
 200288c:	e0bffd17 	ldw	r2,-12(fp)
 2002890:	18800426 	beq	r3,r2,20028a4 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 2002894:	e0fff517 	ldw	r3,-44(fp)
 2002898:	e0bffd17 	ldw	r2,-12(fp)
 200289c:	1885c83a 	sub	r2,r3,r2
 20028a0:	00000606 	br	20028bc <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 20028a4:	e0bfff17 	ldw	r2,-4(fp)
 20028a8:	1090000c 	andi	r2,r2,16384
 20028ac:	10000226 	beq	r2,zero,20028b8 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 20028b0:	00bffd44 	movi	r2,-11
 20028b4:	00000106 	br	20028bc <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 20028b8:	00bffec4 	movi	r2,-5
}
 20028bc:	e037883a 	mov	sp,fp
 20028c0:	dfc00117 	ldw	ra,4(sp)
 20028c4:	df000017 	ldw	fp,0(sp)
 20028c8:	dec00204 	addi	sp,sp,8
 20028cc:	f800283a 	ret

020028d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 20028d0:	defff304 	addi	sp,sp,-52
 20028d4:	dfc00c15 	stw	ra,48(sp)
 20028d8:	df000b15 	stw	fp,44(sp)
 20028dc:	df000b04 	addi	fp,sp,44
 20028e0:	e13ffc15 	stw	r4,-16(fp)
 20028e4:	e17ffd15 	stw	r5,-12(fp)
 20028e8:	e1bffe15 	stw	r6,-8(fp)
 20028ec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 20028f0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 20028f4:	e0bffd17 	ldw	r2,-12(fp)
 20028f8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20028fc:	00003706 	br	20029dc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2002900:	e0bffc17 	ldw	r2,-16(fp)
 2002904:	10800c17 	ldw	r2,48(r2)
 2002908:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 200290c:	e0bffc17 	ldw	r2,-16(fp)
 2002910:	10800d17 	ldw	r2,52(r2)
 2002914:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2002918:	e0fff817 	ldw	r3,-32(fp)
 200291c:	e0bff517 	ldw	r2,-44(fp)
 2002920:	1880062e 	bgeu	r3,r2,200293c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2002924:	e0fff517 	ldw	r3,-44(fp)
 2002928:	e0bff817 	ldw	r2,-32(fp)
 200292c:	1885c83a 	sub	r2,r3,r2
 2002930:	10bfffc4 	addi	r2,r2,-1
 2002934:	e0bff615 	stw	r2,-40(fp)
 2002938:	00000b06 	br	2002968 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 200293c:	e0bff517 	ldw	r2,-44(fp)
 2002940:	10000526 	beq	r2,zero,2002958 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2002944:	00c20004 	movi	r3,2048
 2002948:	e0bff817 	ldw	r2,-32(fp)
 200294c:	1885c83a 	sub	r2,r3,r2
 2002950:	e0bff615 	stw	r2,-40(fp)
 2002954:	00000406 	br	2002968 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2002958:	00c1ffc4 	movi	r3,2047
 200295c:	e0bff817 	ldw	r2,-32(fp)
 2002960:	1885c83a 	sub	r2,r3,r2
 2002964:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2002968:	e0bff617 	ldw	r2,-40(fp)
 200296c:	10001e26 	beq	r2,zero,20029e8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 2002970:	e0fffe17 	ldw	r3,-8(fp)
 2002974:	e0bff617 	ldw	r2,-40(fp)
 2002978:	1880022e 	bgeu	r3,r2,2002984 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 200297c:	e0bffe17 	ldw	r2,-8(fp)
 2002980:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2002984:	e0bff817 	ldw	r2,-32(fp)
 2002988:	10820e04 	addi	r2,r2,2104
 200298c:	e0fffc17 	ldw	r3,-16(fp)
 2002990:	1885883a 	add	r2,r3,r2
 2002994:	1009883a 	mov	r4,r2
 2002998:	e17ffd17 	ldw	r5,-12(fp)
 200299c:	e1bff617 	ldw	r6,-40(fp)
 20029a0:	20042440 	call	2004244 <memcpy>
      ptr   += n;
 20029a4:	e0fffd17 	ldw	r3,-12(fp)
 20029a8:	e0bff617 	ldw	r2,-40(fp)
 20029ac:	1885883a 	add	r2,r3,r2
 20029b0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 20029b4:	e0fffe17 	ldw	r3,-8(fp)
 20029b8:	e0bff617 	ldw	r2,-40(fp)
 20029bc:	1885c83a 	sub	r2,r3,r2
 20029c0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20029c4:	e0fff817 	ldw	r3,-32(fp)
 20029c8:	e0bff617 	ldw	r2,-40(fp)
 20029cc:	1885883a 	add	r2,r3,r2
 20029d0:	10c1ffcc 	andi	r3,r2,2047
 20029d4:	e0bffc17 	ldw	r2,-16(fp)
 20029d8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20029dc:	e0bffe17 	ldw	r2,-8(fp)
 20029e0:	00bfc716 	blt	zero,r2,2002900 <__reset+0xfdff9900>
 20029e4:	00000106 	br	20029ec <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 20029e8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20029ec:	0005303a 	rdctl	r2,status
 20029f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20029f4:	e0fffa17 	ldw	r3,-24(fp)
 20029f8:	00bfff84 	movi	r2,-2
 20029fc:	1884703a 	and	r2,r3,r2
 2002a00:	1001703a 	wrctl	status,r2
  
  return context;
 2002a04:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2002a08:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2002a0c:	e0bffc17 	ldw	r2,-16(fp)
 2002a10:	10800817 	ldw	r2,32(r2)
 2002a14:	10c00094 	ori	r3,r2,2
 2002a18:	e0bffc17 	ldw	r2,-16(fp)
 2002a1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2002a20:	e0bffc17 	ldw	r2,-16(fp)
 2002a24:	10800017 	ldw	r2,0(r2)
 2002a28:	10800104 	addi	r2,r2,4
 2002a2c:	e0fffc17 	ldw	r3,-16(fp)
 2002a30:	18c00817 	ldw	r3,32(r3)
 2002a34:	10c00035 	stwio	r3,0(r2)
 2002a38:	e0bff917 	ldw	r2,-28(fp)
 2002a3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2002a40:	e0bffb17 	ldw	r2,-20(fp)
 2002a44:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2002a48:	e0bffe17 	ldw	r2,-8(fp)
 2002a4c:	0080100e 	bge	zero,r2,2002a90 <altera_avalon_jtag_uart_write+0x1c0>
    {
      if (flags & O_NONBLOCK)
 2002a50:	e0bfff17 	ldw	r2,-4(fp)
 2002a54:	1090000c 	andi	r2,r2,16384
 2002a58:	1000101e 	bne	r2,zero,2002a9c <altera_avalon_jtag_uart_write+0x1cc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2002a5c:	0001883a 	nop
 2002a60:	e0bffc17 	ldw	r2,-16(fp)
 2002a64:	10c00d17 	ldw	r3,52(r2)
 2002a68:	e0bff517 	ldw	r2,-44(fp)
 2002a6c:	1880051e 	bne	r3,r2,2002a84 <altera_avalon_jtag_uart_write+0x1b4>
 2002a70:	e0bffc17 	ldw	r2,-16(fp)
 2002a74:	10c00917 	ldw	r3,36(r2)
 2002a78:	e0bffc17 	ldw	r2,-16(fp)
 2002a7c:	10800117 	ldw	r2,4(r2)
 2002a80:	18bff736 	bltu	r3,r2,2002a60 <__reset+0xfdff9a60>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2002a84:	e0bffc17 	ldw	r2,-16(fp)
 2002a88:	10800917 	ldw	r2,36(r2)
 2002a8c:	1000051e 	bne	r2,zero,2002aa4 <altera_avalon_jtag_uart_write+0x1d4>
         break;
    }
  }
  while (count > 0);
 2002a90:	e0bffe17 	ldw	r2,-8(fp)
 2002a94:	00bfd116 	blt	zero,r2,20029dc <__reset+0xfdff99dc>
 2002a98:	00000306 	br	2002aa8 <altera_avalon_jtag_uart_write+0x1d8>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2002a9c:	0001883a 	nop
 2002aa0:	00000106 	br	2002aa8 <altera_avalon_jtag_uart_write+0x1d8>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2002aa4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2002aa8:	e0fffd17 	ldw	r3,-12(fp)
 2002aac:	e0bff717 	ldw	r2,-36(fp)
 2002ab0:	18800426 	beq	r3,r2,2002ac4 <altera_avalon_jtag_uart_write+0x1f4>
    return ptr - start;
 2002ab4:	e0fffd17 	ldw	r3,-12(fp)
 2002ab8:	e0bff717 	ldw	r2,-36(fp)
 2002abc:	1885c83a 	sub	r2,r3,r2
 2002ac0:	00000606 	br	2002adc <altera_avalon_jtag_uart_write+0x20c>
  else if (flags & O_NONBLOCK)
 2002ac4:	e0bfff17 	ldw	r2,-4(fp)
 2002ac8:	1090000c 	andi	r2,r2,16384
 2002acc:	10000226 	beq	r2,zero,2002ad8 <altera_avalon_jtag_uart_write+0x208>
    return -EWOULDBLOCK;
 2002ad0:	00bffd44 	movi	r2,-11
 2002ad4:	00000106 	br	2002adc <altera_avalon_jtag_uart_write+0x20c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2002ad8:	00bffec4 	movi	r2,-5
}
 2002adc:	e037883a 	mov	sp,fp
 2002ae0:	dfc00117 	ldw	ra,4(sp)
 2002ae4:	df000017 	ldw	fp,0(sp)
 2002ae8:	dec00204 	addi	sp,sp,8
 2002aec:	f800283a 	ret

02002af0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2002af0:	defffa04 	addi	sp,sp,-24
 2002af4:	dfc00515 	stw	ra,20(sp)
 2002af8:	df000415 	stw	fp,16(sp)
 2002afc:	df000404 	addi	fp,sp,16
 2002b00:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2002b04:	0007883a 	mov	r3,zero
 2002b08:	e0bfff17 	ldw	r2,-4(fp)
 2002b0c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2002b10:	e0bfff17 	ldw	r2,-4(fp)
 2002b14:	10800104 	addi	r2,r2,4
 2002b18:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002b1c:	0005303a 	rdctl	r2,status
 2002b20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002b24:	e0fffd17 	ldw	r3,-12(fp)
 2002b28:	00bfff84 	movi	r2,-2
 2002b2c:	1884703a 	and	r2,r3,r2
 2002b30:	1001703a 	wrctl	status,r2
  
  return context;
 2002b34:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2002b38:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 2002b3c:	20013e40 	call	20013e4 <alt_tick>
 2002b40:	e0bffc17 	ldw	r2,-16(fp)
 2002b44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2002b48:	e0bffe17 	ldw	r2,-8(fp)
 2002b4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2002b50:	e037883a 	mov	sp,fp
 2002b54:	dfc00117 	ldw	ra,4(sp)
 2002b58:	df000017 	ldw	fp,0(sp)
 2002b5c:	dec00204 	addi	sp,sp,8
 2002b60:	f800283a 	ret

02002b64 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2002b64:	defff804 	addi	sp,sp,-32
 2002b68:	dfc00715 	stw	ra,28(sp)
 2002b6c:	df000615 	stw	fp,24(sp)
 2002b70:	df000604 	addi	fp,sp,24
 2002b74:	e13ffc15 	stw	r4,-16(fp)
 2002b78:	e17ffd15 	stw	r5,-12(fp)
 2002b7c:	e1bffe15 	stw	r6,-8(fp)
 2002b80:	e1ffff15 	stw	r7,-4(fp)
 2002b84:	e0bfff17 	ldw	r2,-4(fp)
 2002b88:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2002b8c:	00808074 	movhi	r2,513
 2002b90:	1097f204 	addi	r2,r2,24520
 2002b94:	10800017 	ldw	r2,0(r2)
 2002b98:	1000041e 	bne	r2,zero,2002bac <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 2002b9c:	00808074 	movhi	r2,513
 2002ba0:	1097f204 	addi	r2,r2,24520
 2002ba4:	e0fffb17 	ldw	r3,-20(fp)
 2002ba8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2002bac:	e0bffc17 	ldw	r2,-16(fp)
 2002bb0:	10800104 	addi	r2,r2,4
 2002bb4:	00c001c4 	movi	r3,7
 2002bb8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2002bbc:	d8000015 	stw	zero,0(sp)
 2002bc0:	e13ffd17 	ldw	r4,-12(fp)
 2002bc4:	e17ffe17 	ldw	r5,-8(fp)
 2002bc8:	01808034 	movhi	r6,512
 2002bcc:	318abc04 	addi	r6,r6,10992
 2002bd0:	e1fffc17 	ldw	r7,-16(fp)
 2002bd4:	20035f00 	call	20035f0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2002bd8:	e037883a 	mov	sp,fp
 2002bdc:	dfc00117 	ldw	ra,4(sp)
 2002be0:	df000017 	ldw	fp,0(sp)
 2002be4:	dec00204 	addi	sp,sp,8
 2002be8:	f800283a 	ret

02002bec <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 2002bec:	defff904 	addi	sp,sp,-28
 2002bf0:	dfc00615 	stw	ra,24(sp)
 2002bf4:	df000515 	stw	fp,20(sp)
 2002bf8:	df000504 	addi	fp,sp,20
 2002bfc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2002c00:	00800144 	movi	r2,5
 2002c04:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2002c08:	00800044 	movi	r2,1
 2002c0c:	d8800015 	stw	r2,0(sp)
 2002c10:	e0bffe44 	addi	r2,fp,-7
 2002c14:	d8800115 	stw	r2,4(sp)
 2002c18:	d8000215 	stw	zero,8(sp)
 2002c1c:	e13fff17 	ldw	r4,-4(fp)
 2002c20:	000b883a 	mov	r5,zero
 2002c24:	01800044 	movi	r6,1
 2002c28:	e1fffe04 	addi	r7,fp,-8
 2002c2c:	2003d480 	call	2003d48 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2002c30:	e0bffe43 	ldbu	r2,-7(fp)
}
 2002c34:	e037883a 	mov	sp,fp
 2002c38:	dfc00117 	ldw	ra,4(sp)
 2002c3c:	df000017 	ldw	fp,0(sp)
 2002c40:	dec00204 	addi	sp,sp,8
 2002c44:	f800283a 	ret

02002c48 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2002c48:	defffd04 	addi	sp,sp,-12
 2002c4c:	dfc00215 	stw	ra,8(sp)
 2002c50:	df000115 	stw	fp,4(sp)
 2002c54:	df000104 	addi	fp,sp,4
 2002c58:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 2002c5c:	e13fff17 	ldw	r4,-4(fp)
 2002c60:	2002bec0 	call	2002bec <epcs_read_status_register>
 2002c64:	10803fcc 	andi	r2,r2,255
 2002c68:	1080004c 	andi	r2,r2,1
}
 2002c6c:	e037883a 	mov	sp,fp
 2002c70:	dfc00117 	ldw	ra,4(sp)
 2002c74:	df000017 	ldw	fp,0(sp)
 2002c78:	dec00204 	addi	sp,sp,8
 2002c7c:	f800283a 	ret

02002c80 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 2002c80:	defffd04 	addi	sp,sp,-12
 2002c84:	dfc00215 	stw	ra,8(sp)
 2002c88:	df000115 	stw	fp,4(sp)
 2002c8c:	df000104 	addi	fp,sp,4
 2002c90:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2002c94:	0001883a 	nop
 2002c98:	e13fff17 	ldw	r4,-4(fp)
 2002c9c:	2002c480 	call	2002c48 <epcs_test_wip>
 2002ca0:	103ffd1e 	bne	r2,zero,2002c98 <__reset+0xfdff9c98>
  {
  }
}
 2002ca4:	e037883a 	mov	sp,fp
 2002ca8:	dfc00117 	ldw	ra,4(sp)
 2002cac:	df000017 	ldw	fp,0(sp)
 2002cb0:	dec00204 	addi	sp,sp,8
 2002cb4:	f800283a 	ret

02002cb8 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 2002cb8:	defff604 	addi	sp,sp,-40
 2002cbc:	dfc00915 	stw	ra,36(sp)
 2002cc0:	df000815 	stw	fp,32(sp)
 2002cc4:	df000804 	addi	fp,sp,32
 2002cc8:	e13ffd15 	stw	r4,-12(fp)
 2002ccc:	e17ffe15 	stw	r5,-8(fp)
 2002cd0:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 2002cd4:	e0bfff17 	ldw	r2,-4(fp)
 2002cd8:	10001226 	beq	r2,zero,2002d24 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 2002cdc:	00bff604 	movi	r2,-40
 2002ce0:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2002ce4:	e0bffe17 	ldw	r2,-8(fp)
 2002ce8:	1004d63a 	srli	r2,r2,24
 2002cec:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 2002cf0:	e0bffe17 	ldw	r2,-8(fp)
 2002cf4:	1004d43a 	srli	r2,r2,16
 2002cf8:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 2002cfc:	e0bffe17 	ldw	r2,-8(fp)
 2002d00:	1004d23a 	srli	r2,r2,8
 2002d04:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 2002d08:	e0bffe17 	ldw	r2,-8(fp)
 2002d0c:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 2002d10:	00800144 	movi	r2,5
 2002d14:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 2002d18:	e13ffd17 	ldw	r4,-12(fp)
 2002d1c:	20031600 	call	2003160 <epcs_enter_4_bytes_mode>
 2002d20:	00000c06 	br	2002d54 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 2002d24:	00bff604 	movi	r2,-40
 2002d28:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 2002d2c:	e0bffe17 	ldw	r2,-8(fp)
 2002d30:	1004d43a 	srli	r2,r2,16
 2002d34:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 2002d38:	e0bffe17 	ldw	r2,-8(fp)
 2002d3c:	1004d23a 	srli	r2,r2,8
 2002d40:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2002d44:	e0bffe17 	ldw	r2,-8(fp)
 2002d48:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 2002d4c:	00800104 	movi	r2,4
 2002d50:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 2002d54:	e13ffd17 	ldw	r4,-12(fp)
 2002d58:	2002ea40 	call	2002ea4 <epcs_write_enable>

  alt_avalon_spi_command(
 2002d5c:	e0fffb03 	ldbu	r3,-20(fp)
    base,
    0,
    len,
    se,
 2002d60:	e0bffb44 	addi	r2,fp,-19
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);

  alt_avalon_spi_command(
 2002d64:	d8000015 	stw	zero,0(sp)
 2002d68:	d8000115 	stw	zero,4(sp)
 2002d6c:	d8000215 	stw	zero,8(sp)
 2002d70:	e13ffd17 	ldw	r4,-12(fp)
 2002d74:	000b883a 	mov	r5,zero
 2002d78:	180d883a 	mov	r6,r3
 2002d7c:	100f883a 	mov	r7,r2
 2002d80:	2003d480 	call	2003d48 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2002d84:	e13ffd17 	ldw	r4,-12(fp)
 2002d88:	2002c800 	call	2002c80 <epcs_await_wip_released>

  if(four_bytes_mode)
 2002d8c:	e0bfff17 	ldw	r2,-4(fp)
 2002d90:	10000226 	beq	r2,zero,2002d9c <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 2002d94:	e13ffd17 	ldw	r4,-12(fp)
 2002d98:	20031b80 	call	20031b8 <epcs_exit_4_bytes_mode>
  }
}
 2002d9c:	e037883a 	mov	sp,fp
 2002da0:	dfc00117 	ldw	ra,4(sp)
 2002da4:	df000017 	ldw	fp,0(sp)
 2002da8:	dec00204 	addi	sp,sp,8
 2002dac:	f800283a 	ret

02002db0 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2002db0:	defff404 	addi	sp,sp,-48
 2002db4:	dfc00b15 	stw	ra,44(sp)
 2002db8:	df000a15 	stw	fp,40(sp)
 2002dbc:	df000a04 	addi	fp,sp,40
 2002dc0:	e13ffc15 	stw	r4,-16(fp)
 2002dc4:	e17ffd15 	stw	r5,-12(fp)
 2002dc8:	e1bffe15 	stw	r6,-8(fp)
 2002dcc:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 2002dd0:	008000c4 	movi	r2,3
 2002dd4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2002dd8:	e0800217 	ldw	r2,8(fp)
 2002ddc:	10001026 	beq	r2,zero,2002e20 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2002de0:	e0bffd17 	ldw	r2,-12(fp)
 2002de4:	1004d63a 	srli	r2,r2,24
 2002de8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 2002dec:	e0bffd17 	ldw	r2,-12(fp)
 2002df0:	1005d43a 	srai	r2,r2,16
 2002df4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2002df8:	e0bffd17 	ldw	r2,-12(fp)
 2002dfc:	1005d23a 	srai	r2,r2,8
 2002e00:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 2002e04:	e0bffd17 	ldw	r2,-12(fp)
 2002e08:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 2002e0c:	00800144 	movi	r2,5
 2002e10:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 2002e14:	e13ffc17 	ldw	r4,-16(fp)
 2002e18:	20031600 	call	2003160 <epcs_enter_4_bytes_mode>
 2002e1c:	00000a06 	br	2002e48 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 2002e20:	e0bffd17 	ldw	r2,-12(fp)
 2002e24:	1005d43a 	srai	r2,r2,16
 2002e28:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 2002e2c:	e0bffd17 	ldw	r2,-12(fp)
 2002e30:	1005d23a 	srai	r2,r2,8
 2002e34:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2002e38:	e0bffd17 	ldw	r2,-12(fp)
 2002e3c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2002e40:	00800104 	movi	r2,4
 2002e44:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2002e48:	e13ffc17 	ldw	r4,-16(fp)
 2002e4c:	2002c800 	call	2002c80 <epcs_await_wip_released>

  alt_avalon_spi_command(
 2002e50:	e0ffff17 	ldw	r3,-4(fp)
    base,
    0,
    cmd_len,
    read_command,
 2002e54:	e0bffa04 	addi	r2,fp,-24
        cmd_len = 4;
  }

  epcs_await_wip_released(base);

  alt_avalon_spi_command(
 2002e58:	d8c00015 	stw	r3,0(sp)
 2002e5c:	e0fffe17 	ldw	r3,-8(fp)
 2002e60:	d8c00115 	stw	r3,4(sp)
 2002e64:	d8000215 	stw	zero,8(sp)
 2002e68:	e13ffc17 	ldw	r4,-16(fp)
 2002e6c:	000b883a 	mov	r5,zero
 2002e70:	e1bff917 	ldw	r6,-28(fp)
 2002e74:	100f883a 	mov	r7,r2
 2002e78:	2003d480 	call	2003d48 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 2002e7c:	e0800217 	ldw	r2,8(fp)
 2002e80:	10000226 	beq	r2,zero,2002e8c <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 2002e84:	e13ffc17 	ldw	r4,-16(fp)
 2002e88:	20031b80 	call	20031b8 <epcs_exit_4_bytes_mode>
  }

  return length;
 2002e8c:	e0bfff17 	ldw	r2,-4(fp)
}
 2002e90:	e037883a 	mov	sp,fp
 2002e94:	dfc00117 	ldw	ra,4(sp)
 2002e98:	df000017 	ldw	fp,0(sp)
 2002e9c:	dec00204 	addi	sp,sp,8
 2002ea0:	f800283a 	ret

02002ea4 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 2002ea4:	defff904 	addi	sp,sp,-28
 2002ea8:	dfc00615 	stw	ra,24(sp)
 2002eac:	df000515 	stw	fp,20(sp)
 2002eb0:	df000504 	addi	fp,sp,20
 2002eb4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2002eb8:	00800184 	movi	r2,6
 2002ebc:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2002ec0:	d8000015 	stw	zero,0(sp)
 2002ec4:	d8000115 	stw	zero,4(sp)
 2002ec8:	d8000215 	stw	zero,8(sp)
 2002ecc:	e13fff17 	ldw	r4,-4(fp)
 2002ed0:	000b883a 	mov	r5,zero
 2002ed4:	01800044 	movi	r6,1
 2002ed8:	e1fffe04 	addi	r7,fp,-8
 2002edc:	2003d480 	call	2003d48 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2002ee0:	e037883a 	mov	sp,fp
 2002ee4:	dfc00117 	ldw	ra,4(sp)
 2002ee8:	df000017 	ldw	fp,0(sp)
 2002eec:	dec00204 	addi	sp,sp,8
 2002ef0:	f800283a 	ret

02002ef4 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2002ef4:	defff804 	addi	sp,sp,-32
 2002ef8:	dfc00715 	stw	ra,28(sp)
 2002efc:	df000615 	stw	fp,24(sp)
 2002f00:	df000604 	addi	fp,sp,24
 2002f04:	e13ffe15 	stw	r4,-8(fp)
 2002f08:	2805883a 	mov	r2,r5
 2002f0c:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2002f10:	00800044 	movi	r2,1
 2002f14:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2002f18:	e0bfff03 	ldbu	r2,-4(fp)
 2002f1c:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2002f20:	d8000015 	stw	zero,0(sp)
 2002f24:	d8000115 	stw	zero,4(sp)
 2002f28:	d8000215 	stw	zero,8(sp)
 2002f2c:	e13ffe17 	ldw	r4,-8(fp)
 2002f30:	000b883a 	mov	r5,zero
 2002f34:	01800084 	movi	r6,2
 2002f38:	e1fffd04 	addi	r7,fp,-12
 2002f3c:	2003d480 	call	2003d48 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2002f40:	e13ffe17 	ldw	r4,-8(fp)
 2002f44:	2002c800 	call	2002c80 <epcs_await_wip_released>
}
 2002f48:	e037883a 	mov	sp,fp
 2002f4c:	dfc00117 	ldw	ra,4(sp)
 2002f50:	df000017 	ldw	fp,0(sp)
 2002f54:	dec00204 	addi	sp,sp,8
 2002f58:	f800283a 	ret

02002f5c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 2002f5c:	defff404 	addi	sp,sp,-48
 2002f60:	dfc00b15 	stw	ra,44(sp)
 2002f64:	df000a15 	stw	fp,40(sp)
 2002f68:	df000a04 	addi	fp,sp,40
 2002f6c:	e13ffc15 	stw	r4,-16(fp)
 2002f70:	e17ffd15 	stw	r5,-12(fp)
 2002f74:	e1bffe15 	stw	r6,-8(fp)
 2002f78:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 2002f7c:	00800084 	movi	r2,2
 2002f80:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2002f84:	e0800217 	ldw	r2,8(fp)
 2002f88:	10001026 	beq	r2,zero,2002fcc <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 2002f8c:	e0bffd17 	ldw	r2,-12(fp)
 2002f90:	1004d63a 	srli	r2,r2,24
 2002f94:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 2002f98:	e0bffd17 	ldw	r2,-12(fp)
 2002f9c:	1005d43a 	srai	r2,r2,16
 2002fa0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 2002fa4:	e0bffd17 	ldw	r2,-12(fp)
 2002fa8:	1005d23a 	srai	r2,r2,8
 2002fac:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 2002fb0:	e0bffd17 	ldw	r2,-12(fp)
 2002fb4:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2002fb8:	00800144 	movi	r2,5
 2002fbc:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 2002fc0:	e13ffc17 	ldw	r4,-16(fp)
 2002fc4:	20031600 	call	2003160 <epcs_enter_4_bytes_mode>
 2002fc8:	00000a06 	br	2002ff4 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 2002fcc:	e0bffd17 	ldw	r2,-12(fp)
 2002fd0:	1005d43a 	srai	r2,r2,16
 2002fd4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 2002fd8:	e0bffd17 	ldw	r2,-12(fp)
 2002fdc:	1005d23a 	srai	r2,r2,8
 2002fe0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 2002fe4:	e0bffd17 	ldw	r2,-12(fp)
 2002fe8:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 2002fec:	00800104 	movi	r2,4
 2002ff0:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 2002ff4:	e13ffc17 	ldw	r4,-16(fp)
 2002ff8:	2002ea40 	call	2002ea4 <epcs_write_enable>
  /* Send the PP command */
  alt_avalon_spi_command(
    base,
    0,
    cmd_len,
    pp,
 2002ffc:	e0bffa04 	addi	r2,fp,-24

  /* First, WREN */
  epcs_write_enable(base);

  /* Send the PP command */
  alt_avalon_spi_command(
 2003000:	d8000015 	stw	zero,0(sp)
 2003004:	d8000115 	stw	zero,4(sp)
 2003008:	00c00044 	movi	r3,1
 200300c:	d8c00215 	stw	r3,8(sp)
 2003010:	e13ffc17 	ldw	r4,-16(fp)
 2003014:	000b883a 	mov	r5,zero
 2003018:	e1bff917 	ldw	r6,-28(fp)
 200301c:	100f883a 	mov	r7,r2
 2003020:	2003d480 	call	2003d48 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 2003024:	e0bfff17 	ldw	r2,-4(fp)
 2003028:	d8000015 	stw	zero,0(sp)
 200302c:	d8000115 	stw	zero,4(sp)
 2003030:	d8000215 	stw	zero,8(sp)
 2003034:	e13ffc17 	ldw	r4,-16(fp)
 2003038:	000b883a 	mov	r5,zero
 200303c:	100d883a 	mov	r6,r2
 2003040:	e1fffe17 	ldw	r7,-8(fp)
 2003044:	2003d480 	call	2003d48 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2003048:	e13ffc17 	ldw	r4,-16(fp)
 200304c:	2002c800 	call	2002c80 <epcs_await_wip_released>

  if(four_bytes_mode)
 2003050:	e0800217 	ldw	r2,8(fp)
 2003054:	10000226 	beq	r2,zero,2003060 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 2003058:	e13ffc17 	ldw	r4,-16(fp)
 200305c:	20031b80 	call	20031b8 <epcs_exit_4_bytes_mode>
  }

  return length;
 2003060:	e0bfff17 	ldw	r2,-4(fp)
}
 2003064:	e037883a 	mov	sp,fp
 2003068:	dfc00117 	ldw	ra,4(sp)
 200306c:	df000017 	ldw	fp,0(sp)
 2003070:	dec00204 	addi	sp,sp,8
 2003074:	f800283a 	ret

02003078 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2003078:	defff804 	addi	sp,sp,-32
 200307c:	dfc00715 	stw	ra,28(sp)
 2003080:	df000615 	stw	fp,24(sp)
 2003084:	df000604 	addi	fp,sp,24
 2003088:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 200308c:	00bfeac4 	movi	r2,-85
 2003090:	e0bffd05 	stb	r2,-12(fp)
 2003094:	e03ffd45 	stb	zero,-11(fp)
 2003098:	e03ffd85 	stb	zero,-10(fp)
 200309c:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 20030a0:	00800044 	movi	r2,1
 20030a4:	d8800015 	stw	r2,0(sp)
 20030a8:	e0bffe04 	addi	r2,fp,-8
 20030ac:	d8800115 	stw	r2,4(sp)
 20030b0:	d8000215 	stw	zero,8(sp)
 20030b4:	e13fff17 	ldw	r4,-4(fp)
 20030b8:	000b883a 	mov	r5,zero
 20030bc:	01800104 	movi	r6,4
 20030c0:	e1fffd04 	addi	r7,fp,-12
 20030c4:	2003d480 	call	2003d48 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 20030c8:	e0bffe03 	ldbu	r2,-8(fp)
}
 20030cc:	e037883a 	mov	sp,fp
 20030d0:	dfc00117 	ldw	ra,4(sp)
 20030d4:	df000017 	ldw	fp,0(sp)
 20030d8:	dec00204 	addi	sp,sp,8
 20030dc:	f800283a 	ret

020030e0 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 20030e0:	defff904 	addi	sp,sp,-28
 20030e4:	dfc00615 	stw	ra,24(sp)
 20030e8:	df000515 	stw	fp,20(sp)
 20030ec:	df000504 	addi	fp,sp,20
 20030f0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 20030f4:	00bfe7c4 	movi	r2,-97
 20030f8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 20030fc:	008000c4 	movi	r2,3
 2003100:	d8800015 	stw	r2,0(sp)
    base,
    0,
    sizeof(rd_id_cmd) / sizeof(*rd_id_cmd),
    rd_id_cmd,
    3,
    id,
 2003104:	e0bffe44 	addi	r2,fp,-7
alt_u32 epcs_read_device_id(alt_u32 base)
{
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  alt_u8 id[3];

  alt_avalon_spi_command(
 2003108:	d8800115 	stw	r2,4(sp)
 200310c:	d8000215 	stw	zero,8(sp)
 2003110:	e13fff17 	ldw	r4,-4(fp)
 2003114:	000b883a 	mov	r5,zero
 2003118:	01800044 	movi	r6,1
 200311c:	e1fffe04 	addi	r7,fp,-8
 2003120:	2003d480 	call	2003d48 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 2003124:	e0bffe43 	ldbu	r2,-7(fp)
 2003128:	10803fcc 	andi	r2,r2,255
 200312c:	1006943a 	slli	r3,r2,16
 2003130:	e0bffe83 	ldbu	r2,-6(fp)
 2003134:	10803fcc 	andi	r2,r2,255
 2003138:	1004923a 	slli	r2,r2,8
 200313c:	1886b03a 	or	r3,r3,r2
 2003140:	e0bffec3 	ldbu	r2,-5(fp)
 2003144:	10803fcc 	andi	r2,r2,255
 2003148:	1884b03a 	or	r2,r3,r2
}
 200314c:	e037883a 	mov	sp,fp
 2003150:	dfc00117 	ldw	ra,4(sp)
 2003154:	df000017 	ldw	fp,0(sp)
 2003158:	dec00204 	addi	sp,sp,8
 200315c:	f800283a 	ret

02003160 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 2003160:	defff904 	addi	sp,sp,-28
 2003164:	dfc00615 	stw	ra,24(sp)
 2003168:	df000515 	stw	fp,20(sp)
 200316c:	df000504 	addi	fp,sp,20
 2003170:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 2003174:	00bfedc4 	movi	r2,-73
 2003178:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 200317c:	e13fff17 	ldw	r4,-4(fp)
 2003180:	2002ea40 	call	2002ea4 <epcs_write_enable>

  alt_avalon_spi_command(
 2003184:	d8000015 	stw	zero,0(sp)
 2003188:	d8000115 	stw	zero,4(sp)
 200318c:	d8000215 	stw	zero,8(sp)
 2003190:	e13fff17 	ldw	r4,-4(fp)
 2003194:	000b883a 	mov	r5,zero
 2003198:	01800044 	movi	r6,1
 200319c:	e1fffe04 	addi	r7,fp,-8
 20031a0:	2003d480 	call	2003d48 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 20031a4:	e037883a 	mov	sp,fp
 20031a8:	dfc00117 	ldw	ra,4(sp)
 20031ac:	df000017 	ldw	fp,0(sp)
 20031b0:	dec00204 	addi	sp,sp,8
 20031b4:	f800283a 	ret

020031b8 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 20031b8:	defff904 	addi	sp,sp,-28
 20031bc:	dfc00615 	stw	ra,24(sp)
 20031c0:	df000515 	stw	fp,20(sp)
 20031c4:	df000504 	addi	fp,sp,20
 20031c8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 20031cc:	00bffa44 	movi	r2,-23
 20031d0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 20031d4:	e13fff17 	ldw	r4,-4(fp)
 20031d8:	2002ea40 	call	2002ea4 <epcs_write_enable>

  alt_avalon_spi_command(
 20031dc:	d8000015 	stw	zero,0(sp)
 20031e0:	d8000115 	stw	zero,4(sp)
 20031e4:	d8000215 	stw	zero,8(sp)
 20031e8:	e13fff17 	ldw	r4,-4(fp)
 20031ec:	000b883a 	mov	r5,zero
 20031f0:	01800044 	movi	r6,1
 20031f4:	e1fffe04 	addi	r7,fp,-8
 20031f8:	2003d480 	call	2003d48 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 20031fc:	e037883a 	mov	sp,fp
 2003200:	dfc00117 	ldw	ra,4(sp)
 2003204:	df000017 	ldw	fp,0(sp)
 2003208:	dec00204 	addi	sp,sp,8
 200320c:	f800283a 	ret

02003210 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003210:	defffe04 	addi	sp,sp,-8
 2003214:	dfc00115 	stw	ra,4(sp)
 2003218:	df000015 	stw	fp,0(sp)
 200321c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003220:	00808074 	movhi	r2,513
 2003224:	1092e004 	addi	r2,r2,19328
 2003228:	10800017 	ldw	r2,0(r2)
 200322c:	10000526 	beq	r2,zero,2003244 <alt_get_errno+0x34>
 2003230:	00808074 	movhi	r2,513
 2003234:	1092e004 	addi	r2,r2,19328
 2003238:	10800017 	ldw	r2,0(r2)
 200323c:	103ee83a 	callr	r2
 2003240:	00000206 	br	200324c <alt_get_errno+0x3c>
 2003244:	00808074 	movhi	r2,513
 2003248:	1097ee04 	addi	r2,r2,24504
}
 200324c:	e037883a 	mov	sp,fp
 2003250:	dfc00117 	ldw	ra,4(sp)
 2003254:	df000017 	ldw	fp,0(sp)
 2003258:	dec00204 	addi	sp,sp,8
 200325c:	f800283a 	ret

02003260 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2003260:	defffb04 	addi	sp,sp,-20
 2003264:	dfc00415 	stw	ra,16(sp)
 2003268:	df000315 	stw	fp,12(sp)
 200326c:	df000304 	addi	fp,sp,12
 2003270:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2003274:	e0bfff17 	ldw	r2,-4(fp)
 2003278:	10000716 	blt	r2,zero,2003298 <close+0x38>
 200327c:	e13fff17 	ldw	r4,-4(fp)
 2003280:	01400304 	movi	r5,12
 2003284:	20010800 	call	2001080 <__mulsi3>
 2003288:	00c08074 	movhi	r3,513
 200328c:	18d27404 	addi	r3,r3,18896
 2003290:	10c5883a 	add	r2,r2,r3
 2003294:	00000106 	br	200329c <close+0x3c>
 2003298:	0005883a 	mov	r2,zero
 200329c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 20032a0:	e0bffd17 	ldw	r2,-12(fp)
 20032a4:	10001826 	beq	r2,zero,2003308 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 20032a8:	e0bffd17 	ldw	r2,-12(fp)
 20032ac:	10800017 	ldw	r2,0(r2)
 20032b0:	10800417 	ldw	r2,16(r2)
 20032b4:	10000626 	beq	r2,zero,20032d0 <close+0x70>
 20032b8:	e0bffd17 	ldw	r2,-12(fp)
 20032bc:	10800017 	ldw	r2,0(r2)
 20032c0:	10800417 	ldw	r2,16(r2)
 20032c4:	e13ffd17 	ldw	r4,-12(fp)
 20032c8:	103ee83a 	callr	r2
 20032cc:	00000106 	br	20032d4 <close+0x74>
 20032d0:	0005883a 	mov	r2,zero
 20032d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 20032d8:	e13fff17 	ldw	r4,-4(fp)
 20032dc:	2003ca80 	call	2003ca8 <alt_release_fd>
    if (rval < 0)
 20032e0:	e0bffe17 	ldw	r2,-8(fp)
 20032e4:	1000060e 	bge	r2,zero,2003300 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 20032e8:	20032100 	call	2003210 <alt_get_errno>
 20032ec:	e0fffe17 	ldw	r3,-8(fp)
 20032f0:	00c7c83a 	sub	r3,zero,r3
 20032f4:	10c00015 	stw	r3,0(r2)
      return -1;
 20032f8:	00bfffc4 	movi	r2,-1
 20032fc:	00000606 	br	2003318 <close+0xb8>
    }
    return 0;
 2003300:	0005883a 	mov	r2,zero
 2003304:	00000406 	br	2003318 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2003308:	20032100 	call	2003210 <alt_get_errno>
 200330c:	00c01444 	movi	r3,81
 2003310:	10c00015 	stw	r3,0(r2)
    return -1;
 2003314:	00bfffc4 	movi	r2,-1
  }
}
 2003318:	e037883a 	mov	sp,fp
 200331c:	dfc00117 	ldw	ra,4(sp)
 2003320:	df000017 	ldw	fp,0(sp)
 2003324:	dec00204 	addi	sp,sp,8
 2003328:	f800283a 	ret

0200332c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 200332c:	deffff04 	addi	sp,sp,-4
 2003330:	df000015 	stw	fp,0(sp)
 2003334:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2003338:	e037883a 	mov	sp,fp
 200333c:	df000017 	ldw	fp,0(sp)
 2003340:	dec00104 	addi	sp,sp,4
 2003344:	f800283a 	ret

02003348 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2003348:	defffc04 	addi	sp,sp,-16
 200334c:	df000315 	stw	fp,12(sp)
 2003350:	df000304 	addi	fp,sp,12
 2003354:	e13ffd15 	stw	r4,-12(fp)
 2003358:	e17ffe15 	stw	r5,-8(fp)
 200335c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2003360:	e0bfff17 	ldw	r2,-4(fp)
}
 2003364:	e037883a 	mov	sp,fp
 2003368:	df000017 	ldw	fp,0(sp)
 200336c:	dec00104 	addi	sp,sp,4
 2003370:	f800283a 	ret

02003374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003374:	defffe04 	addi	sp,sp,-8
 2003378:	dfc00115 	stw	ra,4(sp)
 200337c:	df000015 	stw	fp,0(sp)
 2003380:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003384:	00808074 	movhi	r2,513
 2003388:	1092e004 	addi	r2,r2,19328
 200338c:	10800017 	ldw	r2,0(r2)
 2003390:	10000526 	beq	r2,zero,20033a8 <alt_get_errno+0x34>
 2003394:	00808074 	movhi	r2,513
 2003398:	1092e004 	addi	r2,r2,19328
 200339c:	10800017 	ldw	r2,0(r2)
 20033a0:	103ee83a 	callr	r2
 20033a4:	00000206 	br	20033b0 <alt_get_errno+0x3c>
 20033a8:	00808074 	movhi	r2,513
 20033ac:	1097ee04 	addi	r2,r2,24504
}
 20033b0:	e037883a 	mov	sp,fp
 20033b4:	dfc00117 	ldw	ra,4(sp)
 20033b8:	df000017 	ldw	fp,0(sp)
 20033bc:	dec00204 	addi	sp,sp,8
 20033c0:	f800283a 	ret

020033c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 20033c4:	defffa04 	addi	sp,sp,-24
 20033c8:	dfc00515 	stw	ra,20(sp)
 20033cc:	df000415 	stw	fp,16(sp)
 20033d0:	df000404 	addi	fp,sp,16
 20033d4:	e13ffe15 	stw	r4,-8(fp)
 20033d8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 20033dc:	e0bffe17 	ldw	r2,-8(fp)
 20033e0:	10000326 	beq	r2,zero,20033f0 <alt_dev_llist_insert+0x2c>
 20033e4:	e0bffe17 	ldw	r2,-8(fp)
 20033e8:	10800217 	ldw	r2,8(r2)
 20033ec:	1000051e 	bne	r2,zero,2003404 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 20033f0:	20033740 	call	2003374 <alt_get_errno>
 20033f4:	00c00584 	movi	r3,22
 20033f8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 20033fc:	00bffa84 	movi	r2,-22
 2003400:	00001306 	br	2003450 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2003404:	e0bffe17 	ldw	r2,-8(fp)
 2003408:	e0ffff17 	ldw	r3,-4(fp)
 200340c:	e0fffc15 	stw	r3,-16(fp)
 2003410:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2003414:	e0bffd17 	ldw	r2,-12(fp)
 2003418:	e0fffc17 	ldw	r3,-16(fp)
 200341c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2003420:	e0bffc17 	ldw	r2,-16(fp)
 2003424:	10c00017 	ldw	r3,0(r2)
 2003428:	e0bffd17 	ldw	r2,-12(fp)
 200342c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2003430:	e0bffc17 	ldw	r2,-16(fp)
 2003434:	10800017 	ldw	r2,0(r2)
 2003438:	e0fffd17 	ldw	r3,-12(fp)
 200343c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2003440:	e0bffc17 	ldw	r2,-16(fp)
 2003444:	e0fffd17 	ldw	r3,-12(fp)
 2003448:	10c00015 	stw	r3,0(r2)

  return 0;  
 200344c:	0005883a 	mov	r2,zero
}
 2003450:	e037883a 	mov	sp,fp
 2003454:	dfc00117 	ldw	ra,4(sp)
 2003458:	df000017 	ldw	fp,0(sp)
 200345c:	dec00204 	addi	sp,sp,8
 2003460:	f800283a 	ret

02003464 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2003464:	defffd04 	addi	sp,sp,-12
 2003468:	dfc00215 	stw	ra,8(sp)
 200346c:	df000115 	stw	fp,4(sp)
 2003470:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2003474:	00808034 	movhi	r2,512
 2003478:	10918104 	addi	r2,r2,17924
 200347c:	e0bfff15 	stw	r2,-4(fp)
 2003480:	00000606 	br	200349c <_do_ctors+0x38>
        (*ctor) (); 
 2003484:	e0bfff17 	ldw	r2,-4(fp)
 2003488:	10800017 	ldw	r2,0(r2)
 200348c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2003490:	e0bfff17 	ldw	r2,-4(fp)
 2003494:	10bfff04 	addi	r2,r2,-4
 2003498:	e0bfff15 	stw	r2,-4(fp)
 200349c:	e0ffff17 	ldw	r3,-4(fp)
 20034a0:	00808034 	movhi	r2,512
 20034a4:	10918204 	addi	r2,r2,17928
 20034a8:	18bff62e 	bgeu	r3,r2,2003484 <__reset+0xfdffa484>
        (*ctor) (); 
}
 20034ac:	e037883a 	mov	sp,fp
 20034b0:	dfc00117 	ldw	ra,4(sp)
 20034b4:	df000017 	ldw	fp,0(sp)
 20034b8:	dec00204 	addi	sp,sp,8
 20034bc:	f800283a 	ret

020034c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 20034c0:	defffd04 	addi	sp,sp,-12
 20034c4:	dfc00215 	stw	ra,8(sp)
 20034c8:	df000115 	stw	fp,4(sp)
 20034cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20034d0:	00808034 	movhi	r2,512
 20034d4:	10918104 	addi	r2,r2,17924
 20034d8:	e0bfff15 	stw	r2,-4(fp)
 20034dc:	00000606 	br	20034f8 <_do_dtors+0x38>
        (*dtor) (); 
 20034e0:	e0bfff17 	ldw	r2,-4(fp)
 20034e4:	10800017 	ldw	r2,0(r2)
 20034e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20034ec:	e0bfff17 	ldw	r2,-4(fp)
 20034f0:	10bfff04 	addi	r2,r2,-4
 20034f4:	e0bfff15 	stw	r2,-4(fp)
 20034f8:	e0ffff17 	ldw	r3,-4(fp)
 20034fc:	00808034 	movhi	r2,512
 2003500:	10918204 	addi	r2,r2,17928
 2003504:	18bff62e 	bgeu	r3,r2,20034e0 <__reset+0xfdffa4e0>
        (*dtor) (); 
}
 2003508:	e037883a 	mov	sp,fp
 200350c:	dfc00117 	ldw	ra,4(sp)
 2003510:	df000017 	ldw	fp,0(sp)
 2003514:	dec00204 	addi	sp,sp,8
 2003518:	f800283a 	ret

0200351c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 200351c:	defffc04 	addi	sp,sp,-16
 2003520:	dfc00315 	stw	ra,12(sp)
 2003524:	df000215 	stw	fp,8(sp)
 2003528:	df000204 	addi	fp,sp,8
 200352c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 2003530:	e13fff17 	ldw	r4,-4(fp)
 2003534:	d1600d04 	addi	r5,gp,-32716
 2003538:	2003f500 	call	2003f50 <alt_find_dev>
 200353c:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 2003540:	e0bffe17 	ldw	r2,-8(fp)
 2003544:	10000926 	beq	r2,zero,200356c <alt_flash_open_dev+0x50>
 2003548:	e0bffe17 	ldw	r2,-8(fp)
 200354c:	10800317 	ldw	r2,12(r2)
 2003550:	10000626 	beq	r2,zero,200356c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 2003554:	e0bffe17 	ldw	r2,-8(fp)
 2003558:	10800317 	ldw	r2,12(r2)
 200355c:	e13ffe17 	ldw	r4,-8(fp)
 2003560:	e17fff17 	ldw	r5,-4(fp)
 2003564:	103ee83a 	callr	r2
 2003568:	00000106 	br	2003570 <alt_flash_open_dev+0x54>
  }

  return dev;
 200356c:	e0bffe17 	ldw	r2,-8(fp)
}
 2003570:	e037883a 	mov	sp,fp
 2003574:	dfc00117 	ldw	ra,4(sp)
 2003578:	df000017 	ldw	fp,0(sp)
 200357c:	dec00204 	addi	sp,sp,8
 2003580:	f800283a 	ret

02003584 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 2003584:	defffd04 	addi	sp,sp,-12
 2003588:	dfc00215 	stw	ra,8(sp)
 200358c:	df000115 	stw	fp,4(sp)
 2003590:	df000104 	addi	fp,sp,4
 2003594:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 2003598:	e0bfff17 	ldw	r2,-4(fp)
 200359c:	10000726 	beq	r2,zero,20035bc <alt_flash_close_dev+0x38>
 20035a0:	e0bfff17 	ldw	r2,-4(fp)
 20035a4:	10800417 	ldw	r2,16(r2)
 20035a8:	10000426 	beq	r2,zero,20035bc <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
 20035ac:	e0bfff17 	ldw	r2,-4(fp)
 20035b0:	10800417 	ldw	r2,16(r2)
 20035b4:	e13fff17 	ldw	r4,-4(fp)
 20035b8:	103ee83a 	callr	r2
  }
  return;
 20035bc:	0001883a 	nop
}
 20035c0:	e037883a 	mov	sp,fp
 20035c4:	dfc00117 	ldw	ra,4(sp)
 20035c8:	df000017 	ldw	fp,0(sp)
 20035cc:	dec00204 	addi	sp,sp,8
 20035d0:	f800283a 	ret

020035d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 20035d4:	deffff04 	addi	sp,sp,-4
 20035d8:	df000015 	stw	fp,0(sp)
 20035dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 20035e0:	e037883a 	mov	sp,fp
 20035e4:	df000017 	ldw	fp,0(sp)
 20035e8:	dec00104 	addi	sp,sp,4
 20035ec:	f800283a 	ret

020035f0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20035f0:	defff904 	addi	sp,sp,-28
 20035f4:	dfc00615 	stw	ra,24(sp)
 20035f8:	df000515 	stw	fp,20(sp)
 20035fc:	df000504 	addi	fp,sp,20
 2003600:	e13ffc15 	stw	r4,-16(fp)
 2003604:	e17ffd15 	stw	r5,-12(fp)
 2003608:	e1bffe15 	stw	r6,-8(fp)
 200360c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2003610:	e0800217 	ldw	r2,8(fp)
 2003614:	d8800015 	stw	r2,0(sp)
 2003618:	e13ffc17 	ldw	r4,-16(fp)
 200361c:	e17ffd17 	ldw	r5,-12(fp)
 2003620:	e1bffe17 	ldw	r6,-8(fp)
 2003624:	e1ffff17 	ldw	r7,-4(fp)
 2003628:	20037c80 	call	20037c8 <alt_iic_isr_register>
}  
 200362c:	e037883a 	mov	sp,fp
 2003630:	dfc00117 	ldw	ra,4(sp)
 2003634:	df000017 	ldw	fp,0(sp)
 2003638:	dec00204 	addi	sp,sp,8
 200363c:	f800283a 	ret

02003640 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2003640:	defff904 	addi	sp,sp,-28
 2003644:	df000615 	stw	fp,24(sp)
 2003648:	df000604 	addi	fp,sp,24
 200364c:	e13ffe15 	stw	r4,-8(fp)
 2003650:	e17fff15 	stw	r5,-4(fp)
 2003654:	e0bfff17 	ldw	r2,-4(fp)
 2003658:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200365c:	0005303a 	rdctl	r2,status
 2003660:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003664:	e0fffb17 	ldw	r3,-20(fp)
 2003668:	00bfff84 	movi	r2,-2
 200366c:	1884703a 	and	r2,r3,r2
 2003670:	1001703a 	wrctl	status,r2
  
  return context;
 2003674:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2003678:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 200367c:	e0bffa17 	ldw	r2,-24(fp)
 2003680:	00c00044 	movi	r3,1
 2003684:	1884983a 	sll	r2,r3,r2
 2003688:	1007883a 	mov	r3,r2
 200368c:	00808074 	movhi	r2,513
 2003690:	1097f404 	addi	r2,r2,24528
 2003694:	10800017 	ldw	r2,0(r2)
 2003698:	1886b03a 	or	r3,r3,r2
 200369c:	00808074 	movhi	r2,513
 20036a0:	1097f404 	addi	r2,r2,24528
 20036a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20036a8:	00808074 	movhi	r2,513
 20036ac:	1097f404 	addi	r2,r2,24528
 20036b0:	10800017 	ldw	r2,0(r2)
 20036b4:	100170fa 	wrctl	ienable,r2
 20036b8:	e0bffc17 	ldw	r2,-16(fp)
 20036bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20036c0:	e0bffd17 	ldw	r2,-12(fp)
 20036c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20036c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 20036cc:	e037883a 	mov	sp,fp
 20036d0:	df000017 	ldw	fp,0(sp)
 20036d4:	dec00104 	addi	sp,sp,4
 20036d8:	f800283a 	ret

020036dc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 20036dc:	defff904 	addi	sp,sp,-28
 20036e0:	df000615 	stw	fp,24(sp)
 20036e4:	df000604 	addi	fp,sp,24
 20036e8:	e13ffe15 	stw	r4,-8(fp)
 20036ec:	e17fff15 	stw	r5,-4(fp)
 20036f0:	e0bfff17 	ldw	r2,-4(fp)
 20036f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20036f8:	0005303a 	rdctl	r2,status
 20036fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003700:	e0fffb17 	ldw	r3,-20(fp)
 2003704:	00bfff84 	movi	r2,-2
 2003708:	1884703a 	and	r2,r3,r2
 200370c:	1001703a 	wrctl	status,r2
  
  return context;
 2003710:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2003714:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 2003718:	e0bffa17 	ldw	r2,-24(fp)
 200371c:	00c00044 	movi	r3,1
 2003720:	1884983a 	sll	r2,r3,r2
 2003724:	0084303a 	nor	r2,zero,r2
 2003728:	1007883a 	mov	r3,r2
 200372c:	00808074 	movhi	r2,513
 2003730:	1097f404 	addi	r2,r2,24528
 2003734:	10800017 	ldw	r2,0(r2)
 2003738:	1886703a 	and	r3,r3,r2
 200373c:	00808074 	movhi	r2,513
 2003740:	1097f404 	addi	r2,r2,24528
 2003744:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2003748:	00808074 	movhi	r2,513
 200374c:	1097f404 	addi	r2,r2,24528
 2003750:	10800017 	ldw	r2,0(r2)
 2003754:	100170fa 	wrctl	ienable,r2
 2003758:	e0bffc17 	ldw	r2,-16(fp)
 200375c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003760:	e0bffd17 	ldw	r2,-12(fp)
 2003764:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2003768:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 200376c:	e037883a 	mov	sp,fp
 2003770:	df000017 	ldw	fp,0(sp)
 2003774:	dec00104 	addi	sp,sp,4
 2003778:	f800283a 	ret

0200377c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 200377c:	defffc04 	addi	sp,sp,-16
 2003780:	df000315 	stw	fp,12(sp)
 2003784:	df000304 	addi	fp,sp,12
 2003788:	e13ffe15 	stw	r4,-8(fp)
 200378c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2003790:	000530fa 	rdctl	r2,ienable
 2003794:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2003798:	e0bfff17 	ldw	r2,-4(fp)
 200379c:	00c00044 	movi	r3,1
 20037a0:	1884983a 	sll	r2,r3,r2
 20037a4:	1007883a 	mov	r3,r2
 20037a8:	e0bffd17 	ldw	r2,-12(fp)
 20037ac:	1884703a 	and	r2,r3,r2
 20037b0:	1004c03a 	cmpne	r2,r2,zero
 20037b4:	10803fcc 	andi	r2,r2,255
}
 20037b8:	e037883a 	mov	sp,fp
 20037bc:	df000017 	ldw	fp,0(sp)
 20037c0:	dec00104 	addi	sp,sp,4
 20037c4:	f800283a 	ret

020037c8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20037c8:	defff504 	addi	sp,sp,-44
 20037cc:	dfc00a15 	stw	ra,40(sp)
 20037d0:	df000915 	stw	fp,36(sp)
 20037d4:	df000904 	addi	fp,sp,36
 20037d8:	e13ffc15 	stw	r4,-16(fp)
 20037dc:	e17ffd15 	stw	r5,-12(fp)
 20037e0:	e1bffe15 	stw	r6,-8(fp)
 20037e4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 20037e8:	00bffa84 	movi	r2,-22
 20037ec:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 20037f0:	e0bffd17 	ldw	r2,-12(fp)
 20037f4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 20037f8:	e0bff817 	ldw	r2,-32(fp)
 20037fc:	10800808 	cmpgei	r2,r2,32
 2003800:	1000271e 	bne	r2,zero,20038a0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003804:	0005303a 	rdctl	r2,status
 2003808:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200380c:	e0fffa17 	ldw	r3,-24(fp)
 2003810:	00bfff84 	movi	r2,-2
 2003814:	1884703a 	and	r2,r3,r2
 2003818:	1001703a 	wrctl	status,r2
  
  return context;
 200381c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2003820:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 2003824:	00c08074 	movhi	r3,513
 2003828:	18d7fb04 	addi	r3,r3,24556
 200382c:	e0bff817 	ldw	r2,-32(fp)
 2003830:	100490fa 	slli	r2,r2,3
 2003834:	1885883a 	add	r2,r3,r2
 2003838:	e0fffe17 	ldw	r3,-8(fp)
 200383c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2003840:	00c08074 	movhi	r3,513
 2003844:	18d7fb04 	addi	r3,r3,24556
 2003848:	e0bff817 	ldw	r2,-32(fp)
 200384c:	100490fa 	slli	r2,r2,3
 2003850:	1885883a 	add	r2,r3,r2
 2003854:	10800104 	addi	r2,r2,4
 2003858:	e0ffff17 	ldw	r3,-4(fp)
 200385c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2003860:	e0bffe17 	ldw	r2,-8(fp)
 2003864:	10000526 	beq	r2,zero,200387c <alt_iic_isr_register+0xb4>
 2003868:	e0bff817 	ldw	r2,-32(fp)
 200386c:	e13ffc17 	ldw	r4,-16(fp)
 2003870:	100b883a 	mov	r5,r2
 2003874:	20036400 	call	2003640 <alt_ic_irq_enable>
 2003878:	00000406 	br	200388c <alt_iic_isr_register+0xc4>
 200387c:	e0bff817 	ldw	r2,-32(fp)
 2003880:	e13ffc17 	ldw	r4,-16(fp)
 2003884:	100b883a 	mov	r5,r2
 2003888:	20036dc0 	call	20036dc <alt_ic_irq_disable>
 200388c:	e0bff715 	stw	r2,-36(fp)
 2003890:	e0bff917 	ldw	r2,-28(fp)
 2003894:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003898:	e0bffb17 	ldw	r2,-20(fp)
 200389c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 20038a0:	e0bff717 	ldw	r2,-36(fp)
}
 20038a4:	e037883a 	mov	sp,fp
 20038a8:	dfc00117 	ldw	ra,4(sp)
 20038ac:	df000017 	ldw	fp,0(sp)
 20038b0:	dec00204 	addi	sp,sp,8
 20038b4:	f800283a 	ret

020038b8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 20038b8:	defff804 	addi	sp,sp,-32
 20038bc:	dfc00715 	stw	ra,28(sp)
 20038c0:	df000615 	stw	fp,24(sp)
 20038c4:	dc000515 	stw	r16,20(sp)
 20038c8:	df000504 	addi	fp,sp,20
 20038cc:	e13ffc15 	stw	r4,-16(fp)
 20038d0:	e17ffd15 	stw	r5,-12(fp)
 20038d4:	e1bffe15 	stw	r6,-8(fp)
 20038d8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 20038dc:	e13ffd17 	ldw	r4,-12(fp)
 20038e0:	e17ffe17 	ldw	r5,-8(fp)
 20038e4:	e1bfff17 	ldw	r6,-4(fp)
 20038e8:	2003b500 	call	2003b50 <open>
 20038ec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 20038f0:	e0bffb17 	ldw	r2,-20(fp)
 20038f4:	10002216 	blt	r2,zero,2003980 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 20038f8:	04008074 	movhi	r16,513
 20038fc:	84127404 	addi	r16,r16,18896
 2003900:	e0bffb17 	ldw	r2,-20(fp)
 2003904:	1009883a 	mov	r4,r2
 2003908:	01400304 	movi	r5,12
 200390c:	20010800 	call	2001080 <__mulsi3>
 2003910:	8085883a 	add	r2,r16,r2
 2003914:	10c00017 	ldw	r3,0(r2)
 2003918:	e0bffc17 	ldw	r2,-16(fp)
 200391c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2003920:	04008074 	movhi	r16,513
 2003924:	84127404 	addi	r16,r16,18896
 2003928:	e0bffb17 	ldw	r2,-20(fp)
 200392c:	1009883a 	mov	r4,r2
 2003930:	01400304 	movi	r5,12
 2003934:	20010800 	call	2001080 <__mulsi3>
 2003938:	8085883a 	add	r2,r16,r2
 200393c:	10800104 	addi	r2,r2,4
 2003940:	10c00017 	ldw	r3,0(r2)
 2003944:	e0bffc17 	ldw	r2,-16(fp)
 2003948:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 200394c:	04008074 	movhi	r16,513
 2003950:	84127404 	addi	r16,r16,18896
 2003954:	e0bffb17 	ldw	r2,-20(fp)
 2003958:	1009883a 	mov	r4,r2
 200395c:	01400304 	movi	r5,12
 2003960:	20010800 	call	2001080 <__mulsi3>
 2003964:	8085883a 	add	r2,r16,r2
 2003968:	10800204 	addi	r2,r2,8
 200396c:	10c00017 	ldw	r3,0(r2)
 2003970:	e0bffc17 	ldw	r2,-16(fp)
 2003974:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2003978:	e13ffb17 	ldw	r4,-20(fp)
 200397c:	2003ca80 	call	2003ca8 <alt_release_fd>
  }
} 
 2003980:	e037883a 	mov	sp,fp
 2003984:	dfc00217 	ldw	ra,8(sp)
 2003988:	df000117 	ldw	fp,4(sp)
 200398c:	dc000017 	ldw	r16,0(sp)
 2003990:	dec00304 	addi	sp,sp,12
 2003994:	f800283a 	ret

02003998 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2003998:	defffb04 	addi	sp,sp,-20
 200399c:	dfc00415 	stw	ra,16(sp)
 20039a0:	df000315 	stw	fp,12(sp)
 20039a4:	df000304 	addi	fp,sp,12
 20039a8:	e13ffd15 	stw	r4,-12(fp)
 20039ac:	e17ffe15 	stw	r5,-8(fp)
 20039b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 20039b4:	01008074 	movhi	r4,513
 20039b8:	21127704 	addi	r4,r4,18908
 20039bc:	e17ffd17 	ldw	r5,-12(fp)
 20039c0:	01800044 	movi	r6,1
 20039c4:	01c07fc4 	movi	r7,511
 20039c8:	20038b80 	call	20038b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 20039cc:	01008074 	movhi	r4,513
 20039d0:	21127404 	addi	r4,r4,18896
 20039d4:	e17ffe17 	ldw	r5,-8(fp)
 20039d8:	000d883a 	mov	r6,zero
 20039dc:	01c07fc4 	movi	r7,511
 20039e0:	20038b80 	call	20038b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 20039e4:	01008074 	movhi	r4,513
 20039e8:	21127a04 	addi	r4,r4,18920
 20039ec:	e17fff17 	ldw	r5,-4(fp)
 20039f0:	01800044 	movi	r6,1
 20039f4:	01c07fc4 	movi	r7,511
 20039f8:	20038b80 	call	20038b8 <alt_open_fd>
}  
 20039fc:	e037883a 	mov	sp,fp
 2003a00:	dfc00117 	ldw	ra,4(sp)
 2003a04:	df000017 	ldw	fp,0(sp)
 2003a08:	dec00204 	addi	sp,sp,8
 2003a0c:	f800283a 	ret

02003a10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003a10:	defffe04 	addi	sp,sp,-8
 2003a14:	dfc00115 	stw	ra,4(sp)
 2003a18:	df000015 	stw	fp,0(sp)
 2003a1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003a20:	00808074 	movhi	r2,513
 2003a24:	1092e004 	addi	r2,r2,19328
 2003a28:	10800017 	ldw	r2,0(r2)
 2003a2c:	10000526 	beq	r2,zero,2003a44 <alt_get_errno+0x34>
 2003a30:	00808074 	movhi	r2,513
 2003a34:	1092e004 	addi	r2,r2,19328
 2003a38:	10800017 	ldw	r2,0(r2)
 2003a3c:	103ee83a 	callr	r2
 2003a40:	00000206 	br	2003a4c <alt_get_errno+0x3c>
 2003a44:	00808074 	movhi	r2,513
 2003a48:	1097ee04 	addi	r2,r2,24504
}
 2003a4c:	e037883a 	mov	sp,fp
 2003a50:	dfc00117 	ldw	ra,4(sp)
 2003a54:	df000017 	ldw	fp,0(sp)
 2003a58:	dec00204 	addi	sp,sp,8
 2003a5c:	f800283a 	ret

02003a60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2003a60:	defffb04 	addi	sp,sp,-20
 2003a64:	dfc00415 	stw	ra,16(sp)
 2003a68:	df000315 	stw	fp,12(sp)
 2003a6c:	dc000215 	stw	r16,8(sp)
 2003a70:	df000204 	addi	fp,sp,8
 2003a74:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2003a78:	e0bfff17 	ldw	r2,-4(fp)
 2003a7c:	10800217 	ldw	r2,8(r2)
 2003a80:	10d00034 	orhi	r3,r2,16384
 2003a84:	e0bfff17 	ldw	r2,-4(fp)
 2003a88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2003a8c:	e03ffe15 	stw	zero,-8(fp)
 2003a90:	00002206 	br	2003b1c <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2003a94:	04008074 	movhi	r16,513
 2003a98:	84127404 	addi	r16,r16,18896
 2003a9c:	e0bffe17 	ldw	r2,-8(fp)
 2003aa0:	1009883a 	mov	r4,r2
 2003aa4:	01400304 	movi	r5,12
 2003aa8:	20010800 	call	2001080 <__mulsi3>
 2003aac:	8085883a 	add	r2,r16,r2
 2003ab0:	10c00017 	ldw	r3,0(r2)
 2003ab4:	e0bfff17 	ldw	r2,-4(fp)
 2003ab8:	10800017 	ldw	r2,0(r2)
 2003abc:	1880141e 	bne	r3,r2,2003b10 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2003ac0:	04008074 	movhi	r16,513
 2003ac4:	84127404 	addi	r16,r16,18896
 2003ac8:	e0bffe17 	ldw	r2,-8(fp)
 2003acc:	1009883a 	mov	r4,r2
 2003ad0:	01400304 	movi	r5,12
 2003ad4:	20010800 	call	2001080 <__mulsi3>
 2003ad8:	8085883a 	add	r2,r16,r2
 2003adc:	10800204 	addi	r2,r2,8
 2003ae0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2003ae4:	10000a0e 	bge	r2,zero,2003b10 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2003ae8:	e13ffe17 	ldw	r4,-8(fp)
 2003aec:	01400304 	movi	r5,12
 2003af0:	20010800 	call	2001080 <__mulsi3>
 2003af4:	00c08074 	movhi	r3,513
 2003af8:	18d27404 	addi	r3,r3,18896
 2003afc:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2003b00:	e0bfff17 	ldw	r2,-4(fp)
 2003b04:	18800226 	beq	r3,r2,2003b10 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2003b08:	00bffcc4 	movi	r2,-13
 2003b0c:	00000a06 	br	2003b38 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2003b10:	e0bffe17 	ldw	r2,-8(fp)
 2003b14:	10800044 	addi	r2,r2,1
 2003b18:	e0bffe15 	stw	r2,-8(fp)
 2003b1c:	00808074 	movhi	r2,513
 2003b20:	1092df04 	addi	r2,r2,19324
 2003b24:	10800017 	ldw	r2,0(r2)
 2003b28:	1007883a 	mov	r3,r2
 2003b2c:	e0bffe17 	ldw	r2,-8(fp)
 2003b30:	18bfd82e 	bgeu	r3,r2,2003a94 <__reset+0xfdffaa94>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2003b34:	0005883a 	mov	r2,zero
}
 2003b38:	e037883a 	mov	sp,fp
 2003b3c:	dfc00217 	ldw	ra,8(sp)
 2003b40:	df000117 	ldw	fp,4(sp)
 2003b44:	dc000017 	ldw	r16,0(sp)
 2003b48:	dec00304 	addi	sp,sp,12
 2003b4c:	f800283a 	ret

02003b50 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2003b50:	defff604 	addi	sp,sp,-40
 2003b54:	dfc00915 	stw	ra,36(sp)
 2003b58:	df000815 	stw	fp,32(sp)
 2003b5c:	df000804 	addi	fp,sp,32
 2003b60:	e13ffd15 	stw	r4,-12(fp)
 2003b64:	e17ffe15 	stw	r5,-8(fp)
 2003b68:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2003b6c:	00bfffc4 	movi	r2,-1
 2003b70:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2003b74:	00bffb44 	movi	r2,-19
 2003b78:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2003b7c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2003b80:	e13ffd17 	ldw	r4,-12(fp)
 2003b84:	01408074 	movhi	r5,513
 2003b88:	2952dd04 	addi	r5,r5,19316
 2003b8c:	2003f500 	call	2003f50 <alt_find_dev>
 2003b90:	e0bff815 	stw	r2,-32(fp)
 2003b94:	e0bff817 	ldw	r2,-32(fp)
 2003b98:	1000051e 	bne	r2,zero,2003bb0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2003b9c:	e13ffd17 	ldw	r4,-12(fp)
 2003ba0:	2003fe00 	call	2003fe0 <alt_find_file>
 2003ba4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2003ba8:	00800044 	movi	r2,1
 2003bac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2003bb0:	e0bff817 	ldw	r2,-32(fp)
 2003bb4:	10002a26 	beq	r2,zero,2003c60 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2003bb8:	e13ff817 	ldw	r4,-32(fp)
 2003bbc:	20040f40 	call	20040f4 <alt_get_fd>
 2003bc0:	e0bff915 	stw	r2,-28(fp)
 2003bc4:	e0bff917 	ldw	r2,-28(fp)
 2003bc8:	1000030e 	bge	r2,zero,2003bd8 <open+0x88>
    {
      status = index;
 2003bcc:	e0bff917 	ldw	r2,-28(fp)
 2003bd0:	e0bffa15 	stw	r2,-24(fp)
 2003bd4:	00002406 	br	2003c68 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 2003bd8:	e13ff917 	ldw	r4,-28(fp)
 2003bdc:	01400304 	movi	r5,12
 2003be0:	20010800 	call	2001080 <__mulsi3>
 2003be4:	00c08074 	movhi	r3,513
 2003be8:	18d27404 	addi	r3,r3,18896
 2003bec:	10c5883a 	add	r2,r2,r3
 2003bf0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2003bf4:	e0fffe17 	ldw	r3,-8(fp)
 2003bf8:	00900034 	movhi	r2,16384
 2003bfc:	10bfffc4 	addi	r2,r2,-1
 2003c00:	1886703a 	and	r3,r3,r2
 2003c04:	e0bffc17 	ldw	r2,-16(fp)
 2003c08:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2003c0c:	e0bffb17 	ldw	r2,-20(fp)
 2003c10:	1000051e 	bne	r2,zero,2003c28 <open+0xd8>
 2003c14:	e13ffc17 	ldw	r4,-16(fp)
 2003c18:	2003a600 	call	2003a60 <alt_file_locked>
 2003c1c:	e0bffa15 	stw	r2,-24(fp)
 2003c20:	e0bffa17 	ldw	r2,-24(fp)
 2003c24:	10001016 	blt	r2,zero,2003c68 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2003c28:	e0bff817 	ldw	r2,-32(fp)
 2003c2c:	10800317 	ldw	r2,12(r2)
 2003c30:	10000826 	beq	r2,zero,2003c54 <open+0x104>
 2003c34:	e0bff817 	ldw	r2,-32(fp)
 2003c38:	10800317 	ldw	r2,12(r2)
 2003c3c:	e13ffc17 	ldw	r4,-16(fp)
 2003c40:	e17ffd17 	ldw	r5,-12(fp)
 2003c44:	e1bffe17 	ldw	r6,-8(fp)
 2003c48:	e1ffff17 	ldw	r7,-4(fp)
 2003c4c:	103ee83a 	callr	r2
 2003c50:	00000106 	br	2003c58 <open+0x108>
 2003c54:	0005883a 	mov	r2,zero
 2003c58:	e0bffa15 	stw	r2,-24(fp)
 2003c5c:	00000206 	br	2003c68 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2003c60:	00bffb44 	movi	r2,-19
 2003c64:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2003c68:	e0bffa17 	ldw	r2,-24(fp)
 2003c6c:	1000080e 	bge	r2,zero,2003c90 <open+0x140>
  {
    alt_release_fd (index);  
 2003c70:	e13ff917 	ldw	r4,-28(fp)
 2003c74:	2003ca80 	call	2003ca8 <alt_release_fd>
    ALT_ERRNO = -status;
 2003c78:	2003a100 	call	2003a10 <alt_get_errno>
 2003c7c:	e0fffa17 	ldw	r3,-24(fp)
 2003c80:	00c7c83a 	sub	r3,zero,r3
 2003c84:	10c00015 	stw	r3,0(r2)
    return -1;
 2003c88:	00bfffc4 	movi	r2,-1
 2003c8c:	00000106 	br	2003c94 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 2003c90:	e0bff917 	ldw	r2,-28(fp)
}
 2003c94:	e037883a 	mov	sp,fp
 2003c98:	dfc00117 	ldw	ra,4(sp)
 2003c9c:	df000017 	ldw	fp,0(sp)
 2003ca0:	dec00204 	addi	sp,sp,8
 2003ca4:	f800283a 	ret

02003ca8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2003ca8:	defffc04 	addi	sp,sp,-16
 2003cac:	dfc00315 	stw	ra,12(sp)
 2003cb0:	df000215 	stw	fp,8(sp)
 2003cb4:	dc000115 	stw	r16,4(sp)
 2003cb8:	df000104 	addi	fp,sp,4
 2003cbc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2003cc0:	e0bfff17 	ldw	r2,-4(fp)
 2003cc4:	108000d0 	cmplti	r2,r2,3
 2003cc8:	1000111e 	bne	r2,zero,2003d10 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 2003ccc:	04008074 	movhi	r16,513
 2003cd0:	84127404 	addi	r16,r16,18896
 2003cd4:	e0bfff17 	ldw	r2,-4(fp)
 2003cd8:	1009883a 	mov	r4,r2
 2003cdc:	01400304 	movi	r5,12
 2003ce0:	20010800 	call	2001080 <__mulsi3>
 2003ce4:	8085883a 	add	r2,r16,r2
 2003ce8:	10800204 	addi	r2,r2,8
 2003cec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2003cf0:	04008074 	movhi	r16,513
 2003cf4:	84127404 	addi	r16,r16,18896
 2003cf8:	e0bfff17 	ldw	r2,-4(fp)
 2003cfc:	1009883a 	mov	r4,r2
 2003d00:	01400304 	movi	r5,12
 2003d04:	20010800 	call	2001080 <__mulsi3>
 2003d08:	8085883a 	add	r2,r16,r2
 2003d0c:	10000015 	stw	zero,0(r2)
  }
}
 2003d10:	e037883a 	mov	sp,fp
 2003d14:	dfc00217 	ldw	ra,8(sp)
 2003d18:	df000117 	ldw	fp,4(sp)
 2003d1c:	dc000017 	ldw	r16,0(sp)
 2003d20:	dec00304 	addi	sp,sp,12
 2003d24:	f800283a 	ret

02003d28 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 2003d28:	deffff04 	addi	sp,sp,-4
 2003d2c:	df000015 	stw	fp,0(sp)
 2003d30:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2003d34:	000170fa 	wrctl	ienable,zero
}
 2003d38:	e037883a 	mov	sp,fp
 2003d3c:	df000017 	ldw	fp,0(sp)
 2003d40:	dec00104 	addi	sp,sp,4
 2003d44:	f800283a 	ret

02003d48 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2003d48:	defff404 	addi	sp,sp,-48
 2003d4c:	df000b15 	stw	fp,44(sp)
 2003d50:	df000b04 	addi	fp,sp,44
 2003d54:	e13ffc15 	stw	r4,-16(fp)
 2003d58:	e17ffd15 	stw	r5,-12(fp)
 2003d5c:	e1bffe15 	stw	r6,-8(fp)
 2003d60:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 2003d64:	e0ffff17 	ldw	r3,-4(fp)
 2003d68:	e0bffe17 	ldw	r2,-8(fp)
 2003d6c:	1885883a 	add	r2,r3,r2
 2003d70:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 2003d74:	e0c00217 	ldw	r3,8(fp)
 2003d78:	e0800117 	ldw	r2,4(fp)
 2003d7c:	1885883a 	add	r2,r3,r2
 2003d80:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 2003d84:	e0800117 	ldw	r2,4(fp)
 2003d88:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 2003d8c:	e0bffe17 	ldw	r2,-8(fp)
 2003d90:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2003d94:	00800044 	movi	r2,1
 2003d98:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2003d9c:	e0bffc17 	ldw	r2,-16(fp)
 2003da0:	10800504 	addi	r2,r2,20
 2003da4:	e0fffd17 	ldw	r3,-12(fp)
 2003da8:	01000044 	movi	r4,1
 2003dac:	20c6983a 	sll	r3,r4,r3
 2003db0:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2003db4:	e0800317 	ldw	r2,12(fp)
 2003db8:	1080008c 	andi	r2,r2,2
 2003dbc:	1000041e 	bne	r2,zero,2003dd0 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2003dc0:	e0bffc17 	ldw	r2,-16(fp)
 2003dc4:	10800304 	addi	r2,r2,12
 2003dc8:	00c10004 	movi	r3,1024
 2003dcc:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2003dd0:	e0bffc17 	ldw	r2,-16(fp)
 2003dd4:	10800037 	ldwio	r2,0(r2)
 2003dd8:	00000106 	br	2003de0 <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
 2003ddc:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2003de0:	e0bffc17 	ldw	r2,-16(fp)
 2003de4:	10800204 	addi	r2,r2,8
 2003de8:	10800037 	ldwio	r2,0(r2)
 2003dec:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2003df0:	e0bffa17 	ldw	r2,-24(fp)
 2003df4:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2003df8:	10000226 	beq	r2,zero,2003e04 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2003dfc:	e0bff717 	ldw	r2,-36(fp)
 2003e00:	1000031e 	bne	r2,zero,2003e10 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2003e04:	e0bffa17 	ldw	r2,-24(fp)
 2003e08:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2003e0c:	103ff426 	beq	r2,zero,2003de0 <__reset+0xfdffade0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 2003e10:	e0bffa17 	ldw	r2,-24(fp)
 2003e14:	1080100c 	andi	r2,r2,64
 2003e18:	10001e26 	beq	r2,zero,2003e94 <alt_avalon_spi_command+0x14c>
 2003e1c:	e0bff717 	ldw	r2,-36(fp)
 2003e20:	00801c0e 	bge	zero,r2,2003e94 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 2003e24:	e0bff717 	ldw	r2,-36(fp)
 2003e28:	10bfffc4 	addi	r2,r2,-1
 2003e2c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 2003e30:	e0ffff17 	ldw	r3,-4(fp)
 2003e34:	e0bff817 	ldw	r2,-32(fp)
 2003e38:	18800a2e 	bgeu	r3,r2,2003e64 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 2003e3c:	e0bffc17 	ldw	r2,-16(fp)
 2003e40:	10800104 	addi	r2,r2,4
 2003e44:	e0ffff17 	ldw	r3,-4(fp)
 2003e48:	18c00003 	ldbu	r3,0(r3)
 2003e4c:	18c03fcc 	andi	r3,r3,255
 2003e50:	e13fff17 	ldw	r4,-4(fp)
 2003e54:	21000044 	addi	r4,r4,1
 2003e58:	e13fff15 	stw	r4,-4(fp)
 2003e5c:	10c00035 	stwio	r3,0(r2)
 2003e60:	00000c06 	br	2003e94 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 2003e64:	e0bff517 	ldw	r2,-44(fp)
 2003e68:	10000826 	beq	r2,zero,2003e8c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 2003e6c:	e0bff517 	ldw	r2,-44(fp)
 2003e70:	10bfffc4 	addi	r2,r2,-1
 2003e74:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 2003e78:	e0bffc17 	ldw	r2,-16(fp)
 2003e7c:	10800104 	addi	r2,r2,4
 2003e80:	0007883a 	mov	r3,zero
 2003e84:	10c00035 	stwio	r3,0(r2)
 2003e88:	00000206 	br	2003e94 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 2003e8c:	00bf0004 	movi	r2,-1024
 2003e90:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2003e94:	e0bffa17 	ldw	r2,-24(fp)
 2003e98:	1080200c 	andi	r2,r2,128
 2003e9c:	103fcf26 	beq	r2,zero,2003ddc <__reset+0xfdffaddc>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2003ea0:	e0bffc17 	ldw	r2,-16(fp)
 2003ea4:	10800037 	ldwio	r2,0(r2)
 2003ea8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 2003eac:	e0bff617 	ldw	r2,-40(fp)
 2003eb0:	10000426 	beq	r2,zero,2003ec4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 2003eb4:	e0bff617 	ldw	r2,-40(fp)
 2003eb8:	10bfffc4 	addi	r2,r2,-1
 2003ebc:	e0bff615 	stw	r2,-40(fp)
 2003ec0:	00000706 	br	2003ee0 <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
 2003ec4:	e0bffb17 	ldw	r2,-20(fp)
 2003ec8:	1007883a 	mov	r3,r2
 2003ecc:	e0800217 	ldw	r2,8(fp)
 2003ed0:	10c00005 	stb	r3,0(r2)
 2003ed4:	e0800217 	ldw	r2,8(fp)
 2003ed8:	10800044 	addi	r2,r2,1
 2003edc:	e0800215 	stw	r2,8(fp)
      credits++;
 2003ee0:	e0bff717 	ldw	r2,-36(fp)
 2003ee4:	10800044 	addi	r2,r2,1
 2003ee8:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 2003eec:	e0bff617 	ldw	r2,-40(fp)
 2003ef0:	103fba1e 	bne	r2,zero,2003ddc <__reset+0xfdffaddc>
 2003ef4:	e0c00217 	ldw	r3,8(fp)
 2003ef8:	e0bff917 	ldw	r2,-28(fp)
 2003efc:	18bfb71e 	bne	r3,r2,2003ddc <__reset+0xfdffaddc>
        break;
 2003f00:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2003f04:	e0bffc17 	ldw	r2,-16(fp)
 2003f08:	10800204 	addi	r2,r2,8
 2003f0c:	10800037 	ldwio	r2,0(r2)
 2003f10:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 2003f14:	e0bffa17 	ldw	r2,-24(fp)
 2003f18:	1080080c 	andi	r2,r2,32
 2003f1c:	103ff926 	beq	r2,zero,2003f04 <__reset+0xfdffaf04>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2003f20:	e0800317 	ldw	r2,12(fp)
 2003f24:	1080004c 	andi	r2,r2,1
 2003f28:	1000041e 	bne	r2,zero,2003f3c <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 2003f2c:	e0bffc17 	ldw	r2,-16(fp)
 2003f30:	10800304 	addi	r2,r2,12
 2003f34:	0007883a 	mov	r3,zero
 2003f38:	10c00035 	stwio	r3,0(r2)

  return read_length;
 2003f3c:	e0800117 	ldw	r2,4(fp)
}
 2003f40:	e037883a 	mov	sp,fp
 2003f44:	df000017 	ldw	fp,0(sp)
 2003f48:	dec00104 	addi	sp,sp,4
 2003f4c:	f800283a 	ret

02003f50 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2003f50:	defffa04 	addi	sp,sp,-24
 2003f54:	dfc00515 	stw	ra,20(sp)
 2003f58:	df000415 	stw	fp,16(sp)
 2003f5c:	df000404 	addi	fp,sp,16
 2003f60:	e13ffe15 	stw	r4,-8(fp)
 2003f64:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2003f68:	e0bfff17 	ldw	r2,-4(fp)
 2003f6c:	10800017 	ldw	r2,0(r2)
 2003f70:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2003f74:	e13ffe17 	ldw	r4,-8(fp)
 2003f78:	20007b40 	call	20007b4 <strlen>
 2003f7c:	10800044 	addi	r2,r2,1
 2003f80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2003f84:	00000d06 	br	2003fbc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2003f88:	e0bffc17 	ldw	r2,-16(fp)
 2003f8c:	10c00217 	ldw	r3,8(r2)
 2003f90:	e0bffd17 	ldw	r2,-12(fp)
 2003f94:	1809883a 	mov	r4,r3
 2003f98:	e17ffe17 	ldw	r5,-8(fp)
 2003f9c:	100d883a 	mov	r6,r2
 2003fa0:	20041fc0 	call	20041fc <memcmp>
 2003fa4:	1000021e 	bne	r2,zero,2003fb0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2003fa8:	e0bffc17 	ldw	r2,-16(fp)
 2003fac:	00000706 	br	2003fcc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2003fb0:	e0bffc17 	ldw	r2,-16(fp)
 2003fb4:	10800017 	ldw	r2,0(r2)
 2003fb8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2003fbc:	e0fffc17 	ldw	r3,-16(fp)
 2003fc0:	e0bfff17 	ldw	r2,-4(fp)
 2003fc4:	18bff01e 	bne	r3,r2,2003f88 <__reset+0xfdffaf88>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2003fc8:	0005883a 	mov	r2,zero
}
 2003fcc:	e037883a 	mov	sp,fp
 2003fd0:	dfc00117 	ldw	ra,4(sp)
 2003fd4:	df000017 	ldw	fp,0(sp)
 2003fd8:	dec00204 	addi	sp,sp,8
 2003fdc:	f800283a 	ret

02003fe0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2003fe0:	defffb04 	addi	sp,sp,-20
 2003fe4:	dfc00415 	stw	ra,16(sp)
 2003fe8:	df000315 	stw	fp,12(sp)
 2003fec:	df000304 	addi	fp,sp,12
 2003ff0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2003ff4:	00808074 	movhi	r2,513
 2003ff8:	1092db04 	addi	r2,r2,19308
 2003ffc:	10800017 	ldw	r2,0(r2)
 2004000:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2004004:	00003106 	br	20040cc <alt_find_file+0xec>
  {
    len = strlen(next->name);
 2004008:	e0bffd17 	ldw	r2,-12(fp)
 200400c:	10800217 	ldw	r2,8(r2)
 2004010:	1009883a 	mov	r4,r2
 2004014:	20007b40 	call	20007b4 <strlen>
 2004018:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 200401c:	e0bffd17 	ldw	r2,-12(fp)
 2004020:	10c00217 	ldw	r3,8(r2)
 2004024:	e0bffe17 	ldw	r2,-8(fp)
 2004028:	10bfffc4 	addi	r2,r2,-1
 200402c:	1885883a 	add	r2,r3,r2
 2004030:	10800003 	ldbu	r2,0(r2)
 2004034:	10803fcc 	andi	r2,r2,255
 2004038:	1080201c 	xori	r2,r2,128
 200403c:	10bfe004 	addi	r2,r2,-128
 2004040:	10800bd8 	cmpnei	r2,r2,47
 2004044:	1000031e 	bne	r2,zero,2004054 <alt_find_file+0x74>
    {
      len -= 1;
 2004048:	e0bffe17 	ldw	r2,-8(fp)
 200404c:	10bfffc4 	addi	r2,r2,-1
 2004050:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2004054:	e0bffe17 	ldw	r2,-8(fp)
 2004058:	e0ffff17 	ldw	r3,-4(fp)
 200405c:	1885883a 	add	r2,r3,r2
 2004060:	10800003 	ldbu	r2,0(r2)
 2004064:	10803fcc 	andi	r2,r2,255
 2004068:	1080201c 	xori	r2,r2,128
 200406c:	10bfe004 	addi	r2,r2,-128
 2004070:	10800be0 	cmpeqi	r2,r2,47
 2004074:	1000081e 	bne	r2,zero,2004098 <alt_find_file+0xb8>
 2004078:	e0bffe17 	ldw	r2,-8(fp)
 200407c:	e0ffff17 	ldw	r3,-4(fp)
 2004080:	1885883a 	add	r2,r3,r2
 2004084:	10800003 	ldbu	r2,0(r2)
 2004088:	10803fcc 	andi	r2,r2,255
 200408c:	1080201c 	xori	r2,r2,128
 2004090:	10bfe004 	addi	r2,r2,-128
 2004094:	10000a1e 	bne	r2,zero,20040c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 2004098:	e0bffd17 	ldw	r2,-12(fp)
 200409c:	10c00217 	ldw	r3,8(r2)
 20040a0:	e0bffe17 	ldw	r2,-8(fp)
 20040a4:	1809883a 	mov	r4,r3
 20040a8:	e17fff17 	ldw	r5,-4(fp)
 20040ac:	100d883a 	mov	r6,r2
 20040b0:	20041fc0 	call	20041fc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20040b4:	1000021e 	bne	r2,zero,20040c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 20040b8:	e0bffd17 	ldw	r2,-12(fp)
 20040bc:	00000806 	br	20040e0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 20040c0:	e0bffd17 	ldw	r2,-12(fp)
 20040c4:	10800017 	ldw	r2,0(r2)
 20040c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20040cc:	e0fffd17 	ldw	r3,-12(fp)
 20040d0:	00808074 	movhi	r2,513
 20040d4:	1092db04 	addi	r2,r2,19308
 20040d8:	18bfcb1e 	bne	r3,r2,2004008 <__reset+0xfdffb008>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 20040dc:	0005883a 	mov	r2,zero
}
 20040e0:	e037883a 	mov	sp,fp
 20040e4:	dfc00117 	ldw	ra,4(sp)
 20040e8:	df000017 	ldw	fp,0(sp)
 20040ec:	dec00204 	addi	sp,sp,8
 20040f0:	f800283a 	ret

020040f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 20040f4:	defffa04 	addi	sp,sp,-24
 20040f8:	dfc00515 	stw	ra,20(sp)
 20040fc:	df000415 	stw	fp,16(sp)
 2004100:	dc000315 	stw	r16,12(sp)
 2004104:	df000304 	addi	fp,sp,12
 2004108:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 200410c:	00bffa04 	movi	r2,-24
 2004110:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2004114:	e03ffd15 	stw	zero,-12(fp)
 2004118:	00002106 	br	20041a0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 200411c:	04008074 	movhi	r16,513
 2004120:	84127404 	addi	r16,r16,18896
 2004124:	e0bffd17 	ldw	r2,-12(fp)
 2004128:	1009883a 	mov	r4,r2
 200412c:	01400304 	movi	r5,12
 2004130:	20010800 	call	2001080 <__mulsi3>
 2004134:	8085883a 	add	r2,r16,r2
 2004138:	10800017 	ldw	r2,0(r2)
 200413c:	1000151e 	bne	r2,zero,2004194 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 2004140:	04008074 	movhi	r16,513
 2004144:	84127404 	addi	r16,r16,18896
 2004148:	e0bffd17 	ldw	r2,-12(fp)
 200414c:	1009883a 	mov	r4,r2
 2004150:	01400304 	movi	r5,12
 2004154:	20010800 	call	2001080 <__mulsi3>
 2004158:	8085883a 	add	r2,r16,r2
 200415c:	e0ffff17 	ldw	r3,-4(fp)
 2004160:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2004164:	00808074 	movhi	r2,513
 2004168:	1092df04 	addi	r2,r2,19324
 200416c:	10c00017 	ldw	r3,0(r2)
 2004170:	e0bffd17 	ldw	r2,-12(fp)
 2004174:	1880040e 	bge	r3,r2,2004188 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 2004178:	00808074 	movhi	r2,513
 200417c:	1092df04 	addi	r2,r2,19324
 2004180:	e0fffd17 	ldw	r3,-12(fp)
 2004184:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 2004188:	e0bffd17 	ldw	r2,-12(fp)
 200418c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 2004190:	00000606 	br	20041ac <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2004194:	e0bffd17 	ldw	r2,-12(fp)
 2004198:	10800044 	addi	r2,r2,1
 200419c:	e0bffd15 	stw	r2,-12(fp)
 20041a0:	e0bffd17 	ldw	r2,-12(fp)
 20041a4:	10800810 	cmplti	r2,r2,32
 20041a8:	103fdc1e 	bne	r2,zero,200411c <__reset+0xfdffb11c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 20041ac:	e0bffe17 	ldw	r2,-8(fp)
}
 20041b0:	e037883a 	mov	sp,fp
 20041b4:	dfc00217 	ldw	ra,8(sp)
 20041b8:	df000117 	ldw	fp,4(sp)
 20041bc:	dc000017 	ldw	r16,0(sp)
 20041c0:	dec00304 	addi	sp,sp,12
 20041c4:	f800283a 	ret

020041c8 <atexit>:
 20041c8:	200b883a 	mov	r5,r4
 20041cc:	000d883a 	mov	r6,zero
 20041d0:	0009883a 	mov	r4,zero
 20041d4:	000f883a 	mov	r7,zero
 20041d8:	200426c1 	jmpi	200426c <__register_exitproc>

020041dc <exit>:
 20041dc:	defffe04 	addi	sp,sp,-8
 20041e0:	000b883a 	mov	r5,zero
 20041e4:	dc000015 	stw	r16,0(sp)
 20041e8:	dfc00115 	stw	ra,4(sp)
 20041ec:	2021883a 	mov	r16,r4
 20041f0:	20043f40 	call	20043f4 <__call_exitprocs>
 20041f4:	8009883a 	mov	r4,r16
 20041f8:	20045cc0 	call	20045cc <_exit>

020041fc <memcmp>:
 20041fc:	30000d26 	beq	r6,zero,2004234 <memcmp+0x38>
 2004200:	20c00003 	ldbu	r3,0(r4)
 2004204:	28800003 	ldbu	r2,0(r5)
 2004208:	18800c1e 	bne	r3,r2,200423c <memcmp+0x40>
 200420c:	31bfff84 	addi	r6,r6,-2
 2004210:	01ffffc4 	movi	r7,-1
 2004214:	00000406 	br	2004228 <memcmp+0x2c>
 2004218:	20c00003 	ldbu	r3,0(r4)
 200421c:	28800003 	ldbu	r2,0(r5)
 2004220:	31bfffc4 	addi	r6,r6,-1
 2004224:	1880051e 	bne	r3,r2,200423c <memcmp+0x40>
 2004228:	21000044 	addi	r4,r4,1
 200422c:	29400044 	addi	r5,r5,1
 2004230:	31fff91e 	bne	r6,r7,2004218 <__reset+0xfdffb218>
 2004234:	0005883a 	mov	r2,zero
 2004238:	f800283a 	ret
 200423c:	1885c83a 	sub	r2,r3,r2
 2004240:	f800283a 	ret

02004244 <memcpy>:
 2004244:	2005883a 	mov	r2,r4
 2004248:	30000726 	beq	r6,zero,2004268 <memcpy+0x24>
 200424c:	218d883a 	add	r6,r4,r6
 2004250:	2007883a 	mov	r3,r4
 2004254:	29c00003 	ldbu	r7,0(r5)
 2004258:	18c00044 	addi	r3,r3,1
 200425c:	29400044 	addi	r5,r5,1
 2004260:	19ffffc5 	stb	r7,-1(r3)
 2004264:	19bffb1e 	bne	r3,r6,2004254 <__reset+0xfdffb254>
 2004268:	f800283a 	ret

0200426c <__register_exitproc>:
 200426c:	defff904 	addi	sp,sp,-28
 2004270:	00808074 	movhi	r2,513
 2004274:	1092d704 	addi	r2,r2,19292
 2004278:	dc400415 	stw	r17,16(sp)
 200427c:	14400017 	ldw	r17,0(r2)
 2004280:	dc000315 	stw	r16,12(sp)
 2004284:	dc800515 	stw	r18,20(sp)
 2004288:	8c000c17 	ldw	r16,48(r17)
 200428c:	dfc00615 	stw	ra,24(sp)
 2004290:	2025883a 	mov	r18,r4
 2004294:	80004226 	beq	r16,zero,20043a0 <__register_exitproc+0x134>
 2004298:	80800117 	ldw	r2,4(r16)
 200429c:	00c007c4 	movi	r3,31
 20042a0:	1880180e 	bge	r3,r2,2004304 <__register_exitproc+0x98>
 20042a4:	00800034 	movhi	r2,0
 20042a8:	10800004 	addi	r2,r2,0
 20042ac:	1000071e 	bne	r2,zero,20042cc <__register_exitproc+0x60>
 20042b0:	00bfffc4 	movi	r2,-1
 20042b4:	dfc00617 	ldw	ra,24(sp)
 20042b8:	dc800517 	ldw	r18,20(sp)
 20042bc:	dc400417 	ldw	r17,16(sp)
 20042c0:	dc000317 	ldw	r16,12(sp)
 20042c4:	dec00704 	addi	sp,sp,28
 20042c8:	f800283a 	ret
 20042cc:	01002304 	movi	r4,140
 20042d0:	d9400015 	stw	r5,0(sp)
 20042d4:	d9800115 	stw	r6,4(sp)
 20042d8:	d9c00215 	stw	r7,8(sp)
 20042dc:	00000000 	call	0 <__alt_mem_sdram_controller-0x2000000>
 20042e0:	1021883a 	mov	r16,r2
 20042e4:	d9400017 	ldw	r5,0(sp)
 20042e8:	d9800117 	ldw	r6,4(sp)
 20042ec:	d9c00217 	ldw	r7,8(sp)
 20042f0:	103fef26 	beq	r2,zero,20042b0 <__reset+0xfdffb2b0>
 20042f4:	88800c17 	ldw	r2,48(r17)
 20042f8:	80000115 	stw	zero,4(r16)
 20042fc:	80800015 	stw	r2,0(r16)
 2004300:	8c000c15 	stw	r16,48(r17)
 2004304:	90001726 	beq	r18,zero,2004364 <__register_exitproc+0xf8>
 2004308:	80802217 	ldw	r2,136(r16)
 200430c:	10002826 	beq	r2,zero,20043b0 <__register_exitproc+0x144>
 2004310:	12804017 	ldw	r10,256(r2)
 2004314:	80c00117 	ldw	r3,4(r16)
 2004318:	02400044 	movi	r9,1
 200431c:	48d2983a 	sll	r9,r9,r3
 2004320:	19000804 	addi	r4,r3,32
 2004324:	18d1883a 	add	r8,r3,r3
 2004328:	2109883a 	add	r4,r4,r4
 200432c:	4211883a 	add	r8,r8,r8
 2004330:	2109883a 	add	r4,r4,r4
 2004334:	1109883a 	add	r4,r2,r4
 2004338:	1211883a 	add	r8,r2,r8
 200433c:	5254b03a 	or	r10,r10,r9
 2004340:	21c00015 	stw	r7,0(r4)
 2004344:	41800015 	stw	r6,0(r8)
 2004348:	12804015 	stw	r10,256(r2)
 200434c:	01000084 	movi	r4,2
 2004350:	9100051e 	bne	r18,r4,2004368 <__register_exitproc+0xfc>
 2004354:	11004117 	ldw	r4,260(r2)
 2004358:	2252b03a 	or	r9,r4,r9
 200435c:	12404115 	stw	r9,260(r2)
 2004360:	00000106 	br	2004368 <__register_exitproc+0xfc>
 2004364:	80c00117 	ldw	r3,4(r16)
 2004368:	18800084 	addi	r2,r3,2
 200436c:	1085883a 	add	r2,r2,r2
 2004370:	1085883a 	add	r2,r2,r2
 2004374:	8085883a 	add	r2,r16,r2
 2004378:	18c00044 	addi	r3,r3,1
 200437c:	11400015 	stw	r5,0(r2)
 2004380:	0005883a 	mov	r2,zero
 2004384:	80c00115 	stw	r3,4(r16)
 2004388:	dfc00617 	ldw	ra,24(sp)
 200438c:	dc800517 	ldw	r18,20(sp)
 2004390:	dc400417 	ldw	r17,16(sp)
 2004394:	dc000317 	ldw	r16,12(sp)
 2004398:	dec00704 	addi	sp,sp,28
 200439c:	f800283a 	ret
 20043a0:	04008074 	movhi	r16,513
 20043a4:	84183b04 	addi	r16,r16,24812
 20043a8:	8c000c15 	stw	r16,48(r17)
 20043ac:	003fba06 	br	2004298 <__reset+0xfdffb298>
 20043b0:	00800034 	movhi	r2,0
 20043b4:	10800004 	addi	r2,r2,0
 20043b8:	103fbd26 	beq	r2,zero,20042b0 <__reset+0xfdffb2b0>
 20043bc:	d9400015 	stw	r5,0(sp)
 20043c0:	d9800115 	stw	r6,4(sp)
 20043c4:	d9c00215 	stw	r7,8(sp)
 20043c8:	01004204 	movi	r4,264
 20043cc:	103ee83a 	callr	r2
 20043d0:	d9400017 	ldw	r5,0(sp)
 20043d4:	d9800117 	ldw	r6,4(sp)
 20043d8:	d9c00217 	ldw	r7,8(sp)
 20043dc:	103fb426 	beq	r2,zero,20042b0 <__reset+0xfdffb2b0>
 20043e0:	10004015 	stw	zero,256(r2)
 20043e4:	10004115 	stw	zero,260(r2)
 20043e8:	80802215 	stw	r2,136(r16)
 20043ec:	0015883a 	mov	r10,zero
 20043f0:	003fc806 	br	2004314 <__reset+0xfdffb314>

020043f4 <__call_exitprocs>:
 20043f4:	00808074 	movhi	r2,513
 20043f8:	1092d704 	addi	r2,r2,19292
 20043fc:	10800017 	ldw	r2,0(r2)
 2004400:	defff204 	addi	sp,sp,-56
 2004404:	df000c15 	stw	fp,48(sp)
 2004408:	d8800015 	stw	r2,0(sp)
 200440c:	10800c04 	addi	r2,r2,48
 2004410:	dd400915 	stw	r21,36(sp)
 2004414:	dfc00d15 	stw	ra,52(sp)
 2004418:	ddc00b15 	stw	r23,44(sp)
 200441c:	dd800a15 	stw	r22,40(sp)
 2004420:	dd000815 	stw	r20,32(sp)
 2004424:	dcc00715 	stw	r19,28(sp)
 2004428:	dc800615 	stw	r18,24(sp)
 200442c:	dc400515 	stw	r17,20(sp)
 2004430:	dc000415 	stw	r16,16(sp)
 2004434:	d9000115 	stw	r4,4(sp)
 2004438:	2839883a 	mov	fp,r5
 200443c:	d8800215 	stw	r2,8(sp)
 2004440:	057fffc4 	movi	r21,-1
 2004444:	d8800017 	ldw	r2,0(sp)
 2004448:	dd800217 	ldw	r22,8(sp)
 200444c:	15c00c17 	ldw	r23,48(r2)
 2004450:	b8001b26 	beq	r23,zero,20044c0 <__call_exitprocs+0xcc>
 2004454:	b9000117 	ldw	r4,4(r23)
 2004458:	bd002217 	ldw	r20,136(r23)
 200445c:	243fffc4 	addi	r16,r4,-1
 2004460:	80001416 	blt	r16,zero,20044b4 <__call_exitprocs+0xc0>
 2004464:	244007c4 	addi	r17,r4,31
 2004468:	21000044 	addi	r4,r4,1
 200446c:	8c63883a 	add	r17,r17,r17
 2004470:	8427883a 	add	r19,r16,r16
 2004474:	2109883a 	add	r4,r4,r4
 2004478:	8c63883a 	add	r17,r17,r17
 200447c:	9ce7883a 	add	r19,r19,r19
 2004480:	2109883a 	add	r4,r4,r4
 2004484:	a463883a 	add	r17,r20,r17
 2004488:	a4e7883a 	add	r19,r20,r19
 200448c:	b925883a 	add	r18,r23,r4
 2004490:	e0001726 	beq	fp,zero,20044f0 <__call_exitprocs+0xfc>
 2004494:	a0000226 	beq	r20,zero,20044a0 <__call_exitprocs+0xac>
 2004498:	89400017 	ldw	r5,0(r17)
 200449c:	2f001426 	beq	r5,fp,20044f0 <__call_exitprocs+0xfc>
 20044a0:	843fffc4 	addi	r16,r16,-1
 20044a4:	8c7fff04 	addi	r17,r17,-4
 20044a8:	9cffff04 	addi	r19,r19,-4
 20044ac:	94bfff04 	addi	r18,r18,-4
 20044b0:	857ff71e 	bne	r16,r21,2004490 <__reset+0xfdffb490>
 20044b4:	00800034 	movhi	r2,0
 20044b8:	10800004 	addi	r2,r2,0
 20044bc:	1000311e 	bne	r2,zero,2004584 <__call_exitprocs+0x190>
 20044c0:	dfc00d17 	ldw	ra,52(sp)
 20044c4:	df000c17 	ldw	fp,48(sp)
 20044c8:	ddc00b17 	ldw	r23,44(sp)
 20044cc:	dd800a17 	ldw	r22,40(sp)
 20044d0:	dd400917 	ldw	r21,36(sp)
 20044d4:	dd000817 	ldw	r20,32(sp)
 20044d8:	dcc00717 	ldw	r19,28(sp)
 20044dc:	dc800617 	ldw	r18,24(sp)
 20044e0:	dc400517 	ldw	r17,20(sp)
 20044e4:	dc000417 	ldw	r16,16(sp)
 20044e8:	dec00e04 	addi	sp,sp,56
 20044ec:	f800283a 	ret
 20044f0:	b9000117 	ldw	r4,4(r23)
 20044f4:	92000017 	ldw	r8,0(r18)
 20044f8:	213fffc4 	addi	r4,r4,-1
 20044fc:	24001a26 	beq	r4,r16,2004568 <__call_exitprocs+0x174>
 2004500:	90000015 	stw	zero,0(r18)
 2004504:	403fe626 	beq	r8,zero,20044a0 <__reset+0xfdffb4a0>
 2004508:	ba400117 	ldw	r9,4(r23)
 200450c:	a0001226 	beq	r20,zero,2004558 <__call_exitprocs+0x164>
 2004510:	00800044 	movi	r2,1
 2004514:	1408983a 	sll	r4,r2,r16
 2004518:	a1404017 	ldw	r5,256(r20)
 200451c:	214a703a 	and	r5,r4,r5
 2004520:	28000d26 	beq	r5,zero,2004558 <__call_exitprocs+0x164>
 2004524:	a1404117 	ldw	r5,260(r20)
 2004528:	2148703a 	and	r4,r4,r5
 200452c:	2000101e 	bne	r4,zero,2004570 <__call_exitprocs+0x17c>
 2004530:	99400017 	ldw	r5,0(r19)
 2004534:	d9000117 	ldw	r4,4(sp)
 2004538:	da400315 	stw	r9,12(sp)
 200453c:	403ee83a 	callr	r8
 2004540:	da400317 	ldw	r9,12(sp)
 2004544:	b9000117 	ldw	r4,4(r23)
 2004548:	227fbe1e 	bne	r4,r9,2004444 <__reset+0xfdffb444>
 200454c:	b1000017 	ldw	r4,0(r22)
 2004550:	25ffd326 	beq	r4,r23,20044a0 <__reset+0xfdffb4a0>
 2004554:	003fbb06 	br	2004444 <__reset+0xfdffb444>
 2004558:	da400315 	stw	r9,12(sp)
 200455c:	403ee83a 	callr	r8
 2004560:	da400317 	ldw	r9,12(sp)
 2004564:	003ff706 	br	2004544 <__reset+0xfdffb544>
 2004568:	bc000115 	stw	r16,4(r23)
 200456c:	003fe506 	br	2004504 <__reset+0xfdffb504>
 2004570:	99000017 	ldw	r4,0(r19)
 2004574:	da400315 	stw	r9,12(sp)
 2004578:	403ee83a 	callr	r8
 200457c:	da400317 	ldw	r9,12(sp)
 2004580:	003ff006 	br	2004544 <__reset+0xfdffb544>
 2004584:	b9000117 	ldw	r4,4(r23)
 2004588:	20000e1e 	bne	r4,zero,20045c4 <__call_exitprocs+0x1d0>
 200458c:	b9000017 	ldw	r4,0(r23)
 2004590:	20000826 	beq	r4,zero,20045b4 <__call_exitprocs+0x1c0>
 2004594:	b1000015 	stw	r4,0(r22)
 2004598:	a0000226 	beq	r20,zero,20045a4 <__call_exitprocs+0x1b0>
 200459c:	a009883a 	mov	r4,r20
 20045a0:	00000000 	call	0 <__alt_mem_sdram_controller-0x2000000>
 20045a4:	b809883a 	mov	r4,r23
 20045a8:	00000000 	call	0 <__alt_mem_sdram_controller-0x2000000>
 20045ac:	b5c00017 	ldw	r23,0(r22)
 20045b0:	003fa706 	br	2004450 <__reset+0xfdffb450>
 20045b4:	0007883a 	mov	r3,zero
 20045b8:	b82d883a 	mov	r22,r23
 20045bc:	182f883a 	mov	r23,r3
 20045c0:	003fa306 	br	2004450 <__reset+0xfdffb450>
 20045c4:	b8c00017 	ldw	r3,0(r23)
 20045c8:	003ffb06 	br	20045b8 <__reset+0xfdffb5b8>

020045cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20045cc:	defffc04 	addi	sp,sp,-16
 20045d0:	df000315 	stw	fp,12(sp)
 20045d4:	df000304 	addi	fp,sp,12
 20045d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 20045dc:	0001883a 	nop
 20045e0:	e0bfff17 	ldw	r2,-4(fp)
 20045e4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 20045e8:	e0bffd17 	ldw	r2,-12(fp)
 20045ec:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20045f0:	e0bffe17 	ldw	r2,-8(fp)
 20045f4:	10000226 	beq	r2,zero,2004600 <_exit+0x34>
    ALT_SIM_FAIL();
 20045f8:	002af070 	cmpltui	zero,zero,43969
 20045fc:	00000106 	br	2004604 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 2004600:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2004604:	003fff06 	br	2004604 <__reset+0xfdffb604>
